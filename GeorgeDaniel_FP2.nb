(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   1554995,      29318]
NotebookOptionsPosition[   1233659,      23790]
NotebookOutlinePosition[   1546518,      29125]
CellTagsIndexPosition[   1546206,      29113]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Evolving Neural Networks With Genetic Algorithms", "TemplateTitle",ExpressionUUID->"34758043-d8d9-44dd-a789-675fe4223213"],

Cell[CellGroupData[{

Cell["George Daniel", "TemplateTagItem",
 CellDingbat->Cell["Author:", "TemplateInlineHeader"],
 CellTags->"Author",ExpressionUUID->"0f6ba866-c3d0-4311-9b18-4f6e1b8657c7"],

Cell["Bernard Etienne", "TemplateTagItem",
 CellDingbat->Cell["Mentor:", "TemplateInlineHeader"],
 CellTags->"Mentor",ExpressionUUID->"0e67a180-ad7d-4310-9cf8-641a37487105"],

Cell["NCSA, University of Illinois at Urbana-Champaign", "TemplateTagItem",
 CellDingbat->Cell["Affiliation:", "TemplateInlineHeader"],
 CellTags->
  "Affiliation",ExpressionUUID->"f040e7eb-bcb1-4d97-8beb-ea56f0aff682"]
}, Open  ]],

Cell["", "TemplateSubsectionDelimiter",ExpressionUUID->"db3c9b28-7203-4de6-8fdc-71adf79829c2"],

Cell[CellGroupData[{

Cell["Most representative image", "TemplateSection",
 CellChangeTimes->{{3.708094573540473*^9, 3.708094574450386*^9}, 
   3.7080949611448793`*^9, 
   3.7080958182774963`*^9},ExpressionUUID->"ba8fb57a-50ef-4f25-afde-\
a880a5da3c9b"],

Cell[TextData[{
 Cell[BoxData[""],
  CellChangeTimes->{3.708121102487195*^9},ExpressionUUID->
  "4904dffe-15cb-4d0f-9197-ca8963215869"],
 Cell[BoxData[""],
  CellChangeTimes->{3.708174503398862*^9},ExpressionUUID->
  "480273e0-59bf-4be6-9ea7-ab6d49821efb"],
 Cell[BoxData[
 ""], "Code",ExpressionUUID->"93b019e4-f2a3-4e61-8001-00d418ceab4f"],
 Cell[BoxData[
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1: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
z1KSRZk1x0j/G5UcHhgcGdvV1blz46rTV+8iOUd2b/zH598kp2fnZ6X+8///
O1W7xt/iWZOXm23JLygKJjr//V+f05lvNvX6n4OYz/F0w/3682XzrTu7+rjP
LVNfU7FxzdI9R86mZ+ZoVPJt61ddvWvV1tZ27vDu3YfPIQW2mhp9NWFGZk5u
ZmLM3//P38ube9pr8kePHltSVlOYTyssrerXKLeaLd9x4FRFZWV8XMSoT/+N
La+88LtvZxuZpGVk9TKfLo5QW17gExCKpYtz03EeJBaL3dzcxBdKeH2dtnYO
SnV/X29PXV1da0uLvfXj2ES0NycmPDg8Jp7L5WYkUbz80P6XfFpOc/szKyzk
ZiRZPrEOCQnNyKIpB000x2X1ZmbTsHROZiZvYG2F2vJCko9/VkYqkUgIJ8eI
ZU/bVUoKC7CD93W25RcahhxD11lGxEYEJ6TR9B9b6ir0bS8AAAA+ohfFKiI+
24vgQU1+rTEDr2QQqyBaG+tCQ4IO7DA3+34/8vHIHvMLNy2xTUd2md+0dEMS
c2ZMiUzJxzIXzp6WkF3+TirzxyJgM25cvbx/3561ZhtTaUX96FhQlUKhwJba
QRLYgNKLR3bfsycgieqC1K/GjEvPpmVlZQWTXP/52ddI5s5Nq+5qtyK+N1vh
Hkjtaiz7178/oabqHs1V+SljJ0zVBwf2v18x+/4gklgyZzohzLBFKz46nJKc
iaVL8jJs7Z17Wboh0GwG3RXnrhj4S9eUFXj5BfWjERfL2sqqtrG1vb29qb7q
wcNHHKFs6MXyuZz6urqK8nKCm7NPYJi+PmIh38PVOSE1M4lCxhN8sJWdEeWF
2bd+u1NYWtHT0x3i74Xsoj9UVWmBrb1jWVmZq4NdfpHhN2dorCIVcR0dHHni
p7VC6uzk5CyUwuy1AADwkT03VunuaMG5uhaUVLyrszwTq2hUv5w/vtJk3c1b
t48f3G2++xCSd2zf1nv22IrJ/acO7rz9BI1VjBfNTSuowjKXLpqfkF32nEP/
ZaRF+387eaZK009wemxsbLxMa4mx8d0nzsjW0we237R0QRKp5IBPv/j60MED
e/fu3b9//7lL15DMPVvMXH0isOPs2bLOHh+MJGLD/I0XLVi6cm1De092XNDC
ZWb6c5H9XI1XmyMJk6WLYtPzDWoSHuSbpo2aUBo1LSPV3s42KDRSplDxmd36
WIXT22lnZ8/Wrn3c19Vq+fhxeEREWCgiJDI6VjQQbzyfSmprY93HHfTlVCtu
X7/624Mng0uV5mV6kvyxtEzItrG1E8meDustyU3/8ccfU7ILhh5+aKxSmJPq
F/zMqsoqmcjZyamXI3xZPQEAALx/Q2MVEZ+N9/To477Lf6IHxyo9zZWfjfoS
+7HqYXVz1cbt/dpY5Y6NG1b4xA/bf7NyRxJGC+ck52K/iDVLFs5LzPnLtasM
Xhuws65o9DcTxEoNj81qHaRPu3T10d0W9xyI/WgLSeq4SdMMjrPD3MSJpOu1
2WVhisUqmNsXjyzftIdJb/zyy9H8gfDh2tmD+09dRRKrjRdGJdMMjhYbEURN
zTHIJOCckrOL5EIOEqugL/2qld5Ez7qBF5fEPKatrd3rv4SskgpsbWzZAl1f
j0IuDQ8JCAwJD/D1DoulKFS6gKSno8nVHY+lub10ewdn+cALx/TWRmcXFwqF
4uTsVNdquJT20FjFh+hRVPnMa0QyEdfZ2ZknfmlMBQAA4P0bGqtUl9DuPXyc
mZmRkpKSmJiQm184/Nc9ClKjxoydisUqIg5j0tivr//+hETATxw9auWmnUjm
Hos1P9+3xwrv22J69XcHJDF10lhqZrE2TzNt0vjY9OJhV+QPRibkXLpwzpNI
IhE8F8yZcdvS6UUlH/96Yfr8paGRsUiUsGezycr13wcEBj6+fwfvg4YoZisW
PMH5YSXXr1zk4BXZ3lD+87WbIcHBe7ZsOPGfm0j+2R93LVhm4u/v/+TBb5Om
zqhp7UYy5303KYRq2A9YmpfpGxSOpWsqStMysiorK9xxruW1zWJur62dg0aj
iSeH3L3/OC8vD/ki0fIKkK9QfEy4sxu+rLyclp1Jy0f/lLFR4WXVDc8cuTA/
Jze/tKTYw9U5Oj5Fn8/soYeEaduFlPLQ4BAmTx9Ia8IDff1DI0pKStxdndNz
CvW7pKfE55dUojUsLYpPTje4hPaGKgdnnP6jVMixfGzJ4ksGl+lpb3T3JMJc
KwAA8NENjVU4rN6szIw0reSkpLzC4uH/c93X1Yb8KtYfp7a88PSJ43fuW9Jo
2ZSEZCQnJSEWe7IgUhMpeSVo109IcGBHDxPLDA0O6uhmDrsifzQaVZAX/sTx
46fPnI2ITXxJQamId+v6lV9uPUBvslJqY3n/yNGjv/72e10TOukKJSayvKYR
K0mNiapu7BBy+67/cvXYsWNObkTVwB/Gy9Pl+LGjSAzTQu/FciJCg5s7egzO
Jeaz3dzcJdqent4uejQ5KiqKXNOAvl0ukwgrq6pVKlVxUX5OTk56enpqampW
di42ULYwjxYeHkFNSOruRacZzMlMa3x2TpiWhtrIiIgoMrms4jUn4UHukCIr
PTU8PLy86g3WuRbyOVXVT08hEfFLy8oNVo1OT4zD3l8GAADwccEc++AtJFOi
0wY1Yvz5SIQ8EonE075bDQAA4OOCWAW8BblEmJWVrVT/aXtIWhpqKqrrXl0O
AADA+wexCgAAAABGMohVAAAAADCSQawCAAAAgJEMYhUAAAAAjGR/oFjlTzuO
EwAAAAAv9rxYRdNYV02hxMUnJDI572C5wKy0RCdHBysrq6DQSKX61eUH62yq
3ncAXZgmmxo2f/EKxZvEKw01FYmpmW92vpGnvqrk99s3L1y4SKa+wQLEH4BK
pdRoDP8erJ4OF1ecWPaWa+hIxaLCAnRiloyMjOq6xleW12jUdTWVlLjYhMRk
Dv8NZlqWSYRV1TVPq69RF+TmkKNjGlp0M9wqFK8/yS4AAID3a2isopCKKbEx
uXn5iZRYa1sHFm+4k+2bLZ9rtMLkzOnTK4wXLl5uyhM9Z9G6F2ksp42fNEWm
Qh6CnYlJqW/UtOJqedNo7eY3re0Io3GxfXTn3iMne7uxY75y9gp5UbkQH4+Q
mKQPVi0eqyeOmqAa8s6yXCpubGwamv+ammvLH1s+oVAo0WRyYemrl1SQivhx
MdF5+fnUmChbByf9+ssvoZBLczJS7awtHXF4fWZkaKBfYCgSI1lbPamoa0Zr
UleZmmm4uAAAAICPYmisMvjHMtHdJa/sDaYDfa4Na4z8Y9Kw9IxJo+1JusVw
ayvLY2JiG5qfmbm0sbY6Jiampr4Z+9hcmT9zzjyxsl+tUkllaJAjEvKFYgmf
00elUju6e/U7KmWihARqcUW1XCZls9FlfwkOD8y+3/fMpakV+bSsOEq8UIr+
au7qpIsk+sBJTafTsSuvLiuiUONFusYBNZPJVCrkqSnJDCZ3mLdiOEj2dxeb
bHnupu4uuvlqo4Onr9TWNWKXwKC3xsXFtXf3YQWYzD61RlNbVZqQlKIY1LSV
mZGC5HAHWiT4bCaVQsnKebpYIXrtSmVmelp759Nb3Y8+3IPKapqwtEopb2io
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
9+ndrhrXLZTyoED/rj7a+74vAAAA/BX4U4bWf1uwPu4PrG1jCYTbVy9On7Ow
k8IYy1XN9dUPbl4y2LBRArZ6vCUDfeTYuITRcWv/NLQ31SWnj3cHHAAAAAAQ
gFaBqCkr/OXns4cOHbp67SapZ6xxcWPDAk+e/rGXxnpzVcAoxCLR6Li1fxpE
QuGf9tkAAADgwwKECgAAAAAAgMkM0CoAAAAAAAAmM0CrAAAAAAAAmMwArQIA
AAAAAGDS8p6EikgooFKpNBV0Op3N4YzTyZDJGGhtaalX0d1LVcoknh7utKFs
LBMJlUoRiV8dFhUwHqrKCvOLy99c7/VQ+3qam1tk8qFvk0ImbWlu6ns57SCd
Rm1qapZI3/t+eQAAAAB8AN6TVmltrPH08MCocEM5uXr6yscnVo7v2zZ3/sK1
a9euXr36lo2zUi6ZNvW7mtZXR1crzs9uaCEhdmlhXm1T29vcSr5Gf1lqQdW4
uvvpo5RLk5MSWbx3CQ5PJrU1NLePLq8sKcgrKnvnLqUkELx90PggrLunD5ML
51Vk0aleHm44fLCnh1tyujpOXXFelruHFy4Ih3LzQHILtrc0trR3vfN9AQAA
APBx+QALQDHh+JyiinE2ssV0tfOLZDQQMj5dV0ervoOCHEolYqF4KD7bpvUr
XQOjEXun2drnLyLDI/D4oxPJKcQSzUSKXE9nYVLuyA5rApwqFaMDqah1mEgo
GN1zkWgSRYRDUL7YJjz6VYiFQokqLY6UQ509c2ZHP3f4WS73FRNZI+LFySVC
bIA/lc4eanNU6LzXIZG+Nlxbe2O1E8odyVecnhATToAjBseEBUXHwyH45GKe
nZ0dnSsWsGn29g5Idsuk2AgkhyCbTkWjMQLxe48FBwAAAID3wfvWKvS+LjcP
L9m446RtMzfERKZoDmW8AUirNHTSoN//d6/9ampmuma1/l0bR+jU80e3vvri
fxYvWXbr3hNnh6fffPnvhdp6Zy/CyX1aa0q3WJiZmBjv2nsESX17+8aVp7a2
Rw/tXbls6cPnSGJoxYql2sl5lZp79XW17d+z08zUZJXBmpScUhGXbmW5h8pS
TzjcunIhJrUAGi1/v/CTqanJ2rXrY1PgtDJZCVEXL10+c/zQ/mM/Kj9qCJFg
NOrqXXVCAWpn04FDR0XywRb4VZhCr2L3vqMDqlch5rN/Pn3MxNTEcN2GyBji
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
lAM9pOOH9kHdO3fphkjVPUhk2Dy4tXnzJnOLzYnJaVfOn/rHP/6xdadlUHgc
dLI4O9Vq1y5zc/P9h04gAWA7m2utn9g8f/LAYutujnAoSGx9ZbEmmj2LQYsM
D/X19U1IgVMWNtZWVtU3QzciEqJCw8JjYmKCg/FlVXAqJWpPFx6HRfv55RTA
b4810IfxD+CLX5qOw/r79Q68FElYLBLy+AJKV+srcxd6uqFaOtWBdgkRwfll
NWN5XQAAAAD4WHxgrdJQVezg4o78jq0sznlq5yQbn1jZs83E6tBJZxUNbV2D
Kq0Sl1U6qJCYG6567OjV0919+uDOY+fgfEDGqxZrrTKurKpyt3vwX//9/375
/U5Nba3VpnV7jl+AzmJcn64yNG3r6MxKiJo9dyGdK06LDoDej29QWH1d3bpl
i89efSzisx2f3FmgpZealtFcVzF92vSOfji4md7cb+Yth/M7F6dFL1m1TqFQ
Lpgzvay5tzybOG3W/OaWjtKi/NrGNomAvcFg2XN3DNSro5abz1y6PThKq3CZ
VAcnp/bOrsqCtO+mTGfwpeeP7Dx89hpy1mjVkqDYrMr8lIWLdctqGxqrSufO
mllU18HoaoC6euWOTWlZhVgypkmP4vSYb6bMEqo+AM/nd9daWEIvbYP+MnuP
AKh7h3dt/Om3e9CpC6f2rzHZUlFdU5CXU1Fdm5tKnDlzpn9wZEt7V0NF/rdf
f40NjWlqarx/9fx8nRVi+WBTaRbUk/vPXMorq4dHWgvGYqoa2lSmAu3lll1Q
zqDT2ztI0HEKMTIyLgVSRSRSe3t7R2Vpwf0Hj3ppDB5rwM0V1dhKYjEZPp7u
ZTVNYj4nOztX/HKcfG83Fx+0f3h4RGNL+/AHHJFnmdrbnZ2VGRqMy8gdCjLc
Wl/h6x80ltcFAAAAgI/Ch3dWUcplYfgAVw/P4JDQAH+MhzdaPj6tsn+nmcF6
kzOnT586daqgAvYPgbRKRmljc1nG1Jlzs3LyMjMz0SjbL76fBZ3abGzgHkSA
LxMxp3z/XXMP7GaZFRe8Yq05ZBjoLrj3zCUrKzM3L3f2lK8i00vzEkN0Vm1A
bkTEeRgYwfmXK7LjV683Qwp3bdzgH5U+0NWwx8py05ZtTIHM7u7lqw8doVMr
lupUtVGr8xP//dW36XmlSP2suJDpcxbm5MK98rB/9PW0eVDhqYM7hmsVGIUs
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
QUFzXbmNg/N7RdLd1nj0yBEPb/+oiPDdW9au3rIXcUb4OPw65veAkMiU5ISl
CzTvPLdAnPiawjHjJ9BlWiXKx2H0hKkJyWkCoXjDivnGDr6IU8ymjBv7q7xB
Jis+aPJMbcRYpj3rzPX7yUmJm1ct+mG0mlQiuXJcT97roT1zkokj+tWS1sxJ
+46dtrCwMDMzy8dUnti3daPesdSU5DOH9/zbv/8XiYrW7quKMv7j//1fl24/
lyfbxeLZ2EnTImMTkhPijF6YiaV9Ud62cxas+Mgs/TAObV/zb//2n43taIOS
gEOfpz751OXbmZmZTnbWkfGofjh7ZPe8JWuSUlKD/L2LymrFfPaU30frWzpi
m1txtZjfRv1kZGGfkZF+9qie7rZ9SPjSjJgJk2e+dh6pu7NDHa4DsSRiQWF+
fjOupa6y1Mrali+SpsaFh8elioR8sxf6/iGR1VVVmJKS1g4ig9pjZvIiK68Q
39KSm53d2UvjMqnRMbFDjlcZeEdVlxZYWNlisY1pybEe3gGSflEbjFxCRd3n
yUgAAADgo1BBrVJRWkLqfmXJXWpvVzHm/SYqEXCYzx7c3b5t29btOx48e8Hm
KYYoxEcE7dPT27tvn7NHgNxD7yFYWtvwZc0DYgH3/l+Xd+89yOQIQvw98zHo
8E6JkGtlZdFFQQdmtDXX2tqjHxC1YqsP7dtz5OiJyOgYdy8fNovx7MmTbhra
OFCNyX1hjn4p4+Vif/HChTNnzpw+fTokNoXHoJ49cWTfvgNhkVHOLi50Ra+H
aOK40WnFL9+SXi62O3bsPHDwsKtXELKJrSxxdvvA/q+PpCQ39YW5jXKzh9h6
/syJHTt2nL98raYBL/OJzY2e7ti58+iJk5X1qCcjMWL79q0BEeigoIYqzPGj
h3fu2vXgiRFX1iBCxGNt7BxfP1FOWkK0ok1Dmp+d4evrExYeQezqRbabsXVN
Le1MGjkuLjY5OTkuLi4yIqKiGv3wp5vUHhwU6Ofvn5yaweULWbSekNAw7lBa
ZdAdVVlW7OPjHROfyOm/K0R8trOTU/8vAgAAAKgQKihUvjUKksO0F638xmdQ
5bJobm5uDDZvuBJQnJse2z/IFgAAAFApQKsMJxKBmeHTqZPVQuMzhzspw09N
OaZSNovsl0csFKQkJ7N4HzLdLgAAAPC5Aa0ynEiEthYmSRnwnawC6ZeaPUZF
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
bBIBx9/Hl0wffFQPsdXMzELefSMV8a3MjF1cXPWfPcP0lyTodfV2efv4oeWc
mB/g69tNoQ+KhNJNMDMzJ3bLGmokQltLU0SSGeg/KyitUYbx83LDVDW86YcY
YXxJrbJ782o7L0XH396ta208wxFjvpZmRRNB7vSyMVi3/TByo82epY7vRn9o
CZeqMWe2XKusWTw/LCn3c6dWZZk+cVxaSUNTVeHKlStXKVi57+hpZFeMn6Nc
qwjonRPHjX6k/8LMFMXdw5PK4rlbP9956JQ8ElfLZ9v2Hu+TtW+YGz6ZOXXy
1XsGYgFrqtrkli6mPAyN1DRl8lTkGXp649yFv54MSkZVSa67T6Byk8Okx0aF
mZiYlMseQ6VW4TAolhYWxB55i6jYwcYqLjElT0ZxCYZKZ77pMofQKjJ83BzO
Xrjc1vXKUvKE1iZ7O/ta7MtBa64ONkWVioe3GpPr5O4zMHygj+vpcxeaO15p
oeoi4B3s7SrrXjbXeLkgNawquY2tKrZzclOcrgWLFGtvSrkqAFrlrUDV6WPg
c5gxUREeHq67tm02tHRCPB1tuIL+2hNiNLegA94uHN3z0MQRMUoyYn/6ZbSB
oeHDhw9vXD773Y+j+9DcXj0w5229Ihm9HVMmjLt84758CebClIjpc+YrT+pj
Z7RU1t+0dJ5GWPLgPI8JD0zKVDhbGqpNjE2y84vkQ1QoXR32Dk7KsW9JMeGR
8amIwSB3vjAySs/MRmpP6alJz54bUJjcvjfwulYRi4QJMRGe3n7eHm5JKZmD
eo7qKstsbGwa+sceJ8VGhkbGdnV11VdXOLm4URiKF65ELEpJiHb38vHx8ohP
SB002KaxttLWxqamv2RLS4wNCovq7OzE1lU7Obv0UBXlZ3JseHRi+ptSPsL4
Alpl/coFjn5RiLFz40prd0Vj2u5Nq609UN0ydfxvVu6KcQtrFmk+MkMHDKiN
H5NWUo8YNUVp//zu+9Zu9KdZrKUemV78uVOrSki5/ePAufSucWNGF1Q1DRku
3NNm0eotMlOiozHdNzpz4F57k4db9/0ht53Nn2xFtIpU8VwwOur+8x//ZPGF
6xZrPDJzkjs9rJ7PX74eMe5fOXn2+sNB52ppqFS2LUj6B83WYvIsbNFRqa5O
Ds0daPtMgI9HcWW98ih/L9csWRvOy2uTSsSvjYXrk2kVW1v7V/qAxKLwIF/f
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
+Pt61/YvjiMnyN9HOdU8i0krKSmurK4ViMRSiZhGR6ec7e3uxGKxzc3NbW3t
7R0d8kWNKb1dRYWFLf0/aGsLjkx9ZX7aLmJbdk5+aVGuT//KZUkxYRHxaXK7
JDctKDzmrRlVmJ3iH/p+ss3Xy4NEYb3ikkp8PN1w/b/dt8mbtAqiBjPSUvAd
Q6zY8gFQugm3rl9ev1Z31eo1l27c4336eYGFy5fo5JX9zdw4SCGBzpldmBo1
ccos9vs0umLy0kytHT46hR8Crr7ixNFDGzasP3T0FP5vG8DRhbe+WLLQAoHB
4b02iatEZG9jVdP4rk2jg+Bz2alJCV6enr6+/m1ExfTUIiE/MS7a3d0jJiH5
XaokAj43PTXZy8vTx8evpf3Vu1csTEyI76a8fbpskYCXlZ7q5eXl7e3bhO94
ZZ9UnJyYQJKtCsTjspmqIfVHtlaR4+fp9vFahYMti/xtjIA7+Ebi4uoSZ8/M
O3K85OK5qN8ntEai87o3Gj2Imjyl7Pr1wrNnwn4aRcW2d0V4JmgvlR9CzU2M
na6BVOVxlvqxMzUwV65kbd2YtHiVgIU8F2JEq5Dr2vgt1XEzZotk4p1Th4mf
NUfE41deOxfy/XepG7fgAqKYZbnxmvP60BWc6dm6yzK27MJcuRw7dUqlvgXi
7E2OiBg7tvjCxeJLl8J//KHJB10JerBWkUorr1/IOXik5PK5mElTWURKk9Gd
9C375DuJgS7Jy9YhRsWFEylr1pdcvBA7eVpvKaoZ0hZopq1en3v4aC+m+t0z
UCqVcNhsYjv+4O5tbv6RQ4bx93CYNH7MTA3tS3/eQTbdrV/MmTv/6pUrM6ZO
cQ9AV2I6tGuD1oLF169fQyKZNEOTxhWyad1rly85fuLsiT+OegSiYXwczadN
U7985Yrezq0a2ou7qOi7e/1yncXL1xw6dCQ9H6M8XTehxcXdS253duAdHRxi
YmKDgkM6yXQ2tcvG1h75jcoxBX7+/pGRUWbGhg6u3khZia0pt7W1i4mJcbC1
zS5A1+XxdnPOG2o9oLqKIuU6y7FhAdH96yRiq0rsnT2UwejKefglYgaTqfT7
ernXNeJrqyvLK6tFA1p+hAKBsvTgsFgDKtpSJ3ubnAJMB4E4MBmlBVkBoVFv
+l2+BYbUKpWYQmdHh/sPHlS/Kl8/DHxD+YSxv546fzUlNT09NcnAyJjC/PSN
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
6vsLfAFt+uQpXWypjeHdI+cUja5WBnf2yhpdH1w9efLPR8gDrqmhQeWKk4Jc
Fq/eoozJ195o9eb9iDF/LqpVeluqZ2toy/tK2rDl6hpaHFmjq/Yc9RJZo2tp
TqKmrCKzXXeprffLro01i7TDUorLc+IXrlgn9+Qlh8+XNbqGeAzWKg4WRmvX
rdu7d+/MaWoPZI2uR/dsMnYK4NFJGnPnIzeT44sHo8dP3LB+/dq1a5ctXrhJ
D23fWDJPM/P9G10RRCJhVmLkRLVpJCq3DVt5+vTpM2fOIpw5ffrOQ30kQIyf
48oNaFVLyOye8NvPq9ei5123fsPkSRPLmkj+jia7DiuKXA8bgy2yxHg5mE2Z
MvXI8fMd3VQpjzp18lR8t+I5ZXS1TFGbimTb0+tnL95+Nigx1aX57j6KepBU
IkqKjTQzt0xKyxKhbQuoVlEOCImLCI6Ml39nJ0H0iZOLmzeCj7e5mXll/f/P
3nvHtZFs66L7vfPue/fes889e08ejz1OY5xzwNg4kMGAjRPGOOc4Ho+zxx5n
MDaYKJQDOecgiZxzzjmKIKGEUI68brUQMsHGYYKNvh9/lKqrq0tNq+urVWt9
a2LeRe3tQiERWfmqkAdgRaO+1rBCCnCVbipTYySF9367i8H7S1531WZQezAo
RFp2PvSxJC/D2dWjm9JLoVCQcK/sglKBhldwQ3Xp/Xu/ITB4seS13SUWvR+H
QSWlqxZBlcW5L5xdO7t7gE7QCHh6TiH0ygLgh8eUvYuh7ONimhAVAAkxkQ2t
7+m2PQbNr54lrlhOXrchSU8v58BR0OleKiw+cShJf2uaqXH2vkMCBjhxtMGc
Kx44Qqe0I15V3FeVu/GeSZsM1HMGKz89WU831cgwZevWBk+Msk6at8+GWQvu
P3ag3OMXLky3sCz7+XKe/RGZ8tXU6HgvetnyZnwov6kq94A91E/947ukDRvT
TIzTjMyZ1eATxcgk5h09BR1lZpPzDp8GCvS0+IQVK1L09JI2bkzfsVvEZBTZ
7SJt2Vp09nz+oYPNGJUdsu7W+filuuqvDIw/ceWqNGOTNFNzmtKckr9/L6Py
3Z5bmZB7ZO/Ordu2GxkZWtrYdvTRJ2tZkpO8aKGOrZLp5aXGAa9uI+AcQyPf
EDBw5uqFk5DlFsC1i6cjk/K6myt1N+iaGBsbm1rkl4Gb/rVl+cCbEzhr+7at
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
VbJTSTAEtqOjHebqUlg6aqoqyc966ewSGxcXFRnh5ORUXqtaDAJvD5iHa1ZB
CdDA08ObM8JV6iuLHzx8lJ6V29jU6IdHB0WocoLz2DQvLxj/bYvWzxifB1ch
RYeYmRgbGRpZW+0kpedN8awgHGzL1m25JTV/6Ng+SwyymPz31af9bCDgcVns
PyiQRIXpzlUUMh+MtxcSByyT83MyXZydM3LyBVNOGzcegwWpsT/OH/u6lwtI
ixaxGkeW6uJBos5CIVfe/Py3ggvXoDpgis8/Dm49NzvczTt5Vc5jkdesA+bA
3gB4qskoc+hEvsxQBg8mr1VylfYa0qp1kIVP0FxJXrUG5CpyQdLK5UxlaCEr
h0zesBkoZBvptwTGqfvJ3Ly+O7kI4CopBirXFHpSZPJmkGOM4SoKsaDkxKE0
C8vSX64mbVhd5egBVFacO1z1AiGi1Cdv2gaNOWqeTra1dZalZfqOHaW3HgKV
qRvW0Cb3qHkrwvAei1ZuVCiGfZGuhoaGJkoYGRo+dwM3yy4c2Xv/BRjpmREX
/O+vv9tts8vS0tLaymqfPRiEeNDGFOGvohx2u8zcsaAuAdrjxfKlS3fbHqGx
uVnxgev1R31y4gIQG7dbAQXDzRsSMsf6T0aG+KfnqcQqZVIxKT7G1dU1MSkN
4CQAs1JzFT6H6e7m1jsAUkR6b6fTc8eg4P+fvbcAa2Nb18fPvb/7P1fOufds
l7o7daFOixRqUJddNyh1d4VSipME4kJCcHd3J1jw4B4CJBAjzn8mE4JW6d61
vH2ePos1a2aNZda7vvV97+dJpVLd3SkUqhdX8CafJamwG3j3OnvUfvWjcBUA
CVHBZ8+ZpucOF/poqq9JTk5pZbK8qOSK2oEUzAppr+XTBw+fWQ0mICV5GXCk
yiFQwmfb2dtDa9kyER8Oh7ezP85ix5eIr4OraKDBV4lvnavIpSlJCZGRkaGh
ocFBAdYvX/oFhfLeOKy8GQqxIHzSL6UI8tBqeYzWLLWRQVRLD5k6Uy7vq7S8
k3FWpRVZ8fx2hlI3UtRUGa+jW/L4fu410O28KzEkZPoc9YEKLxzPunCvD7Kr
lNZLWhlhM+dAAxGvKD0UKCtAT5eoBfN7GsHFUKVdBeQquYd25N56rj6f8BlT
OTXMroTgmA16UBUrwidmnX6fcg0occd+dY/MIEro3MVQmXbEOP8hmGujJzcp
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
3CAR9dbVgW9Ud1d7Vk7ut7IUPQJfyoVLxaLGpib5ZxAgpPgMzuFLx5tjlivp
ORgCZYxd7DBYT/QH1SZtHl1do7ezD9QzEO4y1Dl80tTXL+DVk9uGuw8DlWeP
7HpiC3EV6arli1No4HBWUZi+aMkqoOCNcdhx4JT6mCsXzotI/hJCYz4eZk+d
mJTPYBRlbNiwfqMSGzZs2HfkTB+YFAy1eeseoCDubps6cfzdR88sLS0tLCwQ
Lq6dPUIC7MXuI2ehg+CcLIyVt1Ei5Fo+ujN31oy7Fg4yMXf2jFm17Sqdou7W
6lkzZwMUw+Lm+Yt3ng87DXpu2mD1RS6nM9DP29ZO5fiq5iq9PI6zo2OjMh1z
X58MiXAODo9KBpGUlp7ZOdQBZiR83ImZBeXMhko03g2qUUiFrghER/eA4ACz
qfq86VkC1XfwjngUIqtApUJQlJOK6adVELwpuLOm5rUtAz457U01NvaO6j+R
CKdihoreeLkT02n0N5/nnw0NXYGQl5NBJBLRGExBccUYD+Xw8sn2bduMjIwO
/XE8p+D9BCtqirO1Fi8FRp2UMK/5i1ZK3ieGNC7U9+lLh/c7188P/u5Y4N5t
3rTpzIXrXOFrFWakUolA8BYBlo+Ltra2kXFAHa0NTs5wvujtDvajgtPBpFLI
7u5UIpGQkDrgbN/dxQoMCGh7t8hEZnODJ9Udh8NRqJ4d7LfbaeUycWxUGNAj
FoPNKVB9f7o6WSM1Xr41jOQqgxlgVLCvd2D4GLsAuAqMCA0osnnTxmO8I6Wc
pu9+UulaP7x0Yr0hOM6e+cPkoTVcWSddsXRhUi7oQlBRkLZw8co+cA3IZdKM
BdA7xyhI+XXcpDaOYGRfXxcUYonqVyYVcqZMHJ9WMPo0358IX6dvrCzKVmjN
9osZIu3oavvY+JCK5mEcnu0EuEr/I+6qL/6vf/yLJ5LoamtZIVSswANls2yt
PlB4dOWs2Y3Hw/qqKS9E40hQWe00W5yb6uiCBQo4NLJaGbPs60HOyh/wa3Un
YtNpxcMv73VTDYUM4exQXtsMcFoHe7sOpdx0TVkhCkdS79FcX2VrZ1tQRHcn
4vzDotRTJ3ciOjRGlS8+Jsyf2M9kFHJZRLAfgeJJL8izsbWtaVIlyWW3N72w
eskRgF9dhbTX9tXLqgbVyhSZgKFX1L7mFP8iaLgKAFpGsgsK29TS1tnZMfbI
zc1rFppevx8VGWnx4Ob3P/5SWjPcvf8NqKFnzdNaNKqL+1vh+urRatWP9MuF
IiosJCevqLaKsXn14jPXh38c1LC8d9kB+9eJrFaX0wNDIz+6/aSiKNcVha2p
qamqqmrrFzRIiA53dUE8e27ZyOx8l4NkpiXTCos5HE58VIgrhvjW6ACJSFhc
XMxmcxprq62tX9Yq43Cbaiu9fAO+cdPMSK7Sy+v28fIMCw/38fJwQWK6uscq
Fme4SdsJr/I6yIgJ+OHXie1dnG2bVhuZHLhx4+ZSrblGe8E1oBMHtt974axs
JV2sNTchGxzayvNT5s5fAhQivHDjxk84ftL02rXrs6ZNdkC5v667rwiK53ev
HTh05Nq1q2tXLrtyb7iJQ43qkpzff/3Z9OKlBiYnOcp/4sQJZhcuXTQ3Nb14
G9iKtHm0bZ9qDQhl93jHgTMKueTwXpNr1679sdf40AkzoL4oM2HG9GlnTM0v
Xzq/QGtxKg2kGXfNT5y5+mBYX0JuFwLhwheBSzvtLfXuFEpkRAQBh03JpAE1
aCSiqZ1Tmp95796DoOCQgAB/bx/ftg5OR1ujg52tX0BQWFioX2AI8FXJSIx2
9w4cfOSailIq1SMiIgIgPH5B4RANykpNgMFdQ0JCEC4uVfUDw0oNo4xeCjI3
iYCXlpYh6/9MsYCZlIO9r1+An4+XvaNzc//3RCGXpqel8nvBYaaimF5RXac+
VEJUqBMMAXSBdIH5BoZBB5KJBSgkUp1A5FNBw1UkvXwXBIIn+mgyWEabtd0C
VUmFDDcuf6DMSyjksu2trczNzZ3gGLW1RCLkwuxtgEobB4RQmYelmp6ltXgp
UGS1NkZEgQeprihOTktPjA27fOkiljxgb0xPjL5y5aK1Ayw1NSU1A9Sixzu/
MNh1ePCZlBblPn541/ziJShNcHR4EK1IZefp6WJ6+/gpz4Fna/Xs4qXL0UnK
CYhCFh0VmZ+Xe/3a1cKymo91Tz4ARKfnG7ftH3VTQnTY0gWzNhrscEERoHvp
TkBdvHgBS1aNAkkJsfSSEjTCAbgu9YymtrLk7u0bl65czS5QLRAH+3pevnTp
zt1Hlf18Mi4mOj8///bN68lZgxwA5FIykdDcnxOwobYqLDQkKiaOJxTJJKLK
SnCVvIZRnpiUlJaWlpOTQ8vLlygjECtKi4KDgjKyadBPPjsjraahZfCF5Gel
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
LRaJcK5t6eBxOqytrIrKGJ2dHe3t7WKpLCkmDE2gcPlCUa+wuroGYFDMlsbK
qiGCORx2ZxuT1dvbW1FcYGtn38HhAXcAi4QnpecCHCc0wCsgNFrdmJ6XiUBi
JVI5LS0JQyBLR0gr1JQXIgfIEvjBJOFQKVkFMokY7QLPLhrFYELGo/NK1B9G
BR6NrGkaaxDcx8I3y1UGI9DHI3OQTezDsE1vrWt/4jwAUn7HooULSmtVxsAe
4C1kq35lcoVCf+1SR7yPQoltOtpWCDf5oMBY4N0ednBxr4DdrVZTkS1bNC8q
NX9YG1Z7e69Sg0guG+4NJZOpqHhnB0s4XKdIwWaP/vP/yyAf8SvrvxuKkbeC
3dnBUd4KPqtxyqRJFY0d6phiuVTCbBueyA9AVxd7cNixpJfvRiIpvwMQFDwe
b9gpKPqhLPfLwMqkwJxo0GkPmRkBt10iVd15JNyRphTCDfHzCIlKBLdKhHa2
No1toP2W6oZPyswbvC8PYC84PE+oiSD+BBg1ZhmYn5JIBAwW4+XjzxWMNXLz
znXzkLi0YZWBXqQN69fr6m7evnNvYYVqzIoK9tHZsH6z7uat20yyCsEpTEtN
2ckzZ4FCCS3V9BIYlhsX6n3r4XOofXyYz80HYLmns22fseFG3c2mF66anz1+
9Nx1oDI1NkRHZ+OmTZuACZTxgWM8HvfK2aMbNupcunbz2tVLVH9VCon7F48t
1xkIbQ6g4rS1tTfr6hnv3ldUUQ/8AkzPnCqtaR7jTfgwoOyt1q1dt2nz5q3b
d2UXvnZO18tjHzAx3LBJt7KhXcTnHD+0B7hMgy2GT144AltDfUgPLVSLa2G+
bo+BSoX8yD5j4M5sMdjir1ymAX6hNy6ZbtTZpG+gd+XmI7Hyx42H2zogicP6
AuahGJRrSwf4FWJ3tBHxODweT/XwZnaAGUzCQ4M7u/mFuekoNAaYjVCp7kQS
GRTNVsjDQwLQaAyRSIyISQC+LJlJMcNyuzTWVGKQSOBoRCKpuk7lXgt0QSLi
MRiMf3CYeJCnK8Be1B8cXg93JJ1uaagOj4odVKHgclXmF5lUIhCMMsuLi45Q
x4UBbxQag5OMcQ7/8aDhKgBJdkWN1agCYIfBeqJ/jPpPKQ/kKmX1LODNvnHp
nK6e3prVK6/eA62+1s/u/vzj93O1Ft97aOloa/XLTz/Mnr/w3IVbwKbCzKRN
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
XmyxcqW5uflTJ8/6yoL9h38C6mOCMacuaR0tYkKwJy+CZRaNsmn96rWWVjY2
NtduP9E0w86fP3+z7ZarV6/s3g/uaKRHB/189gp0opjHAl41y1esWAlef2VW
KQmHeLtgoenO3fsunDt7/OwlqFlDWda//du/k+naeyGV5KxYamZlbb1hg7Wd
K/gVdnx275mGyXxuaKounDdvfl2r9mNNqS1fvXKp5XrrjRs3PnoJEhi5RHDi
8F7zVWs2bFj/WuMnHBOKmz1nzoVfH/SCCtiRy5ctBW5zzeo1Ll6atFwK0d6d
26ubBmearqso0vnW5mele3h4YrGYcGKMXKHqoDaHhhOVCjkO7eXljcLj8VgM
JowIakS0kmvhbm4YDAaFxlSQwFWhu5uL1tVEC3ViDBE4DY1G+foFcPnaEKGM
lAR3Dw9vpFd63/qou4Pm7eXp7e2Nxfl1c7Wbenx2h6cXUvbR2i5fNUYDV8lI
iiYQE6Ayp6Pd3Qs1wkdhm80ayJtLB5CrpIAPIb2l4eCeHRusrQ/9dIbdA+ba
s3/1xN7B8acf9y1dYZ6eV+Tn7WYD/F+y2dLU3gGd+/b5w40brS0traOSQGNj
YWbi/YePHe1fbNxgvWXXAY5A2t5Ytdp86f98+93OXft9MJg79x9CJ7o7vngL
B1PPSPhdV69e4/GFt29cq20G1+xwx1cbN9qss7SMSQVj/dobSft2bbO2tj5y
8gIUHHfi0Pbf7BC68Stl4t9uX9u0yWb16tWeOPC/8JVzp7JLaqCjYXjka2cP
oBCI8QCGamVpBUeDLnDM1obbt2+/evZondXGDs4f0jAJwXk+feMKlbtoTadO
n5MoetvJNft2bgMm7eipiz2a4QHjuXv98saNGyytrIkx8VfOHP3HP/6xYZMt
NgDU2E+NCduyafP69es1GvstvZp32u07d588uLN+03aeqJ/DVBbnEiK1avZd
HfRAfzzwcoiKA8lqVVlRcQWpV60MJwTj/QNCQwnAG6mwFNwVam9uxPlgkUhk
cjqYv4nTSfPyRg7yuvTFoqmdA4R25TKpTCZntpF1uQu5LLqnN+TtP+CJi4kI
ySoo+yPTZcCnxe/p1sokYjaH86l6UcjlUg3kw9LpIWhpbqYz+5fSfG43lfq7
lje1Wi2TagHli2cxGR2sbugY1CY+FGO1Ze+g85qamro4X2TOZQqlqbNrAIdk
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
QOju7o4JC3D2fF82H9k3ik0jWVpZ0djSN6nBC12RRmKT4UdpVDDmtUpnM27l
imU37xuMdEe+CkSdnZ0jNeKJvDTx3xjtAT4U0CrDQsS/emq/+pJ1fD5/npJi
ab10CFHMoSgpzGnoYfW2VKiqa9Ik45R2xg93HJDOVu/SWWsjWSkgYlM0NFRr
WtEICbkpEQsXo+sFfJ0t5y/QuvLLr7//ellt4WLs+ZsY4opOQDcTsBaGaJXU
mOD5mppnz198cv/O7LlKPXS+gNmnpqJC4/DPHdaz9gxHOqU8W26z7o5dEnbv
3l1S15oW7r1m0yu3+S+G+eMbh87dpBJaF2ih2izY9eWkqTP27t2DdezGff2S
7CRVDe3Bh7D7OuepqjZ2odM9uzatNnHwk+3SXbvUJSiprTJ3weIVQ07Epfe9
tLSkMqWah0IieLm7mJlbYDFCB2uVrJQ4T79gzE6MDjOzeBkQ4I/g5eWVmfs+
H2bZN0rIZVhaWpIG5t2iQvyTBgKIpSdGBw6sCABGljGvVcRi0ZCpBwAYw4BW
eQ+Dp0tEtM5vJnxPZ3NXLVSxH/BXb63Kmz5rDksg7moolWkVS/07uwfGVfS2
rLF0DexHPUbJ89SUK5tQF7icpLBFy9DwRwrTJ6eVoHOv9UWps+Yoi9BkhfSt
mzdcPH9m5/7jWAvLtDTjc8pl3ViioWjnE4n1Z9o0OTwJ9aX55ezRm7fvbdXR
IbMQvSNeoDonKrNs8IVE+jisHFhf8CUhtOFWrVn325ULfzxGA3Umh3spaSx+
rUJrzaSJk/DkV/PpbBJeRUmZyETv/I2zB3cduzSwR6w4e3oBrr2xJENz0dIh
JxIg+uHlS+LrM8I9+KZn+gZsvigjKToiLrkfTQvSZOfgLPtQs5JjfIMjh3kt
g75RYhd7mzKc1DnT0c66vlXq2ZgUExbxuRetAx/HmNcqADDeGJNyxcXOulAS
1UdGY02ppa3DBzXS01q3c/t2s5fW7q4uG9cs27oX1Q/xwe6Tfppi5+QWHOS3
SF3lqQXaZktV3hS5GVSJVonxd5o4ZYZfYAiHJ9i8WstIEqxSyOybNvVHbEAm
PcZfXmkBYqxfqnng9JXAAP8NK7V+mKYgEgpP7dM5dvk2smuphuJDM3Q9/nyV
Wbq7Dz58+PD+/fvJ2QWXj+9dtVkvOCjo2N7t/+u//t5JRt/ua0tz/va//uPX
e4ZYt73tTX+cOsPNyzfQz+fu/SdCcX+4h9U8rVWfeEs/juO7NvzHf/xXSxe6
fFLAZa5YqLL36LmwsDAj/aeB4aif/PXzR1XmLwkICnawtcrKLxfx2cqzp/3+
yLC8uq6jsWr6lB9vPdQPCws9pKezbf9JpH5RauQMeeU3T+TqaFfVgC4BEAl5
GWmplVXVxfnZVjZ2PKE4MTokJDqJz2UbPnvk5R9cWFiQlZnZ2NLGpPWZmxrH
JaXhamqSEhO7iGQWjRQQEMTmvcWDbvA3CldRZGr+ory8IiYy2NM3UCZ+/L3c
hnzrgJECtAoAjDHGpFapriwfnPYdgdrXW15R9a76b0XAYVmaGR0+dPjgoSOm
lvayONVZKXGnTp44cfKkf0gMVkIjdTu7umF+pGIh31j//rGTZxhsfnR4ULHk
4SXmc1xcnLC0m52t9e6e6Fp7Ar7p4tmT5y9eSU5NCwgKYTJoFmZmFBY6rttY
XWJtjy78D/L1uHP71nUJEYnpQg7zj2uXT548nZCU4uvnS5OG3OTPnjEts7Re
1vPwQK8jh4+cPnvOPwRdf9eEK/fxD/7wu/gZqCzKtnd+NZxFJxNv3/zt0KHD
v9992NjSiRW62FkePnL40tVfcU1odJSCrKQjRw4FR6EjIfim2l8uXzx85IiJ
hR3m8NqDb3bz8HrzRLlpCaHR2CJBcVF+TkCAf2R0DJaWva25oaW9k0HtS0lO
Tk9LS0xMjI2JqcKht4tCIkSEhwUGBqVn5XB5AiaVFBUdw3mbb+2Qb1RtdYW/
v19CchpvYDkTn013sHdgsHlvHgt8eUCrAMAYY0xqlXFFSpin1or1I92LEYbL
ors4O5NpQxeYfzGy0xLiwLF21PB+rSISfTZfRzqNxvqz0IU8NsPR1iYlM/9z
nRT4LDBoFFxt3WfwuX19caVIKODywJXo8wNa5StGyH1054a8vHxsGvwM9tdV
l1fW1P95vb8AIZ+blpr61skjYER4l1YhEbt9vDzrml8tLReLhHlZacHhUR/6
zMKVF2zZuG6xtrb6PPXfH78z3ppIwNm+cbXOjr3BUXFcDqu7h/CB53kn504d
S8kt+/N6YwVyH4lMpX3MkSJBc0vLm9Ea0HxAjq7CTxArXDYrNjIsOeNVnLeK
kgJHB0c7O7uEVOmbS1trCwd+GT4HoFW+YkR8N2f73OLyP68J/JVA2qbRxlu1
SlZqgq2t7dNnz2QhiKl9BGcHu5cvzB1c3zKx+B449D4VeblnLxwIRGJTPS4l
I/td3wBOX5vCXCXMDnKxPHjq6ged6D1oqs7xiUz9XK2Nfo7v1cVyMX8o+Zmp
iWnZn7s7/a0NNXa2NsZGz0OjpbmbCfhmUzPznl4Kg0YxNzUqq0HTkJXkZUbG
Jr23JWC4gFwBAGAs8Vatgm9vZXN4Ad4esqDWLAato7O7s6Xeye3DFgn2tuH+
8T//IL4x5ZiTEn/65ImDBw9ZO6ANsmm9l08e+OHfE69cv+Xg5LR66aIZCkrX
btxmsPhxUaGx8fH3/rh24NDRlk5iSU7qsSOHr/x2kyIJM4iIKIMn9w8c2H/p
15u9FKaQzzE2fI4noGv5O5trLSxt3gxqzWUxrCyMDh86eOLshaYOooDLNDU1
o7GkkxHRoQHxabmIkRgVcvTIoZNnLtS3og5j9VWl/oHBDlam565c/zKCu6MZ
Z2ltL9uUeMWjw1zezraHDh24ev1238BMbllB1vkzJ/ftPxAUERvk5zl9yqS1
m3TNXqLHinhs42ePD+zff+bspcraFrS2kOfj5ZkQH3v40KHiyleLQLlMmpOT
M1MajFpcUpjn7+cXHhXL4QuZtL7ScjTodElRXlR0dEJCQnJyclZuPjpBKBZm
p6f4+vqmZeZi+X1ioyPbOl8bE+vrJfT2UYpy0mS5C+Mjg6MSpEHn8tITvfwl
QUSFfCdH+24S9XPfyPEIaBUAAMYSw8mzLONjgi+JRWcP75RX0ohPeTX+nxDm
PXnqdGd3n4jwkPkqCtfuG4p4TJPHt36aPNXc2jE6JubAzi3zFi61c3Dm8AS7
Ni6dpqAeFhZ699r5iT9NPXribGhY+M9LNQ6evd4vyZp6/dbdtLTUc0d26ew5
3i8WXzm+e9shNN71zo0r7zy37n8j+FJDdcnlX66lpKQ8u/3LguXrkR6qyU9z
CpA8RgUcZfkZGaV1yRE+SqoaUTFx1sZPVDS0mDxRSpgn8vt/+8GziJg40RfJ
EEEj4n/47l8FNWhCZGIb7scfJ/dQWNbP7y1etSExMenGhRNrt6DJpvNTo36a
PNnSziksNCQwJDwjNVFNUX7fsXNBoVFiIW/HhhXb9x2Pjo42enp/0mS5+nZi
v5g/Y+I3K9brenp5d/b0yk5XkpfhHyINTZCbkeTo7NFQX19YWMjk8PGN1S+s
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
zbW6vgX64KF2/QLDkDFm0/rd3D3BGhAAAACMO+Nirgz0kH18vH18fAKDQ5mc
1/w+fScunzsWk5ozShng5WywysB0o6npRvPCShKijAryMTBYBSk3bNicUQDP
az2txH0H4B/4tSWEwyfOQEJqbNDF6z8i5dPigi9cg2Vqb4eZyZp1phtOnD5/
/PD+I2dvQErI4Fm+YsXq1auNjIy27jnIYjGP77c0Xrf+3MVvT544ig1Xh03e
On9oiZGZpmP+Hg76+stNN27asm1HBQkyWpSHD1jXtb4IufwtkYv5x613Q302
Nd2w2/pI3y9v964pISzR0d535OwQHGmMX7Vy+QZTaGw3hUTD4bjfXTkXnqh2
bd26ej4+o7intc7Q0HDjxo3m0GuqlmlaSJWbNhhDDZmsX//M1QcpfObYYUJp
7ai2KF2tXj5YRCZVl7u7e2CxmOi4RKFExmfTomJi5XJZXGSIl7dvSEiIv79/
WESMVDHEpPb7env5+vn5YTAllXBIbSDGu7D8ReVKpSw5Ltrb2weD8QsOjRj+
8JQ5GakeHp5eXl7BYRFcgUhTnsGgq2NrZTKmxuZRyCJCg3x8oUagavw8vb07
eweQO1KxiMUejq1lvYithd9I88GHhLG4akdKXXlhWHTCr/+RAAAAAPCOjOMp
KzzeWK2UNyOXigcGBkYplXLpq8q3RCCAZ5nvz31z4dbjXypDo1JHafZu3+gV
mjhSI5WIfldn5NJpNAbz1w+lkUmEI7fDDFAoEtmbTjOTSV4z/oMDA29xfpoy
JBCr2c8rEYv5/JcWSjTrO0oNw7d4PJ5Upg5/Ur56ltzQkBD6KwpGh7JIJRL+
K8px5+UPXhkWHNAK9iwDAADAB+BPedL+rxITEuiNCSorK0M72kyaMqOh462m
mJ6uDi8XW70VawQScELpu9HX2RqXmKJ470PffveQW+oTceAsOAAAAACMG4XZ
aQf3792+ffvxE6eqSC1v+VRUoPeOXXsa23s+aN/+rHC5nD+xrcLjgjP2AQAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDIpFIej8dXIRQKxWLJ
GAMoxWIRk8EYHBykUqlsLk8pk0RFRTK5H+Q4UKFAIAchkR+ARlJNVV392OuR
yaSagFzow4C+MehjE4pEI8vQqIN9ff2arc0AAAAAAIyitaHO3d3dDwbj4Y72
9A0Y48mdF08e0NJebGhouGrVqh+fOivlkhnTp9S1vn5bcWN9Hblbfau5gdje
+U6bdORmm9YTSolj6u4fH6VCXl5WyuGLfr3oKwz297S0d76qL8nPziAUjrFj
nS0kOwdnngg+v4VF7XdxdvT19fP09EhIUe8OlkqEkWHBfhisr58fknaws721
q5fypkoBAAAA8NdDoVBIVUBCfFQoPqdojBWabzC0dfOHfj5zuVyhWCwTMHSX
LK7veP0EtMvM2CcCh8jW201d/WNeW+wXkOsuXpCaVzXGDv/hEbMXLVzQz/nV
I91GA5mRocGBPRTah+iUUi7FeKEfPnmOZNsht5Aw/sHIlyaTqY/Bh763uBR1
IkKZyq9Cp/Rg/APffKgdAAAAAP6ycOgUN3dP8ZinCYvNazHRL47VkvFokK3S
0DkITV+Otj9v22puYrIe5Qsnj3O1ezTpqy/0V61+bOPo6eY8ZeKXessNrv/w
ALo10NX6jfWezZs3nbp4nS+GpzaH50/9sJjTJ75Zu2aNpz+SjE++Ql8nvaBa
0xY0050/fWyL2aaNZlvL61pEXPq5c+cZfAly18HmYQoBzsFn9+juFrPNZuYW
Baoj34sJaU9snt24fPbQyYsf9wSR2BC/Zy7qhNRMSufly1dFMqVmKE5fuiFQ
DcWQQvrzne+2bDEz3WSWkoq/fuH4f/7zH3MLy8AI+Dzegiyc5Y4dGzdutNr3
TTMZ9lmRm+oePPzZ5ue7m7ZacoQyTXPEyuLIuGR1c7SBqIgwXx+f5PQs6LK+
trKa2AgZHAlx0eHhEbFxccHBQeXVsAurr7sjOCjAz8+PkA9nOWRR+/z8sPxX
Dr/NTk9JTUvHYrEMVYblxtoyTVsIbDrFw8v71UFIjAkvKK8Zj+EEAAAAwJ+N
pJhwfO7oHLvvwZ5tG85cuRWvor2rTy7iwrZKF00hFbq5u3d095Kb66ZMnlzZ
2NnUULdmhe71O0/qiA0tzQ3rDZdd+v5+RVWtmM9at2qpi18odXDwpPWOk1du
Q9Ua6s1fvHJdVW0dARf7708+Uxk/Q6NslWZilTc2iE6nB7k/11lhDFlHyxbN
8VX5bfiMvtkzZnRT2Wjbn0y37enrp2TEh81ftIQnlicGuU+YMCEwPLalrf1X
0gF/YCpykiZOnS2Qwn1wt/1p3dZ9Q3Kx8cqlKEwYdXDg+L7tp6/egW6dP2pl
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
bHRU6/ABHQg1FSWJKenvevpFV2v9fivL1UaGy5ctv//M9ZeKQYbKod1bN5ht
D41JhAwbFov9Xh1/DTeuXMwrJ45XbX8I2GyWZMRJJm+PSMCjqE6/GUUmLj5m
bEffv/pF5WbjfX18vX38WsjwGX0KmbS3r28sTQAAAADgr0NJfraHu9vDn38m
NpMRDYdJ8/fzcXSw88IEv1NVEgF72eJ53//8vL2jo6ayNCk185dMHTGze+78
hYgcH+R5/MLN9+7/KPS054UmZo9XbX8EJKbr1zNE7/NkYmxUY1vXePfnNV9U
RVGOuzeGxeY0kaqe2ztyBWKlQh4XFd7QCrYtAwAAAODX6Whr4XD5kaGB1aRW
RMPjsNo7Orvbm3z9g96pKmpn/Sf//g/7lZ/4xIri61e+PX3mbEgknFxGxGX8
8O3prydN/unh06CQkC0b1szV0n3w81O+UJqblV5YWGT76N65i5cHWbym2rKL
587dffhUqDp0ns9huqMcTp8++dPDJ1yhRC4Vebq7U1lwchlaf6cPJgAyjYwN
l0Wl5mmaloqFQVivc2fPXP3uBwqDIxPzfXx8+cNH2Odk4HKKKiChNC/zwvmz
V2/+2EuFz4ztaK7HpeFD/b2v/3DvNztXtSA7PS1L3XOJgIPFYIVSxZBC6vL8
yenTp/2CX2RZykiJg3p7/uK3ldW1rs8e/O+///32xq307ELoFnOw98Gd2ydP
nnzugJao3pLa15mYlJIcF3Hu0jW+WKGppKu1Pmj43Fq5VFyQR4iOji4pr4Yu
+7o7u3opQ0OKwvzc7GxCXl5efn5eUyt8bptYyMvCp8XExrWq3CM8Nj0dnyGW
vrS488oXpfT1cm/qUPtYAv28SmsaIYHS1eqHDVIMAQAAAADwVmiy4mrobCb6
YAPfqRKlQnZo12bdFWtKK0kaZT4+ftrU6U6uHkGBWO35s+49d5OLuQ++vzxx
0uSfbRyioqN3bdu4SG/FMztnoVi2b6vxjPm6wUGBl08fmjV34ZFjp/wDA42W
ap26eheqqigbd+bC5bi42EO7zK2OXoDaO2W9ff/p69CtQ5abr92zg4S1Bvoj
bZVWUuWxk6djYmK+u3hizcadQwqZ1qwpgfFwYr4hhUR34ZzMUlJxZsJCLe2g
kLDHt2/oGxiL5cqsuMC//f3/Xf3udnB4lOK3OgU+OdRr+rwlyNwdG4BetAxO
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
iB2REXky82Se+431WbV+dfNkZsTOHTu+GREZ8ZDveMkfvvHeW79+zjnfedWN
hVa57orPHZxzztXl3szf98iHvfNDnxywZIOke+963GO/+/B5LxP/d9ttt7/n
bVW/yvXXfu3GWwojXPzhd37L/b4j/8fPnPuYX3/OS8Qv77n33p9/0uOe8W+q
rRjvuJPZnQcJCQkJCQkpT+enb37AA7/b+ONf/skrHvNDP5H/41Hf/ZCPXPz5
4k933/aIhz34gk8VuuXJP/74P/izYhXZu26+5sHf9V2fu/J6cdarX/Sc+S/+
2n23X//gBz/0aqFVvnLpgx784K+WWuX7H/mwd3943/bnverST3z7/c+55Z76
L+/+mzdWY0D33v0Hr3zpM57x9NlP/vi3fPs5d99731ted/Jt9/v2337hS2+6
tVAmf/3n//3b/un9nvM7L7oOq9YjISEhISG5041fu/wb/uE/+NjnrqR//OWn
PPFfHT4//8fDH/Kgj2VfLv929/c8/CEfKrXK/Mced/y6/5n/486z1zzsoQ/9
4tfOirNe8tzF05717+/bXP9dD3rotbcWs1xuuebLD5Za5fse+bD37J1W+eL6
gm9/wHfeQf5SaJUfLLTKb/7LX/ixn37a+z5w/qcv/OCDH/LQa24uFsb/5Ec/
8AtP/ekHPvgRl11RbGf8mU98+Jk//+QHPPAhnzkFs46RkJCQkJBap//4a8/4
pw98xJeuqma9vvF/vPoffOM//vyV1+X/fuSD7v/qsgvl0x95z//2v/4vQrck
j3vMy//7m/J/3HPbDd/8jf/Xy/7ojcW/77jlgWe+5f/7q3fcd99d3/pP/u93
f/Qz+R//+vUn//v/+Q3X3lr0OzzsgQ9Iz//UjorYV7p7c/OD7v+tL//jPxf/
u9nckWuVR37/4/N/53//y7dfkP/jra959f/xD7/phtvuvunGG8XPvvN+//gP
XvfXN99cabxHPPDbXnz8+l1kHwkJCQkJaSrp7n//q7/8wO960BOecO4Pft/3
Pezhjz7vw58QB/7qz/7wm7/5W57ylKc88xlPf/BDHvqJz34p/+Of/t6Lv/V+
3374n198zx23Puqh3/ljyZOe9pSf/d5HP+IXnrUQ37O8/AXP/rYz93/qU5/2
8z/71Ic96rFfP1t0PPzn//Cvv+O7HvKSV/3xzkrZT7rwA+980AMPnjSb/0Ty
xL8/76OfOD/9oXOL4bM/ecUL73f/73jqU5/6Cz/3tEc+9p/dc+99L3zOb5z7
xOSpPzP78Z96yvU33fKy5z/7R370iU978s+c++NPuuJr1+26HEhISEhISGNP
V33li+98x9s//NELje9nL78se9e73n3b5s6zZ2+6485qh99PXPThCz++vuuW
6x/5iEd87stfff973/PRi7R5sxd/6uPnnfe+u+6+58Ybbrhbbs57wYc+cPFn
L7tv79Lmlpve9c53fPjCj911z7133rG59tpKeFyy/vh73/v+vPg33lBM6bnl
7E3vPe89733/B4U58v99//tyI73/7t3lHAkJCQkJab/THTd97f73+7aLL8f3
tkhISEhISEhjTHfdeuMzn/5Ll199/a4zgoSEhISEhISEhISEhISEhISEhISE
hISEhISEhISEhISEhISEhISEhISEhNRjundz61ff9c577jb3QL72/PffcsVV
6n9vWn/8+vUlxm9uuOjCO2669ab1RTdmnw+5161fuPSmSy7dMsNISEhISEhI
e5Puuv7rX3v/+f7f3H322otf9KK7NubyJ58/Obrmwk/fffNN13+8WIb3qre8
4Utv/TvjNx/9hZ/76vmfuuotr//K298bkp/LX/2y9X/9/Zsu/uStV+EDcCQk
JCQkJKT7shc/7yvp++687prbv17sLHDnDdfd9tWv33vXHbde8eVr3nfeF//i
zWL5uk25qtvtV1959rOf+cJrX3fLV75a/PjGG++65eYvvOrF7zj3J25Yf+bu
22+/65Zb77v3nq+/552X/Y/X3vKVYqOfj/3zX77qvI/edfPZe+6485ZLL7nq
7W//+vnnX/+JQtvcfsUXP/+a1954SdXfcv3577v8jX/x2f/6/OwPXnfL5z7x
8Wf/9o5MgoSEhISEhDSWdNd1V13wzGfl/7j8D1+2/m+/l//jytf/ySdf8Ip7
zl79t+c84NI/+dOPPusXP/acF953710feNKT86Pn//QTLvjVxWdf9cp3/ciP
3X3n3Z/6jV+/4m3vueS/HL7tsf/sir975xd+76UXv+yP7rnlhuyVR194w+ve
96SfueuOuz7+q//82k99/tKX/JfLXvPma9/7jotf/vJ3P/77L/yt522uuOyC
pz/j82944/lP+9mbvnjVV//mz9/300++7I//5B0Pf+jFr/jT/F4f/ZVn3PiF
q7zZR0JCQkJCQtrzdM073vrRf3eY/+OLJy/79Mtenf/jyjf+6ade+Mq7vv6F
9/7ULP/fu6+9/P1P/dl7br/lg/On3HvffR96yk9e++kv5n//8C8+9cbLr/70
8t9eed5Ft33uYxcdPjf/42UvfcH6Rb+f/+PmSy+58q/f8vbHPPrWa2765L/7
1VyrXPbfnvfZ4z/LD91787UXPOOZd99172d/Z/mBX/m1q//2b8//udnFL/u9
C//FM2+4tFAmn3/liz71glfl/7j4uYeff8P/3JVlkJCQkJCQkMaQrnrzay76
f/5T/o8v/P7vXvzKPyr+8qbXfPIFr7jzq5//0NOfmf/v5iuf+9Av/8rdt938
wSc/LdcqH3nGz95QbjB90b9+5o1f+Mqnf2tx5XsuvOnC8z76m8/O//j5l78w
+8PXf/Vv3vShZ/6rK/8ufd+TfvLmq6+rtMpLn5+VWzBf9C9/+ZqPfzb/xyf+
7bM+8h/+3yve/KYr/u7vb7n8Cx+cz2+7/vb871/6o6P1Cwut8rkX/afPHr9m
Z6ZBQkJCQkJCGkG68SPnXfAv/k3+j2ve/tZ3nfsT1130sQ/+1LkXPfcld159
6Xt/ep7//fYvfeZ9T37q3beePe/cJ+Za5fz5E6/7dDG95IKf/5kbLrviE7/+
rC///fm3fuYj7z43uflLX7n0Rb/92Ve/NnvBsz/+Oy89e8mn3nbwgFu+dsNF
v/JLX//Y57LnP/uy17zl8uOXvPPcn/zqeeddc8FHr37r6z/wc0+/+YuXX/OB
9999xz3r5a9e+JvPvf5jF73r0d/9yecd5bdY/9ZvfPlvg6bjIiEhISEhIe1r
uveOWy94+i/ddv0t+b+/8Iev+vhznvulN77x+k9dcs+tN171d3+f//Hum6+/
Kn37vXfdeeXqbfn/fvXv33b7dTcV/3hnurnplmvff97NX7zyvvvu+eyLn//5
173ppvUnr//kJXedve6T//Ewe9UffPktb73rts0173nX7dfceONFH7nxks9d
8cbXXvLKV178u7/7hde+Ib/IFW98zUWHv3XJK37vrtvvvPeOWy7+7eeun/eC
K978Vzd86pI8Yx951q9sbrxtp+ZBQkJCQkJC2n268k2vvew1f7HrXJjp6tVf
Xvqnb9h1LpCQkJCQkJBGkW67+updZ8FMt1999b337DoTSEhISEhISEhISEhI
SEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhI
SEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhI
SEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhI
SEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhI
SEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhI
SEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhI
SEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhI
SKNJ3/DYHxMcnHMGAAAAAGAwoFUAAAAAMGagVQAAAAAwZqBVAAAAADBmoFUA
AAAAMGagVQAAAAAwZlpolXRzNjtJjOvMTtab7GgWd/fFZnM2PQz5ZXKcnc1/
LAi6y/xI/d7ObSu0PJSsj+dh586TNFsXp9gmmi8ycbVsdXwYnc/C7EYB54vj
dC1yGHXB5cmRymTovTwZI9nIspX9gyxzlNphK3F3g46eLAAAgFHTQqss07Ob
dKFfp2jH4xuOcK1SE6pVZMa61SptLnW42mTr5Tyx5ZwQP8tS8MwOV1mkNYoH
sTH0QyIEgPhfoYICM5meHOWZ9GiV/F5ZsAWyQoRUTnKc6rouN4jM87JUINoh
h62YskdrYwAAAJOkzRhQ0daslvQ686OMtjjnnKlejfPWzVI1ogFNTxazDrSK
JkXEq7fefo1Aq0js9tcSBgvTsD4W5dUsC2i3WKS5Foo0L6dViuvMtrBAcVnp
CaaCst2psZuuVDuhnVoAAAAmThutUgyvlK/JRZOh/lG3ictU664nzZA+jJKu
oFUsrWKOK7lMlF+t/GWzVrEv6OlsYbVKadj1Nhagly0zQEaFlDt5bUURXtTF
MwUAADAB2mgV2T4WLVf5vkxFQsq9NR9wh8RZ09Iq2nyJyDEIXqsUGoDayjQI
a6IyJyumgEo9ei8YqVUS2e/RUqsYE104hWZm0q9VTLUDAABgr2mlVaou/eKd
PSvanXLiRNX8ZWY7slDNMfdCPSmtkq6qi8+Tqu/IHOHyETJfJdAgpFBGAZn5
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
1xWcUyAKzy8dibqi1a9i0EqrVFPdjkhnTonZr2ISVE20OXW+Ug/fr+K3W6+B
oioOAgXogC60yvd2rlXOZpkxhFq/arG1plGrbLgOGfss62OEljPYB9Uq5TQY
XVA1z7SxP7twUER4anMi3phDsbMIwCQwtIr9oFtrlayq7FFtWTutUneh6Ocy
ayAYRetQqzTOV2EPdcPggUI6CQIF2J4xahUZUjStUk1eNatVx2vBMUEy4Gsg
phuZlN2jVdqtBWffjunXtYxvn2V9CnpmYxef/F2y8hzaoncIjJfGteAc6mKR
bkwPN36mJjNYdzS+zdFWR2mnVVTFb7iXqyPRaxNSx/2lbvgOSF3f1iqxc2v7
CxTiN/YdPdEAgQJsxxi1ihyI0fxZRIaGDwB5rbLO0iP/Ware2W1xYGCcHR7J
lRaK98SZq2jndKBVihPTtbhdxiwu4eoLStJsLUe41sfcnECXVpkd1utImJHN
fQjsDbRdtmpTQWutIlcJ464pZ4MYFWoLreLx8CN1r/REa5rd/SpJPV9Fm7ba
UOqG9VVoVrfTKge9BQqXVkGgAL0xFq0CAAAAAMABrQIAAACAMQOtAgAAAIAx
059WAQAAAADoF2gVAAAAAIwZaBUAAAAAjJnttArmqwAAAACgX6BVAAAAADBm
oFUAGD1h27UA0CULdi04AHrDF+igVQAYPdAqYHigVcDAQKsAMGmgVcDwQKuA
gYFWAWCK8JvOoAUB/eFyOUhl0BuLEJfrR6uQW5sblrU8lIYdmoUeOhN0yFpD
z3OI5t9zaM9KDYP0WepGrXLaDDKZUk/XII1aZTylnrSHjNwNhq0XO9QqAIAO
wRgQGB6MAYGBwRgQAJMGWgUMD7QKGBhoFQAmDbQKGB5oFTAw0CoAAAAAmCrQ
KgAAAAAYM9AqAAAAABgz0CoAAAAAGDPbaRUAAAAAgH6BVgEAAADAmBl+DGh5
ssoysTDdejlXf0/ognVZtqp/n57dpIv6CoerzWa13KLIxQXzW5wk5IJnt7ng
qeU405YZPD5M+r6juGn97AKZH+XOdjxvece+EdbTc1vUDvKb4lO+8IomPFyx
nPf6XBLDDbTKpZMaJd1TajukRw7jJ23ceLv8xJ+4sJY/dZKZHhsaVzPiNrE5
ZG5KEG6p/bGqWT4XjUJUNMvUq+2vPAKYeq0390nelNvttX0oJv74At3QWoV4
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
pP6TMn1Qp0WryD6r2lCO0jFDFZHvpK1hnoXe36IHydGsBefxWJrDnmuotZya
HpxdjbUxIdCcfEg+HA7Mf/ynzVyHaraycsKbkVsLri6X+qwyPP/KmH1rFbvU
xmJTbKnZs4yhRtYNPO2vfYop8xwe0q0biPwbt7P0CRMN7Mw3DfdoTmIXzatV
zBx6bOWRT3zZR6xV9KJpTzbTS800K+Sj+Altv+uvnkt92oldLtbrdN82Wtva
tY75AcT6B6710Fyu7mCMWkV6i1bBmbO4fkvPWHmnsB+wr7KqA39tF3wpP2As
p9zvRKs3aJWZnIJ13PvsMr9W8b0FKAszbSVZkG3b1S28zA6PZDaKDkCzJio3
4II/e0gf8I0djxjoO6Ci1DL42x7iKLV2lvVhTo9aJX8u4ZMk27mBX6u4okGT
Vol2/k60Sm6rSBcatVZRoUzXxiVkvqhzcdeJzleRFY1tX+T6KkzIOnBolaX8
Rp794EJ8TpWlR67JTsdybRb7kIqfg2uVx2+vVTwMtcgbOF3si1/tZL7K/rAv
bjAwo9YqYB+ZgFYBALiBVgHDA60CBqYrrfJ4aBUAdgG0ChgeaBUwMB1qlcfv
uiwAAAAAOF1AqwAAAABgzECrAAAAAGDMQKsAAAAAYMxAqwAAAABgzGynVaL2
jwMAtGOgjSYBIERtrwnA9vgCHbQKAKMHWgUMD7QKGBhoFQAmDbQKGB5oFTAw
XWiVR1KtwuxAAdECQNcwm+lYOysB0CUul0N4B70RpCj60SrkB+bKhy0PpWGH
ZqGHzgQdstbQ8xzybDq5x6WGQfosdaNWOW0GmUypp2uQRq0ynlJP2kNG7gbD
1ov+tIp2C+htAHoGY0BgeDAGBAamozGgR0KrALAToFXA8ECrgIHpTqs88vHG
laFVAOgfaBUwPNAqYGD60yoAAAAAAP0CrQIAAACAMQOtAgAAAIAxA60CAAAA
gDEDrQIAAACAMQOtAgAAAIAxs51WWdjL2fXB8mSVZmuxlt3xYbLl1dgl8rb8
+DqTF8lOts2eJKF5y7KVdnSeLE+OHGsenpkdrly28hzycJyuqwJm6+VcyyG9
++ykeEbH89rIhn3Eodl8kV9QlYtccFzkXpdlVal3nZniU77YitbODfJDotSe
QxvDG5tgzzLcezmPcMgq/9mqKw9vd9awJMobUzaTc7X45/p4bh5SNc485GNh
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
JnbQ88uhGYT2zNeAIrezCmXNJ+jcgudrB11/i1aRw43qg0L9XLbcZVDOAbFp
cKZI9+ZfhbOmfxWH1Cp0N5e6XyWSNpJmM+FZZgOqb5ZsmrtE+qVA60DP56Le
v8oHG7xq0j+wjlY5mTMm6uaKpPFHT1D2df3p3NSExfi6VrEbFRYzA0qknw/3
q9DOLdkx6hZuypDuVxnf7F7XKhM8cuxaq7Qua3ahTSnM6Cvt4bWK5l/Fv1b3
Gey+oIo3bV6ldR6QnuHKESsloVXs64lWyHZjXn2XtUet4janjVolosSUbRVr
Lbio54Di0zt8/meTJaHMLg6awoU9DNATgn8/SctSp614IrVOcixV42KiLP2J
o6AxlJN3rVys1IuRnhzkm518j1qTfl+Yi2sVbcn7HL0qdhNpKUwUY2L8lZbj
C5PvFy2eKJhgBqbk2c+JKbWxvd/0z/+W9hyzcO5ptqCsZAoTZVW5oXTXWoVZ
o1KSibGJHIo/2BoQreXQJNiZZX2iSVRoaNtstB1N61t3Ej5+IeYPLWbqEfai
VVIMC46bGwN4N7SF7AOCOMuv8SZmsDK71irgHTmCVgEARIFWAesDrQJWBloF
gEMDrQLWB1oFrMxyWgUAAAAAYFmgVQAAAACwZ6BVAAAAALBnoFUAAAAAsGdK
tcp/hlYBAAAAwAZAqwAAAABgz7ymVUTUOQDA/KwUFBsAwvW5ixhn4PeQ6ugq
tMp/hlYBYBOgVcD6QKuAlZlPq/xnaBUA1gdaBawPtApYmdm1ihItC6IFgLlR
4j8+SRRIAGYnZnLo3sFiFCmKYq3yv2rmVchPcy/NEy81ZZfOpZf+FF0S/n4T
lxJBJ9841yiQ5XP9J/668TsL5AC5PnqB+F8UH+4o14e2kEOYwbrt4s9M8ypV
WgUAMCNYAwLrgzUgsDJzaZX/Ba0CwBZAq4D1gVYBKzOjVvlfW+cFAAAAAL8L
aBUAAAAA7BloFQAAAADsGWgVAAAAAOwZaBUAAAAA7BloFQAAAADsGWgVAAAA
AOwZaBUAAAAA7BloFQAAAADsGWgVAAAAAOwZaBUAAAAA7BloFQAAAADsGWgV
AAAAAOwZaBUAAAAA7BloFQAAAADsGWgVAAAAAOwZaBUAAAAA7BloFQAAAADs
GWgVAAAAAOwZaBUAAAAA7BloFQAAAADsGWgVAAAAAOwZaBUAAAAA7JlSrfKf
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
ahWlyRNlzh+49jmgTqsM8FrYWqsA8M4M/cP2yViXxDAK5kHbGgfA1kCrAHBI
Ekshbwx9EQZL8DvtCuweaBUAAAAA7BloFQAAAADsmeW0CgAAAADAskCrAAAA
AGDPHH0NqHcJ7lweVYYeWCuFwiNTsP3+cvJBS5ufYLebz1orInv24b1+vsSZ
O3fJ+yL4uW5bO4O3AZ+F7aM/75N4dGABOb7BjyhqxZuN3Twri8X4Dg+tZM9+
rpvrCdkZm7xsnj7GgRrgKf7Ma/quREwxU8LukLju7j5/3pZGTIjbwPd4ZHip
c15i2/CJHsVdk5ICqSIzlDiPN08esULEAwqcpetDie1eiFc9LcRSJh5QnQ33
vO9+Fe7BYzkPgdNJGRhp4Py8vMgafWbEP0BPy81yg0YaycJ2Kdk35VqlH3FG
TxHcruT330Or0Fx/HF2r8CYfep8IvSqVnikOfbZod1mHGCmPsslwzPmTWUVa
hTrAWUmr1If6nY2VtQpzHUNuTGmV2FDiupcg0uiE2IWVeX9fraJV5ebJKE8V
c64lgiZ7Bk+Soq/QvPUGXpU2jF1YEKsIBGStV/HbFvrn3KFQfx3d9dZhQ00l
Ak/bsIb1z8y+CAx9QkpJ0iLVirfM23/PNB/7c0LbxdlENdqyxuf0sZ/sIk5E
T7LxIv8SIVuZscaGBIBom3wwTeFBrvb95bdolVSA++1IGBj3eaWFdBmzVqJV
mIunSKTaFTh2PCBTvH1cAPs2wYzcjThuua21lWjr2oXkk4uS/oHSn3BWq7Bh
Lq1V4nM1tvews/FiebFLoV1NaK5nJYymkms6gab2S7Fi7N1621fF0d9+Otcf
Sa0yKdeZKLo0R4VzHfIu38xZk6cyIxfCIEY8SLH/Qt9LJ0aNQIooyifsVUyE
X2MAskLVoVmLTPSQCeB25d3FiyZjZI8rTFOtjzGQTSR2oX/m01t4WA7Ob60P
MHEKMmXatWgyiY5iPa1CgiV9/MWGkulapfvvzVrF4/uTmEGkyUOrVFXlftJD
U+VXk4OVRKMlSDygyMvLoJMjHvXZh7Sr2dD/56Fffl3Z2rgnto8iXaVzMf2w
tXk53Uhd264yHOlc0Hb7wEZMque0Cn+3ZfGAVFEai4zjzYYN6zR0SCNaUyzX
9MlqPCC9GG0YYjscdPaviWrljT5rWpW5TntQP9kGdfkSsQUT8LtYgCESD+jB
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
NPmGvLnYqQMau7Cgd3U/9FDvynYUsqz8INUMc2hnqoqXjLNc0F0UxwMi0z7B
E3ic5SGPl+CfWjKC1ZZ0nOWmpkBeIR6oV98dPRZL+6BWR/Ouqo4uO+1gBuVa
hVK5PemNtQpNwE61CsNsSqE1S+dVZPr1OMvZXJuYrdttKju2VpGBwMJBZ4JW
ST9Q3ivTw15Ppu6tTUfxG8+huMF0vDRBq6RyTU+OsPnGeK4/XtAqkVxntMqH
a6e1fYt6F2vy9AvcJMp2ojrJp96V7yieYkXD7jQbamdYPyLlI2pEmMQL8yr6
5PCVxd0r1Crd05TpBa1dEwuPvd/FLSTXUSylVewSjLbInjGbyN5aMV54rTJW
8YR5lR/srR3NQDGVrad6stXha1P0usqMt2jg0VzTu5LTgGsQbUqHYGi5CSua
qFWmnl5RC5OfzQw2FSSeGR+13YKFOzcxw7xKNtd9Gi4nc7BdWevRTGhtrTJq
Kp4YGm1WXaWVd7HE8wM4qd4gEq63q/egf/B3FXSPms3Y1ZPGpPzaNvcx5vWS
WkWu15gCJKd4auMs21WSeFnxZFTHWc51FEtoFbM4GxMA6kaCbDbleJGMszzm
LqlVeioHAmiVXbGGVtlcKmwull5CTO0y5lgDytxL0N+I59cqbCS68A1Ur68B
Je4VXXp0mnRRrSLPr9H9ZuUmFLsroVXEfpiyfYndCDJRq0SGUa+yeuuy2xtu
qoXMugYU2Vtypwmr1Cr2lvAJie0T9Vol11EsoFVMjUT3YD/zR8mUbMrxAlpl
SXa6BtQ2X95PF9uv0pAXh9gKde6gn5brVfwY5NjAv8ozPqAkLpnOR/2wdd75
Bqd2+hBDSWgV/0C7ObCfTPiSv6g7x9BW09gaEHPOo6bnQxiM7HhdCu0g9aJW
SRRj1xb8RtAbW8hIBgKeW6tQAwi24PaQ7aNmW2nWCNW7fLWyJh/kxczD0/0q
ZauofvBK3pUfVvw3hwK0aWYNJ7e31q5xq53PtHkVt6f3QQ2yVKvYz0d9Quv3
3DvbvFOZV61Vch1FukBq+Rbb3TXD4ybaJeA27go7KRtdtPFiDq1yMhZSsxkA
WmVLhmF6dDbI1+XHBdmu6w7qlM4wy4EjnuuNd9VSVvZbO6NWYRXXOI1Bq0be
ktAq9sbREhSfpfYcQShZY8lm29jC/XLXpzAedY+lPPZirbHfqVu4BnSVhsq+
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
/OEPf/jD337+/h/PL9dP
     "], {{0, 1668}, {740, 0}}, {0, 255},
     ColorFunction->RGBColor],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   DefaultBaseStyle->"ImageGraphics",
   ImageSize->Automatic,
   ImageSizeRaw->{740, 1668},
   PlotRange->{{0, 740}, {0, 1668}}]], "Code",ExpressionUUID->
  "fbe92946-2e9a-4ba5-9fe5-d1a4a544fc36"],
 Cell[BoxData[
 ""], "Code",ExpressionUUID->"e6001a80-ce59-440e-a546-301f801c2e1d"],
 "\\\n",
 Cell[BoxData[""],ExpressionUUID->"0142546a-78e7-4214-8f1b-7df3f185b26c"]
}], "TemplateFigure",ExpressionUUID->"5746344c-18f1-4d58-883f-2ef36e206de1"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Abstract", "TemplateSection",
 CellChangeTimes->{{3.549542031484871*^9, 3.5495420379109707`*^9}, {
  3.707836190394134*^9, 3.707836195736104*^9}, {3.707836263029148*^9, 
  3.70783627523112*^9}, {3.7078363208251266`*^9, 
  3.707836322200321*^9}},ExpressionUUID->"7f28a721-268a-464e-9bc5-\
31f61fa28c7d"],

Cell[TextData[{
 Cell["GOAL OF THE PROJECT:", "TemplateInlineHeader",ExpressionUUID->
  "d504b0e1-16cb-4ec1-a0e0-07de58e06dcb"],
 " To develop a genetic (evolutionary) algorithm to optimize neural network \
architecture and hyperparameters for any given problem using parallel \
computing."
}], "TemplateText",ExpressionUUID->"854ae70b-14eb-423f-a4a3-db7cbd22f54a"],

Cell[TextData[{
 Cell["SUMMARY OF WORK:", "TemplateInlineHeader",ExpressionUUID->
  "7aebbc1f-62ee-4cab-9afd-e94e9e80ebe2"],
 " Implemented functions to randomly mutate hyperparameters of feedforward \
neural networks (NetChain and NetGraph) and train on parallel GPUs."
}], "TemplateText",ExpressionUUID->"31932f51-a8da-4910-b7dd-e57591b56e9a"],

Cell[TextData[{
 Cell["RESULTS AND FUTURE  WORK:", "TemplateInlineHeader",ExpressionUUID->
  "ca47547c-750a-44dd-968b-4c1d5f12facc"],
 " Tested the parallel algorithm on 8-GPU machine (DGX-1). Plan to implement \
weight transfer between generations next and scale to ~4000 GPUs on Blue \
Waters."
}], "TemplateText",ExpressionUUID->"fc37c58e-b01c-44f1-8892-c017509d95ad"]
}, Open  ]]
}, Open  ]],

Cell[TextData[{
 "Everything above this bar is your poster. Make sure it fits on a single \
page. ",
 Cell[BoxData[
  ButtonBox["\<\"Preview Poster\"\>",
   Appearance->{
    "Default" -> 
     Image[RawArray["UnsignedInteger8",{{{255, 255, 255}, {255, 255, 255}, {0,
         0, 0}, {255, 255, 255}, {255, 255, 255}}, {{255, 255, 255}, {242, 
        242, 242}, {242, 242, 242}, {242, 242, 242}, {255, 255, 255}}, {{0, 0,
         0}, {242, 242, 242}, {255, 255, 255}, {242, 242, 242}, {255, 255, 
        255}}, {{255, 255, 255}, {242, 242, 242}, {242, 242, 242}, {242, 242, 
        242}, {255, 255, 255}}, {{255, 255, 255}, {255, 255, 255}, {255, 255, 
        255}, {255, 255, 255}, {255, 255, 255}}}], "Byte", ColorSpace -> 
       "RGB", Interleaving -> True], "Hover" -> 
     Image[RawArray["UnsignedInteger8",{{{255, 255, 255}, {255, 255, 255}, {0,
         0, 0}, {255, 255, 255}, {255, 255, 255}}, {{255, 255, 255}, {204, 
        204, 204}, {204, 204, 204}, {204, 204, 204}, {255, 255, 255}}, {{0, 0,
         0}, {204, 204, 204}, {249, 249, 249}, {204, 204, 204}, {255, 255, 
        255}}, {{255, 255, 255}, {204, 204, 204}, {204, 204, 204}, {204, 204, 
        204}, {255, 255, 255}}, {{255, 255, 255}, {255, 255, 255}, {255, 255, 
        255}, {255, 255, 255}, {255, 255, 255}}}], "Byte", ColorSpace -> 
       "RGB", Interleaving -> True], "Pressed" -> 
     Image[RawArray["UnsignedInteger8",{{{255, 255, 255}, {255, 255, 255}, {0,
         0, 0}, {255, 255, 255}, {255, 255, 255}}, {{255, 255, 255}, {204, 
        204, 204}, {204, 204, 204}, {204, 204, 204}, {255, 255, 255}}, {{0, 0,
         0}, {204, 204, 204}, {229, 229, 229}, {204, 204, 204}, {255, 255, 
        255}}, {{255, 255, 255}, {204, 204, 204}, {204, 204, 204}, {204, 204, 
        204}, {255, 255, 255}}, {{255, 255, 255}, {255, 255, 255}, {255, 255, 
        255}, {255, 255, 255}, {255, 255, 255}}}], "Byte", ColorSpace -> 
       "RGB", Interleaving -> True]},
   ButtonFunction:>With[{$CellContext`nb$ = First[
        NotebookGet[
         ButtonNotebook[]]]}, 
     CreateDocument[
      Notebook[
       ((ReplaceAll[
        ReplaceAll[
         DeleteCases[#, 
          Cell[
           Blank[], "TagItem", 
           BlankNullSequence[], CellTags -> "Mentor", 
           BlankNullSequence[]], Infinity], {Pattern[$CellContext`c, 
            Cell[
             Blank[], "TagItem", 
             Pattern[$CellContext`o1, 
              BlankNullSequence[]], 
             Pattern[$CellContext`t, CellTags -> "Author"], 
             Pattern[$CellContext`o2, 
              BlankNullSequence[]]]] :> Cell[
            StringJoin[
             FE`makePlainText[$CellContext`c], "  (Mentor: ", 
             FirstCase[#, Pattern[$CellContext`c2, 
                Cell[
                 Blank[], "TagItem", 
                 BlankNullSequence[], CellTags -> "Mentor", 
                 BlankNullSequence[]]] :> FE`makePlainText[$CellContext`c2], 
              "WTFDIDYOUDO", Infinity], ")"], 
            "TagItem", $CellContext`o1, $CellContext`t, $CellContext`o2]}], {
        Pattern[$CellContext`c, 
           Cell[
            Blank[], "TagItem", 
            Pattern[$CellContext`o1, 
             BlankNullSequence[]], CellTags -> Pattern[$CellContext`a, 
              Alternatives["Author", "Affiliation"]], 
            Pattern[$CellContext`o2, 
             BlankNullSequence[]]]] :> Cell[
           TextData[{
             Cell[
              StringJoin[
               ToUpperCase[$CellContext`a], ": "], "TemplateInlineHeader"], 
             FE`makePlainText[$CellContext`c]}], "Text", CellDingbat -> 
           None]}]& )[
        ReplaceAll[
         DeleteCases[
          Flatten[
           NotebookTools`FlattenCellGroups[
            First[#]]], 
          Cell[
           Blank[], 
           Except[
            Alternatives[
            "TemplateText", "TemplateTagItem", "TemplateTitle", 
             "TemplateInlineHeader", "TemplateFigure", 
             "TemplateSubsectionDelimiter"]], 
           BlankNullSequence[]]], {Cell[
            Pattern[$CellContext`e, 
             Blank[]], 
            Pattern[$CellContext`t, 
             Blank[String]], 
            Pattern[$CellContext`o, 
             BlankNullSequence[]]] :> Cell[$CellContext`e, 
            
            StringTrim[$CellContext`t, 
             "Template"], $CellContext`o]}]]& )[$CellContext`nb$], 
       StyleDefinitions -> Notebook[{
          Cell[
           StyleData[StyleDefinitions -> "Default.nb"]], 
          Cell[
           StyleData[All, "Printout"], PageBreakWithin -> True], 
          Cell[
           StyleData["Title", "Printout"], CellMargins -> {{13, 13}, {5, 1}}], 
          Cell[
           StyleData[
           "TagItem", "Printout", StyleDefinitions -> StyleData["Item"]], 
           CellMargins -> {{13, 13}, {0, 0}}], 
          Cell[
           StyleData["Text", "Printout"], CellMargins -> {{13, 13}, {3, 3}}], 
          
          Cell[
           StyleData["SubsectionDelimiter", "Printout"], 
           CellBracketOptions -> {"Color" -> None}, 
           CellFrame -> {{0, 0}, {1, 0}}, CellMargins -> {{66, 0}, {1, 1}}, 
           CellFrameMargins -> 0, CellOpen -> False, CellFrameColor -> 
           GrayLevel[0.85], CellSize -> {1, 1}, Deployed -> True, 
           CellElementSpacings -> {"ClosedCellHeight" -> 1}], 
          Cell[
           StyleData[
           "Figure", "Printout", StyleDefinitions -> StyleData["Text"]], 
           PageBreakWithin -> True, CellMargins -> {{13, 13}, {15, 15}}], 
          Cell[
           StyleData[
           "TemplateInlineHeader", "Printout", StyleDefinitions -> 
            StyleData["Text"]], FontWeight -> Bold, FontColor -> 
           RGBColor[
            0.7143816281376364, 0.21776150148775464`, 0.03341725795376516], 
           DefaultFormatType -> TextForm]}], WindowSize -> {550, 650}, 
       ScreenStyleEnvironment -> "Printout", ShowPageBreaks -> True, 
       PrintingOptions -> {"PaperOrientation" -> "Portrait"}, 
       WindowFrameElements -> {"CloseBox"}]]],
   Evaluator->Automatic,
   FrameMargins->2,
   Method->"Preemptive"]],
  CellChangeTimes->{
   3.708119993435834*^9, 3.7081201142366533`*^9, 3.7081216973419447`*^9, 
    3.708121742789915*^9, {3.7081219099669857`*^9, 3.708121937835812*^9}, 
    3.70812202456996*^9, 3.708122071754575*^9, 3.7081221040066013`*^9, 
    3.7081225027030687`*^9, 3.7081719415880747`*^9, 3.708172085024791*^9, 
    3.708172369617941*^9, 3.708172435424633*^9, {3.708174107388838*^9, 
    3.7081741131119537`*^9}, 3.7081741468211117`*^9, 3.7081741876030283`*^9},
  ExpressionUUID->"13f2cbb0-0be1-498d-bcbe-44cb23d6edbe"]
}], "TemplateSectionDivider",
 CellChangeTimes->{3.708122505400732*^9, 3.708172026797749*^9, 
  3.708172089889476*^9, 3.708172374031658*^9, 3.708174120005659*^9, 
  3.708174191876646*^9},ExpressionUUID->"121daac6-ac48-4910-9f55-\
fd2749685279"],

Cell[CellGroupData[{

Cell[TextData[{
 "Additional ",
 StyleBox["concise",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontVariations->{"Underline"->True}],
 " content for ",
 StyleBox["2 minute",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontVariations->{"Underline"->True}],
 " presentation"
}], "TemplateSection",
 CellChangeTimes->{{3.7080959248670483`*^9, 3.708095946537079*^9}, {
   3.708096572395012*^9, 3.7080965874427767`*^9}, 
   3.7081072179304457`*^9},ExpressionUUID->"2d847a34-66d2-4516-b974-\
ff32b660a5bf"],

Cell[CellGroupData[{

Cell["Mutations", "Section",ExpressionUUID->"0746cc05-9ff2-4dea-862b-2a8fdc8e7d89"],

Cell[CellGroupData[{

Cell["\<\
Implemented random mutations of hyperparameters for all feedforward layers\
\>", "Subsection",ExpressionUUID->"b13a2754-0394-46cd-9a57-2542358fa23c"],

Cell[CellGroupData[{

Cell["NetChain", "Subsubsection",ExpressionUUID->"86cd7989-027d-4424-9212-bc480566ae95"],

Cell[BoxData[
 TabViewBox[{{1,"1"->
  StyleBox[
   TagBox[
    TagBox[
     RowBox[{"NetChain", 
      RowBox[{"[", 
       PanelBox[
        DynamicModuleBox[{NeuralNetworks`Private`NetChain`assoc3 = 
         Association[
         "Type" -> "Chain", "Nodes" -> 
          Association[
           "1" -> Association[
             "Type" -> "Convolution", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`Private`DummyRawArray[{20, 1, 5, 5}], "Biases" -> 
                NeuralNetworks`Private`DummyRawArray[{20}]], "Parameters" -> 
              Association[
               "OutputChannels" -> 20, "KernelSize" -> {5, 5}, 
                "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
                1, "$GroupNumber" -> 1, "$InputSize" -> {28, 28}, 
                "$OutputSize" -> {24, 24}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{1, 28, 28}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{20, 24, 24}, NeuralNetworks`RealT]]], 
            "2" -> Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                "$Dimensions" -> {20, 24, 24}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{20, 24, 24}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{20, 24, 24}, NeuralNetworks`RealT]]], 
            "3" -> Association[
             "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                "PaddingSize" -> {0, 0}, "Function" -> Max, "Dimensionality" -> 
                2, "Channels" -> 20, "$InputSize" -> {24, 24}, 
                "$OutputSize" -> {12, 12}, "$MXPoolingConvention" -> "valid", 
                "$MXGlobalPool" -> False], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{20, 24, 24}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{20, 12, 12}, NeuralNetworks`RealT]]], 
            "4" -> Association[
             "Type" -> "Convolution", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`Private`DummyRawArray[{50, 20, 5, 5}], 
                "Biases" -> NeuralNetworks`Private`DummyRawArray[{50}]], 
              "Parameters" -> 
              Association[
               "OutputChannels" -> 50, "KernelSize" -> {5, 5}, 
                "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
                20, "$GroupNumber" -> 1, "$InputSize" -> {12, 12}, 
                "$OutputSize" -> {8, 8}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{20, 12, 12}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{50, 8, 8}, NeuralNetworks`RealT]]], 
            "5" -> Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                "$Dimensions" -> {50, 8, 8}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{50, 8, 8}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{50, 8, 8}, NeuralNetworks`RealT]]], 
            "6" -> Association[
             "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                "PaddingSize" -> {0, 0}, "Function" -> Max, "Dimensionality" -> 
                2, "Channels" -> 50, "$InputSize" -> {8, 8}, 
                "$OutputSize" -> {4, 4}, "$MXPoolingConvention" -> "valid", 
                "$MXGlobalPool" -> False], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{50, 8, 8}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{50, 4, 4}, NeuralNetworks`RealT]]], 
            "7" -> Association[
             "Type" -> "Flatten", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "Level" -> DirectedInfinity[1], "OutputSize" -> {800}, 
                "$InputSize" -> {50, 4, 4}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{50, 4, 4}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{800}, NeuralNetworks`RealT]]], "8" -> 
            Association[
             "Type" -> "Linear", "Arrays" -> 
              Association[
               "Weights" -> NeuralNetworks`Private`DummyRawArray[{500, 800}], 
                "Biases" -> NeuralNetworks`Private`DummyRawArray[{500}]], 
              "Parameters" -> 
              Association[
               "OutputDimensions" -> {500}, "$OutputSize" -> 500, 
                "$InputSize" -> 800, "$InputDimensions" -> {800}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{800}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]], "9" -> 
            Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                "$Dimensions" -> {500}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]], "10" -> 
            Association[
             "Type" -> "Linear", "Arrays" -> 
              Association[
               "Weights" -> NeuralNetworks`Private`DummyRawArray[{10, 500}], 
                "Biases" -> NeuralNetworks`Private`DummyRawArray[{10}]], 
              "Parameters" -> 
              Association[
               "OutputDimensions" -> {10}, "$OutputSize" -> 10, "$InputSize" -> 
                500, "$InputDimensions" -> {500}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "11" -> 
            Association[
             "Type" -> "Softmax", "Arrays" -> Association[], "Parameters" -> 
              Association[], "Inputs" -> 
              Association[
               "Input" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]],
               "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
          "Edges" -> {
           NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Inputs", "Input"], 
            NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "10", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Outputs", "Output"] -> 
            NeuralNetworks`NetPath["Nodes", "11", "Outputs", "Output"]}, 
          "Inputs" -> Association["Input" -> NetEncoder["Image", 
              Association[
              "ImageSize" -> {28, 28}, "ColorSpace" -> "Grayscale", 
               "ColorChannels" -> 1, "MeanImage" -> None], 
              NeuralNetworks`TensorT[{1, 28, 28}, NeuralNetworks`RealT]]], 
          "Outputs" -> Association["Output" -> NetDecoder["Class", 
              Association[
              "Labels" -> {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, "Dimensions" -> 10], 
              NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
         NeuralNetworks`Private`NetChain`opart, 
         NeuralNetworks`Private`NetChain`part, 
         NeuralNetworks`Private`NetChain`selected = Null}, 
         DynamicBox[GridBox[{{
             NeuralNetworks`Private`NetChain`MouseClickBoxes[
              TagBox[
               GridBox[{{
                  TagBox[
                   TagBox[
                   "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                   "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1\"", "\"28\"", "\"28\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"20\"", "\"24\"", "\"24\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"20\"", "\"24\"", "\"24\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"20\"", "\"12\"", "\"12\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"50\"", "\"8\"", "\"8\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"50\"", "\"8\"", "\"8\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"50\"", "\"4\"", "\"4\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"800\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"500\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"500\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"11\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                   "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                   "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                   "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
              If[
               ListQ[
               NeuralNetworks`Private`NetChain`part = MouseAnnotation[]], 
               If[NeuralNetworks`Private`NetChain`opart === 
                 NeuralNetworks`Private`NetChain`part, 
                 NeuralNetworks`Private`NetChain`selected = Null; 
                 NeuralNetworks`Private`NetChain`opart = Null, 
                 NeuralNetworks`Private`NetChain`selected = 
                  Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                 NeuralNetworks`Private`NetChain`opart = 
                  NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
            NeuralNetworks`Private`NetChain`fmtSelected[
            NeuralNetworks`Private`NetChain`selected, 
             NeuralNetworks`Private`NetChain`part]}, 
           GridBoxSpacings -> {"Columns" -> {{1}}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}],
          ImageSizeCache->{363., {147., 155.}},
          TrackedSymbols:>{NeuralNetworks`Private`NetChain`selected}],
         Initialization:>{NetChain}],
        BaselinePosition->Automatic], "]"}]}],
     False],
    Deploy],
   LineBreakWithin->False]}, {2,"2"->
  StyleBox[
   TagBox[
    TagBox[
     RowBox[{"NetChain", 
      RowBox[{"[", 
       PanelBox[
        DynamicModuleBox[{NeuralNetworks`Private`NetChain`assoc3 = 
         Association[
         "Type" -> "Chain", "Nodes" -> 
          Association[
           "1" -> Association[
             "Type" -> "Convolution", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{12, 1, 3, 9}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{12}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputChannels" -> 12, "KernelSize" -> {3, 9}, 
                "Stride" -> {2, 5}, "PaddingSize" -> {3, 4}, 
                "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
                1, "$GroupNumber" -> 1, "$InputSize" -> {28, 28}, 
                "$OutputSize" -> {16, 6}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{1, 28, 28}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{12, 16, 6}, NeuralNetworks`RealT]]], 
            "2" -> Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                "$Dimensions" -> {12, 16, 6}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{12, 16, 6}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{12, 16, 6}, NeuralNetworks`RealT]]], 
            "3" -> Association[
             "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "KernelSize" -> {5, 1}, "Stride" -> {2, 1}, 
                "PaddingSize" -> {4, 0}, "Function" -> Max, "Dimensionality" -> 
                2, "Channels" -> 12, "$InputSize" -> {16, 6}, 
                "$OutputSize" -> {10, 6}, "$MXPoolingConvention" -> "valid", 
                "$MXGlobalPool" -> False], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{12, 16, 6}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{12, 10, 6}, NeuralNetworks`RealT]]], 
            "4" -> Association[
             "Type" -> "Convolution", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{58, 12, 9, 6}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{58}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputChannels" -> 58, "KernelSize" -> {9, 6}, 
                "Stride" -> {1, 2}, "PaddingSize" -> {3, 2}, 
                "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
                12, "$GroupNumber" -> 1, "$InputSize" -> {10, 6}, 
                "$OutputSize" -> {8, 3}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{12, 10, 6}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{58, 8, 3}, NeuralNetworks`RealT]]], 
            "5" -> Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                "$Dimensions" -> {58, 8, 3}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{58, 8, 3}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{58, 8, 3}, NeuralNetworks`RealT]]], 
            "6" -> Association[
             "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "KernelSize" -> {6, 2}, "Stride" -> {1, 4}, 
                "PaddingSize" -> {1, 2}, "Function" -> Mean, "Dimensionality" -> 
                2, "Channels" -> 58, "$InputSize" -> {8, 3}, 
                "$OutputSize" -> {5, 2}, "$MXPoolingConvention" -> "valid", 
                "$MXGlobalPool" -> False], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{58, 8, 3}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{58, 5, 2}, NeuralNetworks`RealT]]], 
            "7" -> Association[
             "Type" -> "Flatten", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "Level" -> DirectedInfinity[1], "OutputSize" -> {580}, 
                "$InputSize" -> {58, 5, 2}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{58, 5, 2}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{580}, NeuralNetworks`RealT]]], "8" -> 
            Association[
             "Type" -> "Linear", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{514, 580}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{514}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputDimensions" -> {514}, "$OutputSize" -> 514, 
                "$InputSize" -> 580, "$InputDimensions" -> {580}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{580}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{514}, NeuralNetworks`RealT]]], "9" -> 
            Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "Function" -> 
                NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                "$Dimensions" -> {514}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{514}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{514}, NeuralNetworks`RealT]]], "10" -> 
            Association[
             "Type" -> "Linear", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{10, 514}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputDimensions" -> {10}, "$OutputSize" -> 10, "$InputSize" -> 
                514, "$InputDimensions" -> {514}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{514}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "11" -> 
            Association[
             "Type" -> "Softmax", "Arrays" -> Association[], "Parameters" -> 
              Association[], "Inputs" -> 
              Association[
               "Input" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]],
               "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
          "Edges" -> {
           NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Inputs", "Input"], 
            NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "10", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Outputs", "Output"] -> 
            NeuralNetworks`NetPath["Nodes", "11", "Outputs", "Output"]}, 
          "Inputs" -> Association["Input" -> NetEncoder["Image", 
              Association[
              "ImageSize" -> {28, 28}, "ColorSpace" -> "Grayscale", 
               "ColorChannels" -> 1, "MeanImage" -> None], 
              NeuralNetworks`TensorT[{1, 28, 28}, NeuralNetworks`RealT]]], 
          "Outputs" -> Association["Output" -> NetDecoder["Class", 
              Association[
              "Labels" -> {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, "Dimensions" -> 10], 
              NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
         NeuralNetworks`Private`NetChain`opart, 
         NeuralNetworks`Private`NetChain`part, 
         NeuralNetworks`Private`NetChain`selected = Null}, 
         DynamicBox[GridBox[{{
             NeuralNetworks`Private`NetChain`MouseClickBoxes[
              TagBox[
               GridBox[{{
                  TagBox[
                   TagBox[
                   "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                   "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1\"", "\"28\"", "\"28\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"12\"", "\"16\"", "\"6\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["Tanh", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"12\"", "\"16\"", "\"6\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"12\"", "\"10\"", "\"6\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"58\"", "\"8\"", "\"3\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["Tanh", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"58\"", "\"8\"", "\"3\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"58\"", "\"5\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"580\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"514\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["LogisticSigmoid", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"514\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"11\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                   "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                   "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                   "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  ItemBox[
                   StyleBox["\"(uninitialized)\"", 
                    RGBColor[0.66, 0, 0], Small, StripOnInput -> False], 
                   Alignment -> Center, StripOnInput -> False], 
                  "\[SpanFromLeft]", "\[SpanFromLeft]"}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
              If[
               ListQ[
               NeuralNetworks`Private`NetChain`part = MouseAnnotation[]], 
               If[NeuralNetworks`Private`NetChain`opart === 
                 NeuralNetworks`Private`NetChain`part, 
                 NeuralNetworks`Private`NetChain`selected = Null; 
                 NeuralNetworks`Private`NetChain`opart = Null, 
                 NeuralNetworks`Private`NetChain`selected = 
                  Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                 NeuralNetworks`Private`NetChain`opart = 
                  NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
            NeuralNetworks`Private`NetChain`fmtSelected[
            NeuralNetworks`Private`NetChain`selected, 
             NeuralNetworks`Private`NetChain`part]}, 
           GridBoxSpacings -> {"Columns" -> {{1}}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}],
          ImageSizeCache->{354., {156., 164.}},
          TrackedSymbols:>{NeuralNetworks`Private`NetChain`selected}],
         Initialization:>{NetChain}],
        BaselinePosition->Automatic], "]"}]}],
     False],
    Deploy],
   LineBreakWithin->False]}, {3,"3"->
  StyleBox[
   TagBox[
    TagBox[
     RowBox[{"NetChain", 
      RowBox[{"[", 
       PanelBox[
        DynamicModuleBox[{NeuralNetworks`Private`NetChain`assoc3 = 
         Association[
         "Type" -> "Chain", "Nodes" -> 
          Association[
           "1" -> Association[
             "Type" -> "Convolution", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{14, 1, 2, 10}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{14}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputChannels" -> 14, "KernelSize" -> {2, 10}, 
                "Stride" -> {1, 6}, "PaddingSize" -> {5, 1}, 
                "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
                1, "$GroupNumber" -> 1, "$InputSize" -> {28, 28}, 
                "$OutputSize" -> {37, 4}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{1, 28, 28}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{14, 37, 4}, NeuralNetworks`RealT]]], 
            "2" -> Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                "$Dimensions" -> {14, 37, 4}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{14, 37, 4}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{14, 37, 4}, NeuralNetworks`RealT]]], 
            "3" -> Association[
             "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "KernelSize" -> {6, 1}, "Stride" -> {1, 4}, 
                "PaddingSize" -> {3, 4}, "Function" -> Max, "Dimensionality" -> 
                2, "Channels" -> 14, "$InputSize" -> {37, 4}, 
                "$OutputSize" -> {38, 3}, "$MXPoolingConvention" -> "valid", 
                "$MXGlobalPool" -> False], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{14, 37, 4}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{14, 38, 3}, NeuralNetworks`RealT]]], 
            "4" -> Association[
             "Type" -> "Convolution", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{49, 14, 11, 2}, NeuralNetworks`RealT],
                 "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{49}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputChannels" -> 49, "KernelSize" -> {11, 2}, 
                "Stride" -> {5, 1}, "PaddingSize" -> {4, 4}, 
                "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
                14, "$GroupNumber" -> 1, "$InputSize" -> {38, 3}, 
                "$OutputSize" -> {8, 10}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{14, 38, 3}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{49, 8, 10}, NeuralNetworks`RealT]]], 
            "5" -> Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association["Function" -> NeuralNetworks`ValidatedParameter[
                  NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                   NeuralNetworks`Private`ScalarSymbol[11], 
                   Association[
                   NeuralNetworks`Private`ScalarSymbol[2] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[1], -1.}, 
                    NeuralNetworks`Private`ScalarSymbol[6] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    NeuralNetworks`Private`ScalarSymbol[5]}, 
                    NeuralNetworks`Private`ScalarSymbol[7] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[8] -> {Plus, -1., 
                    NeuralNetworks`Private`ScalarSymbol[7]}, 
                    NeuralNetworks`Private`ScalarSymbol[9] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[6], 
                    NeuralNetworks`Private`ScalarSymbol[8]}, 
                    NeuralNetworks`Private`ScalarSymbol[10] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[9]}, 
                    NeuralNetworks`Private`ScalarSymbol[11] -> {Plus, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    NeuralNetworks`Private`ScalarSymbol[10]}]]], 
                "$Dimensions" -> {49, 8, 10}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{49, 8, 10}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{49, 8, 10}, NeuralNetworks`RealT]]], 
            "6" -> Association[
             "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "KernelSize" -> {5, 3}, "Stride" -> {5, 1}, 
                "PaddingSize" -> {2, 5}, "Function" -> Mean, "Dimensionality" -> 
                2, "Channels" -> 49, "$InputSize" -> {8, 10}, 
                "$OutputSize" -> {2, 18}, "$MXPoolingConvention" -> "valid", 
                "$MXGlobalPool" -> False], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{49, 8, 10}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{49, 2, 18}, NeuralNetworks`RealT]]], 
            "7" -> Association[
             "Type" -> "Flatten", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "Level" -> DirectedInfinity[1], "OutputSize" -> {1764}, 
                "$InputSize" -> {49, 2, 18}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{49, 2, 18}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{1764}, NeuralNetworks`RealT]]], "8" -> 
            Association[
             "Type" -> "Linear", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{496, 1764}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{496}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputDimensions" -> {496}, "$OutputSize" -> 496, 
                "$InputSize" -> 1764, "$InputDimensions" -> {1764}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{1764}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{496}, NeuralNetworks`RealT]]], "9" -> 
            Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association["Function" -> NeuralNetworks`ValidatedParameter[
                  NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                   NeuralNetworks`Private`ScalarSymbol[7], 
                   Association[
                   NeuralNetworks`Private`ScalarSymbol[2] -> {Plus, -1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[2], -1.}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    NeuralNetworks`Private`ScalarSymbol[4]}, 
                    NeuralNetworks`Private`ScalarSymbol[6] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[7] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[5], 
                    NeuralNetworks`Private`ScalarSymbol[6]}]]], 
                "$Dimensions" -> {496}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{496}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{496}, NeuralNetworks`RealT]]], "10" -> 
            Association[
             "Type" -> "Linear", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{10, 496}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputDimensions" -> {10}, "$OutputSize" -> 10, "$InputSize" -> 
                496, "$InputDimensions" -> {496}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{496}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "11" -> 
            Association[
             "Type" -> "Softmax", "Arrays" -> Association[], "Parameters" -> 
              Association[], "Inputs" -> 
              Association[
               "Input" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]],
               "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
          "Edges" -> {
           NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Inputs", "Input"], 
            NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "10", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Outputs", "Output"] -> 
            NeuralNetworks`NetPath["Nodes", "11", "Outputs", "Output"]}, 
          "Inputs" -> Association["Input" -> NetEncoder["Image", 
              Association[
              "ImageSize" -> {28, 28}, "ColorSpace" -> "Grayscale", 
               "ColorChannels" -> 1, "MeanImage" -> None], 
              NeuralNetworks`TensorT[{1, 28, 28}, NeuralNetworks`RealT]]], 
          "Outputs" -> Association["Output" -> NetDecoder["Class", 
              Association[
              "Labels" -> {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, "Dimensions" -> 10], 
              NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
         NeuralNetworks`Private`NetChain`opart, 
         NeuralNetworks`Private`NetChain`part, 
         NeuralNetworks`Private`NetChain`selected = Null}, 
         DynamicBox[GridBox[{{
             NeuralNetworks`Private`NetChain`MouseClickBoxes[
              TagBox[
               GridBox[{{
                  TagBox[
                   TagBox[
                   "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                   "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1\"", "\"28\"", "\"28\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"14\"", "\"37\"", "\"4\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"14\"", "\"37\"", "\"4\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"14\"", "\"38\"", "\"3\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"49\"", "\"8\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["ElementwiseLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"49\"", "\"8\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"49\"", "\"2\"", "\"18\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1764\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"496\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["ElementwiseLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"496\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"11\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                   "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                   "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                   "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  ItemBox[
                   StyleBox["\"(uninitialized)\"", 
                    RGBColor[0.66, 0, 0], Small, StripOnInput -> False], 
                   Alignment -> Center, StripOnInput -> False], 
                  "\[SpanFromLeft]", "\[SpanFromLeft]"}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
              If[
               ListQ[
               NeuralNetworks`Private`NetChain`part = MouseAnnotation[]], 
               If[NeuralNetworks`Private`NetChain`opart === 
                 NeuralNetworks`Private`NetChain`part, 
                 NeuralNetworks`Private`NetChain`selected = Null; 
                 NeuralNetworks`Private`NetChain`opart = Null, 
                 NeuralNetworks`Private`NetChain`selected = 
                  Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                 NeuralNetworks`Private`NetChain`opart = 
                  NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
            NeuralNetworks`Private`NetChain`fmtSelected[
            NeuralNetworks`Private`NetChain`selected, 
             NeuralNetworks`Private`NetChain`part]}, 
           GridBoxSpacings -> {"Columns" -> {{1}}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}],
          ImageSizeCache->{356., {156., 164.}},
          TrackedSymbols:>{NeuralNetworks`Private`NetChain`selected}],
         Initialization:>{NetChain}],
        BaselinePosition->Automatic], "]"}]}],
     False],
    Deploy],
   LineBreakWithin->False]}, {4,"4"->
  StyleBox[
   TagBox[
    TagBox[
     RowBox[{"NetChain", 
      RowBox[{"[", 
       PanelBox[
        DynamicModuleBox[{NeuralNetworks`Private`NetChain`assoc3 = 
         Association[
         "Type" -> "Chain", "Nodes" -> 
          Association[
           "1" -> Association[
             "Type" -> "Convolution", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{11, 1, 3, 14}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputChannels" -> 11, "KernelSize" -> {3, 14}, 
                "Stride" -> {1, 6}, "PaddingSize" -> {9, 3}, 
                "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
                1, "$GroupNumber" -> 1, "$InputSize" -> {28, 28}, 
                "$OutputSize" -> {44, 4}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{1, 28, 28}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{11, 44, 4}, NeuralNetworks`RealT]]], 
            "2" -> Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association["Function" -> NeuralNetworks`ValidatedParameter[
                  NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                   NeuralNetworks`Private`ScalarSymbol[11], 
                   Association[
                   NeuralNetworks`Private`ScalarSymbol[2] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[1], -1.}, 
                    NeuralNetworks`Private`ScalarSymbol[6] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    NeuralNetworks`Private`ScalarSymbol[5]}, 
                    NeuralNetworks`Private`ScalarSymbol[7] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[8] -> {Plus, -1., 
                    NeuralNetworks`Private`ScalarSymbol[7]}, 
                    NeuralNetworks`Private`ScalarSymbol[9] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[6], 
                    NeuralNetworks`Private`ScalarSymbol[8]}, 
                    NeuralNetworks`Private`ScalarSymbol[10] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[9]}, 
                    NeuralNetworks`Private`ScalarSymbol[11] -> {Plus, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    NeuralNetworks`Private`ScalarSymbol[10]}]]], 
                "$Dimensions" -> {11, 44, 4}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{11, 44, 4}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{11, 44, 4}, NeuralNetworks`RealT]]], 
            "3" -> Association[
             "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "KernelSize" -> {9, 1}, "Stride" -> {2, 1}, 
                "PaddingSize" -> {5, 3}, "Function" -> Mean, "Dimensionality" -> 
                2, "Channels" -> 11, "$InputSize" -> {44, 4}, 
                "$OutputSize" -> {23, 10}, "$MXPoolingConvention" -> "valid", 
                "$MXGlobalPool" -> False], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{11, 44, 4}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{11, 23, 10}, NeuralNetworks`RealT]]], 
            "4" -> Association[
             "Type" -> "Convolution", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{68, 11, 12, 2}, NeuralNetworks`RealT],
                 "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{68}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputChannels" -> 68, "KernelSize" -> {12, 2}, 
                "Stride" -> {5, 2}, "PaddingSize" -> {6, 8}, 
                "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
                11, "$GroupNumber" -> 1, "$InputSize" -> {23, 10}, 
                "$OutputSize" -> {5, 13}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{11, 23, 10}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{68, 5, 13}, NeuralNetworks`RealT]]], 
            "5" -> Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association["Function" -> NeuralNetworks`ValidatedParameter[
                  NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                   NeuralNetworks`Private`ScalarSymbol[11], 
                   Association[
                   NeuralNetworks`Private`ScalarSymbol[2] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[1], -1.}, 
                    NeuralNetworks`Private`ScalarSymbol[6] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    NeuralNetworks`Private`ScalarSymbol[5]}, 
                    NeuralNetworks`Private`ScalarSymbol[7] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[8] -> {Plus, -1., 
                    NeuralNetworks`Private`ScalarSymbol[7]}, 
                    NeuralNetworks`Private`ScalarSymbol[9] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[6], 
                    NeuralNetworks`Private`ScalarSymbol[8]}, 
                    NeuralNetworks`Private`ScalarSymbol[10] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[9]}, 
                    NeuralNetworks`Private`ScalarSymbol[11] -> {Plus, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    NeuralNetworks`Private`ScalarSymbol[10]}]]], 
                "$Dimensions" -> {68, 5, 13}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{68, 5, 13}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{68, 5, 13}, NeuralNetworks`RealT]]], 
            "6" -> Association[
             "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "KernelSize" -> {4, 1}, "Stride" -> {6, 4}, 
                "PaddingSize" -> {2, 9}, "Function" -> Mean, "Dimensionality" -> 
                2, "Channels" -> 68, "$InputSize" -> {5, 13}, 
                "$OutputSize" -> {1, 8}, "$MXPoolingConvention" -> "valid", 
                "$MXGlobalPool" -> False], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{68, 5, 13}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{68, 1, 8}, NeuralNetworks`RealT]]], 
            "7" -> Association[
             "Type" -> "Flatten", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "Level" -> DirectedInfinity[1], "OutputSize" -> {544}, 
                "$InputSize" -> {68, 1, 8}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{68, 1, 8}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{544}, NeuralNetworks`RealT]]], "8" -> 
            Association[
             "Type" -> "Linear", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{515, 544}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{515}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputDimensions" -> {515}, "$OutputSize" -> 515, 
                "$InputSize" -> 544, "$InputDimensions" -> {544}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{544}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{515}, NeuralNetworks`RealT]]], "9" -> 
            Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                "$Dimensions" -> {515}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{515}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{515}, NeuralNetworks`RealT]]], "10" -> 
            Association[
             "Type" -> "Linear", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{10, 515}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputDimensions" -> {10}, "$OutputSize" -> 10, "$InputSize" -> 
                515, "$InputDimensions" -> {515}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{515}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "11" -> 
            Association[
             "Type" -> "Softmax", "Arrays" -> Association[], "Parameters" -> 
              Association[], "Inputs" -> 
              Association[
               "Input" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]],
               "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
          "Edges" -> {
           NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Inputs", "Input"], 
            NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "10", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Outputs", "Output"] -> 
            NeuralNetworks`NetPath["Nodes", "11", "Outputs", "Output"]}, 
          "Inputs" -> Association["Input" -> NetEncoder["Image", 
              Association[
              "ImageSize" -> {28, 28}, "ColorSpace" -> "Grayscale", 
               "ColorChannels" -> 1, "MeanImage" -> None], 
              NeuralNetworks`TensorT[{1, 28, 28}, NeuralNetworks`RealT]]], 
          "Outputs" -> Association["Output" -> NetDecoder["Class", 
              Association[
              "Labels" -> {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, "Dimensions" -> 10], 
              NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
         NeuralNetworks`Private`NetChain`opart, 
         NeuralNetworks`Private`NetChain`part, 
         NeuralNetworks`Private`NetChain`selected = Null}, 
         DynamicBox[GridBox[{{
             NeuralNetworks`Private`NetChain`MouseClickBoxes[
              TagBox[
               GridBox[{{
                  TagBox[
                   TagBox[
                   "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                   "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1\"", "\"28\"", "\"28\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"11\"", "\"44\"", "\"4\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["ElementwiseLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"11\"", "\"44\"", "\"4\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"11\"", "\"23\"", "\"10\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"68\"", "\"5\"", "\"13\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["ElementwiseLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"68\"", "\"5\"", "\"13\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"68\"", "\"1\"", "\"8\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"544\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"515\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"515\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"11\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                   "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                   "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                   "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  ItemBox[
                   StyleBox["\"(uninitialized)\"", 
                    RGBColor[0.66, 0, 0], Small, StripOnInput -> False], 
                   Alignment -> Center, StripOnInput -> False], 
                  "\[SpanFromLeft]", "\[SpanFromLeft]"}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
              If[
               ListQ[
               NeuralNetworks`Private`NetChain`part = MouseAnnotation[]], 
               If[NeuralNetworks`Private`NetChain`opart === 
                 NeuralNetworks`Private`NetChain`part, 
                 NeuralNetworks`Private`NetChain`selected = Null; 
                 NeuralNetworks`Private`NetChain`opart = Null, 
                 NeuralNetworks`Private`NetChain`selected = 
                  Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                 NeuralNetworks`Private`NetChain`opart = 
                  NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
            NeuralNetworks`Private`NetChain`fmtSelected[
            NeuralNetworks`Private`NetChain`selected, 
             NeuralNetworks`Private`NetChain`part]}, 
           GridBoxSpacings -> {"Columns" -> {{1}}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}],
          ImageSizeCache->{365., {156., 164.}},
          TrackedSymbols:>{NeuralNetworks`Private`NetChain`selected}],
         Initialization:>{NetChain}],
        BaselinePosition->Automatic], "]"}]}],
     False],
    Deploy],
   LineBreakWithin->False]}, {5,"5"->
  StyleBox[
   TagBox[
    TagBox[
     RowBox[{"NetChain", 
      RowBox[{"[", 
       PanelBox[
        DynamicModuleBox[{NeuralNetworks`Private`NetChain`assoc3 = 
         Association[
         "Type" -> "Chain", "Nodes" -> 
          Association[
           "1" -> Association[
             "Type" -> "Convolution", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{14, 1, 4, 14}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{14}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputChannels" -> 14, "KernelSize" -> {4, 14}, 
                "Stride" -> {1, 5}, "PaddingSize" -> {10, 5}, 
                "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
                1, "$GroupNumber" -> 1, "$InputSize" -> {28, 28}, 
                "$OutputSize" -> {45, 5}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{1, 28, 28}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{14, 45, 5}, NeuralNetworks`RealT]]], 
            "2" -> Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "Function" -> 
                NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                "$Dimensions" -> {14, 45, 5}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{14, 45, 5}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{14, 45, 5}, NeuralNetworks`RealT]]], 
            "3" -> Association[
             "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "KernelSize" -> {13, 4}, "Stride" -> {1, 2}, 
                "PaddingSize" -> {6, 2}, "Function" -> Mean, "Dimensionality" -> 
                2, "Channels" -> 14, "$InputSize" -> {45, 5}, 
                "$OutputSize" -> {45, 3}, "$MXPoolingConvention" -> "valid", 
                "$MXGlobalPool" -> False], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{14, 45, 5}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{14, 45, 3}, NeuralNetworks`RealT]]], 
            "4" -> Association[
             "Type" -> "Convolution", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{74, 14, 11, 1}, NeuralNetworks`RealT],
                 "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{74}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputChannels" -> 74, "KernelSize" -> {11, 1}, 
                "Stride" -> {8, 1}, "PaddingSize" -> {2, 11}, 
                "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
                14, "$GroupNumber" -> 1, "$InputSize" -> {45, 3}, 
                "$OutputSize" -> {5, 25}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{14, 45, 3}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{74, 5, 25}, NeuralNetworks`RealT]]], 
            "5" -> Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                "$Dimensions" -> {74, 5, 25}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{74, 5, 25}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{74, 5, 25}, NeuralNetworks`RealT]]], 
            "6" -> Association[
             "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "KernelSize" -> {2, 5}, "Stride" -> {4, 8}, 
                "PaddingSize" -> {3, 11}, "Function" -> Mean, 
                "Dimensionality" -> 2, "Channels" -> 74, 
                "$InputSize" -> {5, 25}, "$OutputSize" -> {3, 6}, 
                "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> False], 
              "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{74, 5, 25}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{74, 3, 6}, NeuralNetworks`RealT]]], 
            "7" -> Association[
             "Type" -> "Flatten", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "Level" -> DirectedInfinity[1], "OutputSize" -> {1332}, 
                "$InputSize" -> {74, 3, 6}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{74, 3, 6}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{1332}, NeuralNetworks`RealT]]], "8" -> 
            Association[
             "Type" -> "Linear", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{534, 1332}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{534}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputDimensions" -> {534}, "$OutputSize" -> 534, 
                "$InputSize" -> 1332, "$InputDimensions" -> {1332}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{1332}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{534}, NeuralNetworks`RealT]]], "9" -> 
            Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "Function" -> 
                NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                "$Dimensions" -> {534}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{534}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{534}, NeuralNetworks`RealT]]], "10" -> 
            Association[
             "Type" -> "Linear", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{10, 534}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputDimensions" -> {10}, "$OutputSize" -> 10, "$InputSize" -> 
                534, "$InputDimensions" -> {534}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{534}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "11" -> 
            Association[
             "Type" -> "Softmax", "Arrays" -> Association[], "Parameters" -> 
              Association[], "Inputs" -> 
              Association[
               "Input" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]],
               "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
          "Edges" -> {
           NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Inputs", "Input"], 
            NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "10", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Outputs", "Output"] -> 
            NeuralNetworks`NetPath["Nodes", "11", "Outputs", "Output"]}, 
          "Inputs" -> Association["Input" -> NetEncoder["Image", 
              Association[
              "ImageSize" -> {28, 28}, "ColorSpace" -> "Grayscale", 
               "ColorChannels" -> 1, "MeanImage" -> None], 
              NeuralNetworks`TensorT[{1, 28, 28}, NeuralNetworks`RealT]]], 
          "Outputs" -> Association["Output" -> NetDecoder["Class", 
              Association[
              "Labels" -> {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, "Dimensions" -> 10], 
              NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
         NeuralNetworks`Private`NetChain`opart, 
         NeuralNetworks`Private`NetChain`part, 
         NeuralNetworks`Private`NetChain`selected = Null}, 
         DynamicBox[GridBox[{{
             NeuralNetworks`Private`NetChain`MouseClickBoxes[
              TagBox[
               GridBox[{{
                  TagBox[
                   TagBox[
                   "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                   "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1\"", "\"28\"", "\"28\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"14\"", "\"45\"", "\"5\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["LogisticSigmoid", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"14\"", "\"45\"", "\"5\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"14\"", "\"45\"", "\"3\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"74\"", "\"5\"", "\"25\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["Tanh", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"74\"", "\"5\"", "\"25\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"74\"", "\"3\"", "\"6\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1332\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"534\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["LogisticSigmoid", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"534\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"11\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                   "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                   "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                   "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  ItemBox[
                   StyleBox["\"(uninitialized)\"", 
                    RGBColor[0.66, 0, 0], Small, StripOnInput -> False], 
                   Alignment -> Center, StripOnInput -> False], 
                  "\[SpanFromLeft]", "\[SpanFromLeft]"}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
              If[
               ListQ[
               NeuralNetworks`Private`NetChain`part = MouseAnnotation[]], 
               If[NeuralNetworks`Private`NetChain`opart === 
                 NeuralNetworks`Private`NetChain`part, 
                 NeuralNetworks`Private`NetChain`selected = Null; 
                 NeuralNetworks`Private`NetChain`opart = Null, 
                 NeuralNetworks`Private`NetChain`selected = 
                  Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                 NeuralNetworks`Private`NetChain`opart = 
                  NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
            NeuralNetworks`Private`NetChain`fmtSelected[
            NeuralNetworks`Private`NetChain`selected, 
             NeuralNetworks`Private`NetChain`part]}, 
           GridBoxSpacings -> {"Columns" -> {{1}}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}],
          ImageSizeCache->{354., {156., 164.}},
          TrackedSymbols:>{NeuralNetworks`Private`NetChain`selected}],
         Initialization:>{NetChain}],
        BaselinePosition->Automatic], "]"}]}],
     False],
    Deploy],
   LineBreakWithin->False]}, {6,"6"->
  StyleBox[
   TagBox[
    TagBox[
     RowBox[{"NetChain", 
      RowBox[{"[", 
       PanelBox[
        DynamicModuleBox[{NeuralNetworks`Private`NetChain`assoc3 = 
         Association[
         "Type" -> "Chain", "Nodes" -> 
          Association[
           "1" -> Association[
             "Type" -> "Convolution", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{5, 1, 5, 15}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputChannels" -> 5, "KernelSize" -> {5, 15}, 
                "Stride" -> {3, 2}, "PaddingSize" -> {12, 8}, 
                "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
                1, "$GroupNumber" -> 1, "$InputSize" -> {28, 28}, 
                "$OutputSize" -> {16, 15}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{1, 28, 28}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{5, 16, 15}, NeuralNetworks`RealT]]], 
            "2" -> Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association["Function" -> NeuralNetworks`ValidatedParameter[
                  NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                   NeuralNetworks`Private`ScalarSymbol[7], 
                   Association[
                   NeuralNetworks`Private`ScalarSymbol[2] -> {Plus, -1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[2], -1.}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    NeuralNetworks`Private`ScalarSymbol[4]}, 
                    NeuralNetworks`Private`ScalarSymbol[6] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[7] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[5], 
                    NeuralNetworks`Private`ScalarSymbol[6]}]]], 
                "$Dimensions" -> {5, 16, 15}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{5, 16, 15}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{5, 16, 15}, NeuralNetworks`RealT]]], 
            "3" -> Association[
             "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "KernelSize" -> {12, 3}, "Stride" -> {3, 3}, 
                "PaddingSize" -> {9, 6}, "Function" -> Max, "Dimensionality" -> 
                2, "Channels" -> 5, "$InputSize" -> {16, 15}, 
                "$OutputSize" -> {8, 9}, "$MXPoolingConvention" -> "valid", 
                "$MXGlobalPool" -> False], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{5, 16, 15}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{5, 8, 9}, NeuralNetworks`RealT]]], 
            "4" -> Association[
             "Type" -> "Convolution", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{65, 5, 7, 3}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{65}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputChannels" -> 65, "KernelSize" -> {7, 3}, 
                "Stride" -> {4, 1}, "PaddingSize" -> {5, 15}, 
                "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
                5, "$GroupNumber" -> 1, "$InputSize" -> {8, 9}, 
                "$OutputSize" -> {3, 37}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{5, 8, 9}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{65, 3, 37}, NeuralNetworks`RealT]]], 
            "5" -> Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association["Function" -> NeuralNetworks`ValidatedParameter[
                  NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                   NeuralNetworks`Private`ScalarSymbol[11], 
                   Association[
                   NeuralNetworks`Private`ScalarSymbol[2] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[1], -1.}, 
                    NeuralNetworks`Private`ScalarSymbol[6] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    NeuralNetworks`Private`ScalarSymbol[5]}, 
                    NeuralNetworks`Private`ScalarSymbol[7] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[8] -> {Plus, -1., 
                    NeuralNetworks`Private`ScalarSymbol[7]}, 
                    NeuralNetworks`Private`ScalarSymbol[9] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[6], 
                    NeuralNetworks`Private`ScalarSymbol[8]}, 
                    NeuralNetworks`Private`ScalarSymbol[10] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[9]}, 
                    NeuralNetworks`Private`ScalarSymbol[11] -> {Plus, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    NeuralNetworks`Private`ScalarSymbol[10]}]]], 
                "$Dimensions" -> {65, 3, 37}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{65, 3, 37}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{65, 3, 37}, NeuralNetworks`RealT]]], 
            "6" -> Association[
             "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "KernelSize" -> {1, 7}, "Stride" -> {6, 6}, 
                "PaddingSize" -> {6, 13}, "Function" -> Max, "Dimensionality" -> 
                2, "Channels" -> 65, "$InputSize" -> {3, 37}, 
                "$OutputSize" -> {3, 10}, "$MXPoolingConvention" -> "valid", 
                "$MXGlobalPool" -> False], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{65, 3, 37}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{65, 3, 10}, NeuralNetworks`RealT]]], 
            "7" -> Association[
             "Type" -> "Flatten", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "Level" -> DirectedInfinity[1], "OutputSize" -> {1950}, 
                "$InputSize" -> {65, 3, 10}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{65, 3, 10}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{1950}, NeuralNetworks`RealT]]], "8" -> 
            Association[
             "Type" -> "Linear", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{535, 1950}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{535}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputDimensions" -> {535}, "$OutputSize" -> 535, 
                "$InputSize" -> 1950, "$InputDimensions" -> {1950}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{1950}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{535}, NeuralNetworks`RealT]]], "9" -> 
            Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                "$Dimensions" -> {535}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{535}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{535}, NeuralNetworks`RealT]]], "10" -> 
            Association[
             "Type" -> "Linear", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{10, 535}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputDimensions" -> {10}, "$OutputSize" -> 10, "$InputSize" -> 
                535, "$InputDimensions" -> {535}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{535}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "11" -> 
            Association[
             "Type" -> "Softmax", "Arrays" -> Association[], "Parameters" -> 
              Association[], "Inputs" -> 
              Association[
               "Input" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]],
               "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
          "Edges" -> {
           NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Inputs", "Input"], 
            NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "10", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Outputs", "Output"] -> 
            NeuralNetworks`NetPath["Nodes", "11", "Outputs", "Output"]}, 
          "Inputs" -> Association["Input" -> NetEncoder["Image", 
              Association[
              "ImageSize" -> {28, 28}, "ColorSpace" -> "Grayscale", 
               "ColorChannels" -> 1, "MeanImage" -> None], 
              NeuralNetworks`TensorT[{1, 28, 28}, NeuralNetworks`RealT]]], 
          "Outputs" -> Association["Output" -> NetDecoder["Class", 
              Association[
              "Labels" -> {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, "Dimensions" -> 10], 
              NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
         NeuralNetworks`Private`NetChain`opart, 
         NeuralNetworks`Private`NetChain`part, 
         NeuralNetworks`Private`NetChain`selected = Null}, 
         DynamicBox[GridBox[{{
             NeuralNetworks`Private`NetChain`MouseClickBoxes[
              TagBox[
               GridBox[{{
                  TagBox[
                   TagBox[
                   "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                   "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1\"", "\"28\"", "\"28\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"5\"", "\"16\"", "\"15\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["ElementwiseLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"5\"", "\"16\"", "\"15\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"5\"", "\"8\"", "\"9\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"65\"", "\"3\"", "\"37\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["ElementwiseLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"65\"", "\"3\"", "\"37\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"65\"", "\"3\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1950\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"535\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"535\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"11\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                   "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                   "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                   "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  ItemBox[
                   StyleBox["\"(uninitialized)\"", 
                    RGBColor[0.66, 0, 0], Small, StripOnInput -> False], 
                   Alignment -> Center, StripOnInput -> False], 
                  "\[SpanFromLeft]", "\[SpanFromLeft]"}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                False, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
              If[
               ListQ[
               NeuralNetworks`Private`NetChain`part = MouseAnnotation[]], 
               If[NeuralNetworks`Private`NetChain`opart === 
                 NeuralNetworks`Private`NetChain`part, 
                 NeuralNetworks`Private`NetChain`selected = Null; 
                 NeuralNetworks`Private`NetChain`opart = Null, 
                 NeuralNetworks`Private`NetChain`selected = 
                  Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                 NeuralNetworks`Private`NetChain`opart = 
                  NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
            NeuralNetworks`Private`NetChain`fmtSelected[
            NeuralNetworks`Private`NetChain`selected, 
             NeuralNetworks`Private`NetChain`part]}, 
           GridBoxSpacings -> {"Columns" -> {{1}}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}],
          ImageSizeCache->{356., {156., 164.}},
          TrackedSymbols:>{NeuralNetworks`Private`NetChain`selected}],
         Initialization:>{NetChain}],
        BaselinePosition->Automatic], "]"}]}],
     False],
    Deploy],
   LineBreakWithin->False]}, {7,"7"->
  StyleBox[
   TagBox[
    TagBox[
     RowBox[{"NetChain", 
      RowBox[{"[", 
       PanelBox[
        DynamicModuleBox[{NeuralNetworks`Private`NetChain`assoc3 = 
         Association[
         "Type" -> "Chain", "Nodes" -> 
          Association[
           "1" -> Association[
             "Type" -> "Convolution", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{6, 1, 4, 16}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputChannels" -> 6, "KernelSize" -> {4, 16}, 
                "Stride" -> {1, 1}, "PaddingSize" -> {13, 10}, 
                "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
                1, "$GroupNumber" -> 1, "$InputSize" -> {28, 28}, 
                "$OutputSize" -> {51, 33}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{1, 28, 28}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{6, 51, 33}, NeuralNetworks`RealT]]], 
            "2" -> Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association["Function" -> NeuralNetworks`ValidatedParameter[
                  NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                   NeuralNetworks`Private`ScalarSymbol[7], 
                   Association[
                   NeuralNetworks`Private`ScalarSymbol[2] -> {Plus, -1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[2], -1.}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    NeuralNetworks`Private`ScalarSymbol[4]}, 
                    NeuralNetworks`Private`ScalarSymbol[6] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[7] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[5], 
                    NeuralNetworks`Private`ScalarSymbol[6]}]]], 
                "$Dimensions" -> {6, 51, 33}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{6, 51, 33}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{6, 51, 33}, NeuralNetworks`RealT]]], 
            "3" -> Association[
             "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "KernelSize" -> {15, 7}, "Stride" -> {6, 1}, 
                "PaddingSize" -> {12, 2}, "Function" -> Max, "Dimensionality" -> 
                2, "Channels" -> 6, "$InputSize" -> {51, 33}, 
                "$OutputSize" -> {11, 31}, "$MXPoolingConvention" -> "valid", 
                "$MXGlobalPool" -> False], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{6, 51, 33}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{6, 11, 31}, NeuralNetworks`RealT]]], 
            "4" -> Association[
             "Type" -> "Convolution", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{79, 6, 5, 1}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{79}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputChannels" -> 79, "KernelSize" -> {5, 1}, 
                "Stride" -> {5, 3}, "PaddingSize" -> {7, 16}, 
                "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
                6, "$GroupNumber" -> 1, "$InputSize" -> {11, 31}, 
                "$OutputSize" -> {5, 21}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{6, 11, 31}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{79, 5, 21}, NeuralNetworks`RealT]]], 
            "5" -> Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                "$Dimensions" -> {79, 5, 21}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{79, 5, 21}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{79, 5, 21}, NeuralNetworks`RealT]]], 
            "6" -> Association[
             "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "KernelSize" -> {5, 11}, "Stride" -> {7, 9}, 
                "PaddingSize" -> {10, 10}, "Function" -> Mean, 
                "Dimensionality" -> 2, "Channels" -> 79, 
                "$InputSize" -> {5, 21}, "$OutputSize" -> {3, 4}, 
                "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> False], 
              "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{79, 5, 21}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{79, 3, 4}, NeuralNetworks`RealT]]], 
            "7" -> 
            Association[
             "Type" -> "Flatten", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "Level" -> DirectedInfinity[1], "OutputSize" -> {948}, 
                "$InputSize" -> {79, 3, 4}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{79, 3, 4}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{948}, NeuralNetworks`RealT]]], "8" -> 
            Association[
             "Type" -> "Linear", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{551, 948}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{551}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputDimensions" -> {551}, "$OutputSize" -> 551, 
                "$InputSize" -> 948, "$InputDimensions" -> {948}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{948}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{551}, NeuralNetworks`RealT]]], "9" -> 
            Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                "$Dimensions" -> {551}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{551}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{551}, NeuralNetworks`RealT]]], "10" -> 
            Association[
             "Type" -> "Linear", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{10, 551}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputDimensions" -> {10}, "$OutputSize" -> 10, "$InputSize" -> 
                551, "$InputDimensions" -> {551}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{551}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "11" -> 
            Association[
             "Type" -> "Softmax", "Arrays" -> Association[], "Parameters" -> 
              Association[], "Inputs" -> 
              Association[
               "Input" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]],
               "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
          "Edges" -> {
           NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Inputs", "Input"], 
            NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "10", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Outputs", "Output"] -> 
            NeuralNetworks`NetPath["Nodes", "11", "Outputs", "Output"]}, 
          "Inputs" -> Association["Input" -> NetEncoder["Image", 
              Association[
              "ImageSize" -> {28, 28}, "ColorSpace" -> "Grayscale", 
               "ColorChannels" -> 1, "MeanImage" -> None], 
              NeuralNetworks`TensorT[{1, 28, 28}, NeuralNetworks`RealT]]], 
          "Outputs" -> Association["Output" -> NetDecoder["Class", 
              Association[
              "Labels" -> {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, "Dimensions" -> 10], 
              NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
         NeuralNetworks`Private`NetChain`opart, 
         NeuralNetworks`Private`NetChain`part, 
         NeuralNetworks`Private`NetChain`selected = Null}, 
         DynamicBox[GridBox[{{
             NeuralNetworks`Private`NetChain`MouseClickBoxes[
              TagBox[
               GridBox[{{
                  TagBox[
                   TagBox[
                   "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                   "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1\"", "\"28\"", "\"28\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"6\"", "\"51\"", "\"33\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["ElementwiseLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"6\"", "\"51\"", "\"33\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"6\"", "\"11\"", "\"31\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"79\"", "\"5\"", "\"21\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["Tanh", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"79\"", "\"5\"", "\"21\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"79\"", "\"3\"", "\"4\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"948\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"551\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"551\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"11\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                   "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                   "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                   "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  ItemBox[
                   StyleBox["\"(uninitialized)\"", 
                    RGBColor[0.66, 0, 0], Small, StripOnInput -> False], 
                   Alignment -> Center, StripOnInput -> False], 
                  "\[SpanFromLeft]", "\[SpanFromLeft]"}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
              If[
               ListQ[
               NeuralNetworks`Private`NetChain`part = MouseAnnotation[]], 
               If[NeuralNetworks`Private`NetChain`opart === 
                 NeuralNetworks`Private`NetChain`part, 
                 NeuralNetworks`Private`NetChain`selected = Null; 
                 NeuralNetworks`Private`NetChain`opart = Null, 
                 NeuralNetworks`Private`NetChain`selected = 
                  Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                 NeuralNetworks`Private`NetChain`opart = 
                  NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
            NeuralNetworks`Private`NetChain`fmtSelected[
            NeuralNetworks`Private`NetChain`selected, 
             NeuralNetworks`Private`NetChain`part]}, 
           GridBoxSpacings -> {"Columns" -> {{1}}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}],
          ImageSizeCache->{356., {156., 164.}},
          TrackedSymbols:>{NeuralNetworks`Private`NetChain`selected}],
         Initialization:>{NetChain}],
        BaselinePosition->Automatic], "]"}]}],
     False],
    Deploy],
   LineBreakWithin->False]}, {8,"8"->
  StyleBox[
   TagBox[
    TagBox[
     RowBox[{"NetChain", 
      RowBox[{"[", 
       PanelBox[
        DynamicModuleBox[{NeuralNetworks`Private`NetChain`assoc3 = 
         Association[
         "Type" -> "Chain", "Nodes" -> 
          Association[
           "1" -> Association[
             "Type" -> "Convolution", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{22, 1, 1, 16}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{22}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputChannels" -> 22, "KernelSize" -> {1, 16}, 
                "Stride" -> {1, 4}, "PaddingSize" -> {17, 13}, 
                "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
                1, "$GroupNumber" -> 1, "$InputSize" -> {28, 28}, 
                "$OutputSize" -> {62, 10}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{1, 28, 28}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{22, 62, 10}, NeuralNetworks`RealT]]], 
            "2" -> Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                "$Dimensions" -> {22, 62, 10}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{22, 62, 10}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{22, 62, 10}, NeuralNetworks`RealT]]], 
            "3" -> Association[
             "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "KernelSize" -> {12, 8}, "Stride" -> {7, 1}, 
                "PaddingSize" -> {10, 1}, "Function" -> Max, "Dimensionality" -> 
                2, "Channels" -> 22, "$InputSize" -> {62, 10}, 
                "$OutputSize" -> {11, 5}, "$MXPoolingConvention" -> "valid", 
                "$MXGlobalPool" -> False], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{22, 62, 10}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{22, 11, 5}, NeuralNetworks`RealT]]], 
            "4" -> Association[
             "Type" -> "Convolution", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{81, 22, 8, 4}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{81}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputChannels" -> 81, "KernelSize" -> {8, 4}, 
                "Stride" -> {3, 2}, "PaddingSize" -> {6, 17}, 
                "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
                22, "$GroupNumber" -> 1, "$InputSize" -> {11, 5}, 
                "$OutputSize" -> {6, 18}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{22, 11, 5}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{81, 6, 18}, NeuralNetworks`RealT]]], 
            "5" -> Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "Function" -> 
                NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                "$Dimensions" -> {81, 6, 18}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{81, 6, 18}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{81, 6, 18}, NeuralNetworks`RealT]]], 
            "6" -> Association[
             "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "KernelSize" -> {2, 12}, "Stride" -> {4, 5}, 
                "PaddingSize" -> {7, 12}, "Function" -> Mean, 
                "Dimensionality" -> 2, "Channels" -> 81, 
                "$InputSize" -> {6, 18}, "$OutputSize" -> {5, 7}, 
                "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> False], 
              "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{81, 6, 18}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{81, 5, 7}, NeuralNetworks`RealT]]], 
            "7" -> Association[
             "Type" -> "Flatten", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "Level" -> DirectedInfinity[1], "OutputSize" -> {2835}, 
                "$InputSize" -> {81, 5, 7}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{81, 5, 7}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{2835}, NeuralNetworks`RealT]]], "8" -> 
            Association[
             "Type" -> "Linear", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{543, 2835}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{543}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputDimensions" -> {543}, "$OutputSize" -> 543, 
                "$InputSize" -> 2835, "$InputDimensions" -> {2835}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{2835}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{543}, NeuralNetworks`RealT]]], "9" -> 
            Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                "$Dimensions" -> {543}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{543}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{543}, NeuralNetworks`RealT]]], "10" -> 
            Association[
             "Type" -> "Linear", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{10, 543}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputDimensions" -> {10}, "$OutputSize" -> 10, "$InputSize" -> 
                543, "$InputDimensions" -> {543}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{543}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "11" -> 
            Association[
             "Type" -> "Softmax", "Arrays" -> Association[], "Parameters" -> 
              Association[], "Inputs" -> 
              Association[
               "Input" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]],
               "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
          "Edges" -> {
           NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Inputs", "Input"], 
            NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "10", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Outputs", "Output"] -> 
            NeuralNetworks`NetPath["Nodes", "11", "Outputs", "Output"]}, 
          "Inputs" -> Association["Input" -> NetEncoder["Image", 
              Association[
              "ImageSize" -> {28, 28}, "ColorSpace" -> "Grayscale", 
               "ColorChannels" -> 1, "MeanImage" -> None], 
              NeuralNetworks`TensorT[{1, 28, 28}, NeuralNetworks`RealT]]], 
          "Outputs" -> Association["Output" -> NetDecoder["Class", 
              Association[
              "Labels" -> {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, "Dimensions" -> 10], 
              NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
         NeuralNetworks`Private`NetChain`opart, 
         NeuralNetworks`Private`NetChain`part, 
         NeuralNetworks`Private`NetChain`selected = Null}, 
         DynamicBox[GridBox[{{
             NeuralNetworks`Private`NetChain`MouseClickBoxes[
              TagBox[
               GridBox[{{
                  TagBox[
                   TagBox[
                   "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                   "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1\"", "\"28\"", "\"28\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"22\"", "\"62\"", "\"10\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["Tanh", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"22\"", "\"62\"", "\"10\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"22\"", "\"11\"", "\"5\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"81\"", "\"6\"", "\"18\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["LogisticSigmoid", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"81\"", "\"6\"", "\"18\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"81\"", "\"5\"", "\"7\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2835\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"543\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["Tanh", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"543\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"11\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                   "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                   "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                   "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  ItemBox[
                   StyleBox["\"(uninitialized)\"", 
                    RGBColor[0.66, 0, 0], Small, StripOnInput -> False], 
                   Alignment -> Center, StripOnInput -> False], 
                  "\[SpanFromLeft]", "\[SpanFromLeft]"}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
              If[
               ListQ[
               NeuralNetworks`Private`NetChain`part = MouseAnnotation[]], 
               If[NeuralNetworks`Private`NetChain`opart === 
                 NeuralNetworks`Private`NetChain`part, 
                 NeuralNetworks`Private`NetChain`selected = Null; 
                 NeuralNetworks`Private`NetChain`opart = Null, 
                 NeuralNetworks`Private`NetChain`selected = 
                  Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                 NeuralNetworks`Private`NetChain`opart = 
                  NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
            NeuralNetworks`Private`NetChain`fmtSelected[
            NeuralNetworks`Private`NetChain`selected, 
             NeuralNetworks`Private`NetChain`part]}, 
           GridBoxSpacings -> {"Columns" -> {{1}}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}],
          ImageSizeCache->{363., {156., 164.}},
          TrackedSymbols:>{NeuralNetworks`Private`NetChain`selected}],
         Initialization:>{NetChain}],
        BaselinePosition->Automatic], "]"}]}],
     False],
    Deploy],
   LineBreakWithin->False]}, {9,"9"->
  StyleBox[
   TagBox[
    TagBox[
     RowBox[{"NetChain", 
      RowBox[{"[", 
       PanelBox[
        DynamicModuleBox[{NeuralNetworks`Private`NetChain`assoc3 = 
         Association[
         "Type" -> "Chain", "Nodes" -> 
          Association[
           "1" -> Association[
             "Type" -> "Convolution", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{40, 1, 1, 16}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{40}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputChannels" -> 40, "KernelSize" -> {1, 16}, 
                "Stride" -> {4, 4}, "PaddingSize" -> {14, 14}, 
                "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
                1, "$GroupNumber" -> 1, "$InputSize" -> {28, 28}, 
                "$OutputSize" -> {14, 11}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{1, 28, 28}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{40, 14, 11}, NeuralNetworks`RealT]]], 
            "2" -> Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association["Function" -> NeuralNetworks`ValidatedParameter[
                  NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                   NeuralNetworks`Private`ScalarSymbol[7], 
                   Association[
                   NeuralNetworks`Private`ScalarSymbol[2] -> {Plus, -1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[2], -1.}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    NeuralNetworks`Private`ScalarSymbol[4]}, 
                    NeuralNetworks`Private`ScalarSymbol[6] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[7] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[5], 
                    NeuralNetworks`Private`ScalarSymbol[6]}]]], 
                "$Dimensions" -> {40, 14, 11}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{40, 14, 11}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{40, 14, 11}, NeuralNetworks`RealT]]], 
            "3" -> Association[
             "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "KernelSize" -> {12, 11}, "Stride" -> {3, 4}, 
                "PaddingSize" -> {13, 1}, "Function" -> Max, "Dimensionality" -> 
                2, "Channels" -> 40, "$InputSize" -> {14, 11}, 
                "$OutputSize" -> {10, 1}, "$MXPoolingConvention" -> "valid", 
                "$MXGlobalPool" -> False], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{40, 14, 11}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{40, 10, 1}, NeuralNetworks`RealT]]], 
            "4" -> Association[
             "Type" -> "Convolution", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{63, 40, 5, 1}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{63}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputChannels" -> 63, "KernelSize" -> {5, 1}, 
                "Stride" -> {5, 3}, "PaddingSize" -> {6, 13}, 
                "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
                40, "$GroupNumber" -> 1, "$InputSize" -> {10, 1}, 
                "$OutputSize" -> {4, 9}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{40, 10, 1}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{63, 4, 9}, NeuralNetworks`RealT]]], 
            "5" -> Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association["Function" -> NeuralNetworks`ValidatedParameter[
                  NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                   NeuralNetworks`Private`ScalarSymbol[11], 
                   Association[
                   NeuralNetworks`Private`ScalarSymbol[2] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[1], -1.}, 
                    NeuralNetworks`Private`ScalarSymbol[6] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    NeuralNetworks`Private`ScalarSymbol[5]}, 
                    NeuralNetworks`Private`ScalarSymbol[7] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[8] -> {Plus, -1., 
                    NeuralNetworks`Private`ScalarSymbol[7]}, 
                    NeuralNetworks`Private`ScalarSymbol[9] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[6], 
                    NeuralNetworks`Private`ScalarSymbol[8]}, 
                    NeuralNetworks`Private`ScalarSymbol[10] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[9]}, 
                    NeuralNetworks`Private`ScalarSymbol[11] -> {Plus, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    NeuralNetworks`Private`ScalarSymbol[10]}]]], 
                "$Dimensions" -> {63, 4, 9}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{63, 4, 9}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{63, 4, 9}, NeuralNetworks`RealT]]], 
            "6" -> Association[
             "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "KernelSize" -> {3, 8}, "Stride" -> {4, 8}, 
                "PaddingSize" -> {7, 9}, "Function" -> Mean, "Dimensionality" -> 
                2, "Channels" -> 63, "$InputSize" -> {4, 9}, 
                "$OutputSize" -> {4, 3}, "$MXPoolingConvention" -> "valid", 
                "$MXGlobalPool" -> False], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{63, 4, 9}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{63, 4, 3}, NeuralNetworks`RealT]]], 
            "7" -> Association[
             "Type" -> "Flatten", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "Level" -> DirectedInfinity[1], "OutputSize" -> {756}, 
                "$InputSize" -> {63, 4, 3}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{63, 4, 3}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{756}, NeuralNetworks`RealT]]], "8" -> 
            Association[
             "Type" -> "Linear", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{560, 756}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{560}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputDimensions" -> {560}, "$OutputSize" -> 560, 
                "$InputSize" -> 756, "$InputDimensions" -> {756}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{756}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{560}, NeuralNetworks`RealT]]], "9" -> 
            Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association["Function" -> NeuralNetworks`ValidatedParameter[
                  NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                   NeuralNetworks`Private`ScalarSymbol[11], 
                   Association[
                   NeuralNetworks`Private`ScalarSymbol[2] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[1], -1.}, 
                    NeuralNetworks`Private`ScalarSymbol[6] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    NeuralNetworks`Private`ScalarSymbol[5]}, 
                    NeuralNetworks`Private`ScalarSymbol[7] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[8] -> {Plus, -1., 
                    NeuralNetworks`Private`ScalarSymbol[7]}, 
                    NeuralNetworks`Private`ScalarSymbol[9] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[6], 
                    NeuralNetworks`Private`ScalarSymbol[8]}, 
                    NeuralNetworks`Private`ScalarSymbol[10] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[9]}, 
                    NeuralNetworks`Private`ScalarSymbol[11] -> {Plus, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    NeuralNetworks`Private`ScalarSymbol[10]}]]], 
                "$Dimensions" -> {560}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{560}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{560}, NeuralNetworks`RealT]]], "10" -> 
            Association[
             "Type" -> "Linear", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{10, 560}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputDimensions" -> {10}, "$OutputSize" -> 10, "$InputSize" -> 
                560, "$InputDimensions" -> {560}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{560}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "11" -> 
            Association[
             "Type" -> "Softmax", "Arrays" -> Association[], "Parameters" -> 
              Association[], "Inputs" -> 
              Association[
               "Input" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]],
               "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
          "Edges" -> {
           NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Inputs", "Input"], 
            NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "10", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Outputs", "Output"] -> 
            NeuralNetworks`NetPath["Nodes", "11", "Outputs", "Output"]}, 
          "Inputs" -> Association["Input" -> NetEncoder["Image", 
              Association[
              "ImageSize" -> {28, 28}, "ColorSpace" -> "Grayscale", 
               "ColorChannels" -> 1, "MeanImage" -> None], 
              NeuralNetworks`TensorT[{1, 28, 28}, NeuralNetworks`RealT]]], 
          "Outputs" -> Association["Output" -> NetDecoder["Class", 
              Association[
              "Labels" -> {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, "Dimensions" -> 10], 
              NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
         NeuralNetworks`Private`NetChain`opart, 
         NeuralNetworks`Private`NetChain`part, 
         NeuralNetworks`Private`NetChain`selected = Null}, 
         DynamicBox[GridBox[{{
             NeuralNetworks`Private`NetChain`MouseClickBoxes[
              TagBox[
               GridBox[{{
                  TagBox[
                   TagBox[
                   "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                   "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1\"", "\"28\"", "\"28\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"40\"", "\"14\"", "\"11\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["ElementwiseLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"40\"", "\"14\"", "\"11\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"40\"", "\"10\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"63\"", "\"4\"", "\"9\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["ElementwiseLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"63\"", "\"4\"", "\"9\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"63\"", "\"4\"", "\"3\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"756\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"560\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["ElementwiseLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"560\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"11\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                   "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                   "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                   "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  ItemBox[
                   StyleBox["\"(uninitialized)\"", 
                    RGBColor[0.66, 0, 0], Small, StripOnInput -> False], 
                   Alignment -> Center, StripOnInput -> False], 
                  "\[SpanFromLeft]", "\[SpanFromLeft]"}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
              If[
               ListQ[
               NeuralNetworks`Private`NetChain`part = MouseAnnotation[]], 
               If[NeuralNetworks`Private`NetChain`opart === 
                 NeuralNetworks`Private`NetChain`part, 
                 NeuralNetworks`Private`NetChain`selected = Null; 
                 NeuralNetworks`Private`NetChain`opart = Null, 
                 NeuralNetworks`Private`NetChain`selected = 
                  Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                 NeuralNetworks`Private`NetChain`opart = 
                  NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
            NeuralNetworks`Private`NetChain`fmtSelected[
            NeuralNetworks`Private`NetChain`selected, 
             NeuralNetworks`Private`NetChain`part]}, 
           GridBoxSpacings -> {"Columns" -> {{1}}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}],
          ImageSizeCache->{365., {156., 164.}},
          TrackedSymbols:>{NeuralNetworks`Private`NetChain`selected}],
         Initialization:>{NetChain}],
        BaselinePosition->Automatic], "]"}]}],
     False],
    Deploy],
   LineBreakWithin->False]}, {10,"10"->
  StyleBox[
   TagBox[
    TagBox[
     RowBox[{"NetChain", 
      RowBox[{"[", 
       PanelBox[
        DynamicModuleBox[{NeuralNetworks`Private`NetChain`assoc3 = 
         Association[
         "Type" -> "Chain", "Nodes" -> 
          Association[
           "1" -> Association[
             "Type" -> "Convolution", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{25, 1, 4, 15}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{25}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputChannels" -> 25, "KernelSize" -> {4, 15}, 
                "Stride" -> {6, 6}, "PaddingSize" -> {18, 18}, 
                "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
                1, "$GroupNumber" -> 1, "$InputSize" -> {28, 28}, 
                "$OutputSize" -> {11, 9}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{1, 28, 28}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{25, 11, 9}, NeuralNetworks`RealT]]], 
            "2" -> Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                "$Dimensions" -> {25, 11, 9}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{25, 11, 9}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{25, 11, 9}, NeuralNetworks`RealT]]], 
            "3" -> Association[
             "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "KernelSize" -> {9, 8}, "Stride" -> {1, 2}, 
                "PaddingSize" -> {15, 5}, "Function" -> Mean, 
                "Dimensionality" -> 2, "Channels" -> 25, 
                "$InputSize" -> {11, 9}, "$OutputSize" -> {33, 6}, 
                "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> False], 
              "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{25, 11, 9}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{25, 33, 6}, NeuralNetworks`RealT]]], 
            "4" -> Association[
             "Type" -> "Convolution", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{55, 25, 5, 1}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{55}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputChannels" -> 55, "KernelSize" -> {5, 1}, 
                "Stride" -> {7, 3}, "PaddingSize" -> {2, 10}, 
                "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
                25, "$GroupNumber" -> 1, "$InputSize" -> {33, 6}, 
                "$OutputSize" -> {5, 9}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{25, 33, 6}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{55, 5, 9}, NeuralNetworks`RealT]]], 
            "5" -> Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                "$Dimensions" -> {55, 5, 9}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{55, 5, 9}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{55, 5, 9}, NeuralNetworks`RealT]]], 
            "6" -> Association[
             "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "KernelSize" -> {3, 7}, "Stride" -> {4, 4}, 
                "PaddingSize" -> {4, 9}, "Function" -> Max, "Dimensionality" -> 
                2, "Channels" -> 55, "$InputSize" -> {5, 9}, 
                "$OutputSize" -> {3, 6}, "$MXPoolingConvention" -> "valid", 
                "$MXGlobalPool" -> False], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{55, 5, 9}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{55, 3, 6}, NeuralNetworks`RealT]]], 
            "7" -> Association[
             "Type" -> "Flatten", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "Level" -> DirectedInfinity[1], "OutputSize" -> {990}, 
                "$InputSize" -> {55, 3, 6}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{55, 3, 6}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{990}, NeuralNetworks`RealT]]], "8" -> 
            Association[
             "Type" -> "Linear", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{544, 990}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{544}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputDimensions" -> {544}, "$OutputSize" -> 544, 
                "$InputSize" -> 990, "$InputDimensions" -> {990}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{990}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{544}, NeuralNetworks`RealT]]], "9" -> 
            Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association["Function" -> NeuralNetworks`ValidatedParameter[
                  NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                   NeuralNetworks`Private`ScalarSymbol[7], 
                   Association[
                   NeuralNetworks`Private`ScalarSymbol[2] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {
                    Times, 0.07932538958393676, 
                    NeuralNetworks`Private`ScalarSymbol[4]}, 
                    NeuralNetworks`Private`ScalarSymbol[6] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[5]}, 
                    NeuralNetworks`Private`ScalarSymbol[7] -> {Plus, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    NeuralNetworks`Private`ScalarSymbol[6]}]]], 
                "$Dimensions" -> {544}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{544}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{544}, NeuralNetworks`RealT]]], "10" -> 
            Association[
             "Type" -> "Linear", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{10, 544}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputDimensions" -> {10}, "$OutputSize" -> 10, "$InputSize" -> 
                544, "$InputDimensions" -> {544}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{544}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "11" -> 
            Association[
             "Type" -> "Softmax", "Arrays" -> Association[], "Parameters" -> 
              Association[], "Inputs" -> 
              Association[
               "Input" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]],
               "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
          "Edges" -> {
           NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Inputs", "Input"], 
            NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "10", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Outputs", "Output"] -> 
            NeuralNetworks`NetPath["Nodes", "11", "Outputs", "Output"]}, 
          "Inputs" -> Association["Input" -> NetEncoder["Image", 
              Association[
              "ImageSize" -> {28, 28}, "ColorSpace" -> "Grayscale", 
               "ColorChannels" -> 1, "MeanImage" -> None], 
              NeuralNetworks`TensorT[{1, 28, 28}, NeuralNetworks`RealT]]], 
          "Outputs" -> Association["Output" -> NetDecoder["Class", 
              Association[
              "Labels" -> {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, "Dimensions" -> 10], 
              NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
         NeuralNetworks`Private`NetChain`opart, 
         NeuralNetworks`Private`NetChain`part, 
         NeuralNetworks`Private`NetChain`selected = Null}, 
         DynamicBox[GridBox[{{
             NeuralNetworks`Private`NetChain`MouseClickBoxes[
              TagBox[
               GridBox[{{
                  TagBox[
                   TagBox[
                   "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                   "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1\"", "\"28\"", "\"28\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"25\"", "\"11\"", "\"9\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["Tanh", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"25\"", "\"11\"", "\"9\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"25\"", "\"33\"", "\"6\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"55\"", "\"5\"", "\"9\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"55\"", "\"5\"", "\"9\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"55\"", "\"3\"", "\"6\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"990\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"544\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["ElementwiseLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"544\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"11\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                   "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                   "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                   "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  ItemBox[
                   StyleBox["\"(uninitialized)\"", 
                    RGBColor[0.66, 0, 0], Small, StripOnInput -> False], 
                   Alignment -> Center, StripOnInput -> False], 
                  "\[SpanFromLeft]", "\[SpanFromLeft]"}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
              If[
               ListQ[
               NeuralNetworks`Private`NetChain`part = MouseAnnotation[]], 
               If[NeuralNetworks`Private`NetChain`opart === 
                 NeuralNetworks`Private`NetChain`part, 
                 NeuralNetworks`Private`NetChain`selected = Null; 
                 NeuralNetworks`Private`NetChain`opart = Null, 
                 NeuralNetworks`Private`NetChain`selected = 
                  Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                 NeuralNetworks`Private`NetChain`opart = 
                  NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
            NeuralNetworks`Private`NetChain`fmtSelected[
            NeuralNetworks`Private`NetChain`selected, 
             NeuralNetworks`Private`NetChain`part]}, 
           GridBoxSpacings -> {"Columns" -> {{1}}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}],
          ImageSizeCache->{356., {156., 164.}},
          TrackedSymbols:>{NeuralNetworks`Private`NetChain`selected}],
         Initialization:>{NetChain}],
        BaselinePosition->Automatic], "]"}]}],
     False],
    Deploy],
   LineBreakWithin->False]}, {11,"11"->
  StyleBox[
   TagBox[
    TagBox[
     RowBox[{"NetChain", 
      RowBox[{"[", 
       PanelBox[
        DynamicModuleBox[{NeuralNetworks`Private`NetChain`assoc3 = 
         Association[
         "Type" -> "Chain", "Nodes" -> 
          Association[
           "1" -> Association[
             "Type" -> "Convolution", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{6, 1, 5, 13}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputChannels" -> 6, "KernelSize" -> {5, 13}, 
                "Stride" -> {5, 5}, "PaddingSize" -> {19, 19}, 
                "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
                1, "$GroupNumber" -> 1, "$InputSize" -> {28, 28}, 
                "$OutputSize" -> {13, 11}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{1, 28, 28}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{6, 13, 11}, NeuralNetworks`RealT]]], 
            "2" -> Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association["Function" -> NeuralNetworks`ValidatedParameter[
                  NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                   NeuralNetworks`Private`ScalarSymbol[7], 
                   Association[
                   NeuralNetworks`Private`ScalarSymbol[2] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {
                    Times, 0.2886349768085703, 
                    NeuralNetworks`Private`ScalarSymbol[4]}, 
                    NeuralNetworks`Private`ScalarSymbol[6] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[5]}, 
                    NeuralNetworks`Private`ScalarSymbol[7] -> {Plus, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    NeuralNetworks`Private`ScalarSymbol[6]}]]], 
                "$Dimensions" -> {6, 13, 11}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{6, 13, 11}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{6, 13, 11}, NeuralNetworks`RealT]]], 
            "3" -> Association[
             "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "KernelSize" -> {12, 4}, "Stride" -> {2, 2}, 
                "PaddingSize" -> {11, 8}, "Function" -> Mean, 
                "Dimensionality" -> 2, "Channels" -> 6, 
                "$InputSize" -> {13, 11}, "$OutputSize" -> {12, 12}, 
                "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> False], 
              "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{6, 13, 11}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{6, 12, 12}, NeuralNetworks`RealT]]], 
            "4" -> Association[
             "Type" -> "Convolution", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{49, 6, 5, 1}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{49}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputChannels" -> 49, "KernelSize" -> {5, 1}, 
                "Stride" -> {3, 7}, "PaddingSize" -> {0, 14}, 
                "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
                6, "$GroupNumber" -> 1, "$InputSize" -> {12, 12}, 
                "$OutputSize" -> {3, 6}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{6, 12, 12}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{49, 3, 6}, NeuralNetworks`RealT]]], 
            "5" -> Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association["Function" -> NeuralNetworks`ValidatedParameter[
                  NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                   NeuralNetworks`Private`ScalarSymbol[11], 
                   Association[
                   NeuralNetworks`Private`ScalarSymbol[2] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[1], -1.}, 
                    NeuralNetworks`Private`ScalarSymbol[6] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    NeuralNetworks`Private`ScalarSymbol[5]}, 
                    NeuralNetworks`Private`ScalarSymbol[7] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[8] -> {Plus, -1., 
                    NeuralNetworks`Private`ScalarSymbol[7]}, 
                    NeuralNetworks`Private`ScalarSymbol[9] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[6], 
                    NeuralNetworks`Private`ScalarSymbol[8]}, 
                    NeuralNetworks`Private`ScalarSymbol[10] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[9]}, 
                    NeuralNetworks`Private`ScalarSymbol[11] -> {Plus, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    NeuralNetworks`Private`ScalarSymbol[10]}]]], 
                "$Dimensions" -> {49, 3, 6}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{49, 3, 6}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{49, 3, 6}, NeuralNetworks`RealT]]], 
            "6" -> Association[
             "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "KernelSize" -> {2, 6}, "Stride" -> {8, 1}, 
                "PaddingSize" -> {8, 8}, "Function" -> Max, "Dimensionality" -> 
                2, "Channels" -> 49, "$InputSize" -> {3, 6}, 
                "$OutputSize" -> {3, 17}, "$MXPoolingConvention" -> "valid", 
                "$MXGlobalPool" -> False], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{49, 3, 6}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{49, 3, 17}, NeuralNetworks`RealT]]], 
            "7" -> Association[
             "Type" -> "Flatten", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "Level" -> DirectedInfinity[1], "OutputSize" -> {2499}, 
                "$InputSize" -> {49, 3, 17}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{49, 3, 17}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{2499}, NeuralNetworks`RealT]]], "8" -> 
            Association[
             "Type" -> "Linear", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{550, 2499}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{550}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputDimensions" -> {550}, "$OutputSize" -> 550, 
                "$InputSize" -> 2499, "$InputDimensions" -> {2499}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{2499}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{550}, NeuralNetworks`RealT]]], "9" -> 
            Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association["Function" -> NeuralNetworks`ValidatedParameter[
                  NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                   NeuralNetworks`Private`ScalarSymbol[7], 
                   Association[
                   NeuralNetworks`Private`ScalarSymbol[2] -> {Plus, -1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[2], -1.}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    NeuralNetworks`Private`ScalarSymbol[4]}, 
                    NeuralNetworks`Private`ScalarSymbol[6] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[7] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[5], 
                    NeuralNetworks`Private`ScalarSymbol[6]}]]], 
                "$Dimensions" -> {550}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{550}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{550}, NeuralNetworks`RealT]]], "10" -> 
            Association[
             "Type" -> "Linear", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{10, 550}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputDimensions" -> {10}, "$OutputSize" -> 10, "$InputSize" -> 
                550, "$InputDimensions" -> {550}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{550}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "11" -> 
            Association[
             "Type" -> "Softmax", "Arrays" -> Association[], "Parameters" -> 
              Association[], "Inputs" -> 
              Association[
               "Input" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]],
               "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
          "Edges" -> {
           NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Inputs", "Input"], 
            NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "10", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Outputs", "Output"] -> 
            NeuralNetworks`NetPath["Nodes", "11", "Outputs", "Output"]}, 
          "Inputs" -> Association["Input" -> NetEncoder["Image", 
              Association[
              "ImageSize" -> {28, 28}, "ColorSpace" -> "Grayscale", 
               "ColorChannels" -> 1, "MeanImage" -> None], 
              NeuralNetworks`TensorT[{1, 28, 28}, NeuralNetworks`RealT]]], 
          "Outputs" -> Association["Output" -> NetDecoder["Class", 
              Association[
              "Labels" -> {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, "Dimensions" -> 10], 
              NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
         NeuralNetworks`Private`NetChain`opart, 
         NeuralNetworks`Private`NetChain`part, 
         NeuralNetworks`Private`NetChain`selected = Null}, 
         DynamicBox[GridBox[{{
             NeuralNetworks`Private`NetChain`MouseClickBoxes[
              TagBox[
               GridBox[{{
                  TagBox[
                   TagBox[
                   "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                   "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1\"", "\"28\"", "\"28\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"6\"", "\"13\"", "\"11\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["ElementwiseLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"6\"", "\"13\"", "\"11\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"6\"", "\"12\"", "\"12\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"49\"", "\"3\"", "\"6\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["ElementwiseLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"49\"", "\"3\"", "\"6\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"49\"", "\"3\"", "\"17\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2499\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"550\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["ElementwiseLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"550\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"11\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                   "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                   "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                   "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  ItemBox[
                   StyleBox["\"(uninitialized)\"", 
                    RGBColor[0.66, 0, 0], Small, StripOnInput -> False], 
                   Alignment -> Center, StripOnInput -> False], 
                  "\[SpanFromLeft]", "\[SpanFromLeft]"}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
              If[
               ListQ[
               NeuralNetworks`Private`NetChain`part = MouseAnnotation[]], 
               If[NeuralNetworks`Private`NetChain`opart === 
                 NeuralNetworks`Private`NetChain`part, 
                 NeuralNetworks`Private`NetChain`selected = Null; 
                 NeuralNetworks`Private`NetChain`opart = Null, 
                 NeuralNetworks`Private`NetChain`selected = 
                  Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                 NeuralNetworks`Private`NetChain`opart = 
                  NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
            NeuralNetworks`Private`NetChain`fmtSelected[
            NeuralNetworks`Private`NetChain`selected, 
             NeuralNetworks`Private`NetChain`part]}, 
           GridBoxSpacings -> {"Columns" -> {{1}}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}],
          ImageSizeCache->{356., {156., 164.}},
          TrackedSymbols:>{NeuralNetworks`Private`NetChain`selected}],
         Initialization:>{NetChain}],
        BaselinePosition->Automatic], "]"}]}],
     False],
    Deploy],
   LineBreakWithin->False]}, {12,"12"->
  StyleBox[
   TagBox[
    TagBox[
     RowBox[{"NetChain", 
      RowBox[{"[", 
       PanelBox[
        DynamicModuleBox[{NeuralNetworks`Private`NetChain`assoc3 = 
         Association[
         "Type" -> "Chain", "Nodes" -> 
          Association[
           "1" -> Association[
             "Type" -> "Convolution", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{4, 1, 3, 16}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputChannels" -> 4, "KernelSize" -> {3, 16}, 
                "Stride" -> {7, 2}, "PaddingSize" -> {23, 22}, 
                "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
                1, "$GroupNumber" -> 1, "$InputSize" -> {28, 28}, 
                "$OutputSize" -> {11, 29}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{1, 28, 28}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{4, 11, 29}, NeuralNetworks`RealT]]], 
            "2" -> Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                "$Dimensions" -> {4, 11, 29}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{4, 11, 29}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{4, 11, 29}, NeuralNetworks`RealT]]], 
            "3" -> Association[
             "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "KernelSize" -> {11, 4}, "Stride" -> {5, 1}, 
                "PaddingSize" -> {15, 10}, "Function" -> Mean, 
                "Dimensionality" -> 2, "Channels" -> 4, 
                "$InputSize" -> {11, 29}, "$OutputSize" -> {7, 46}, 
                "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> False], 
              "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{4, 11, 29}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{4, 7, 46}, NeuralNetworks`RealT]]], 
            "4" -> Association[
             "Type" -> "Convolution", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{49, 4, 1, 5}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{49}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputChannels" -> 49, "KernelSize" -> {1, 5}, 
                "Stride" -> {2, 7}, "PaddingSize" -> {4, 10}, 
                "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
                4, "$GroupNumber" -> 1, "$InputSize" -> {7, 46}, 
                "$OutputSize" -> {8, 9}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{4, 7, 46}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{49, 8, 9}, NeuralNetworks`RealT]]], 
            "5" -> Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association["Function" -> NeuralNetworks`ValidatedParameter[
                  NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                   NeuralNetworks`Private`ScalarSymbol[7], 
                   Association[
                   NeuralNetworks`Private`ScalarSymbol[2] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {
                    Times, 0.10828942333800995`, 
                    NeuralNetworks`Private`ScalarSymbol[4]}, 
                    NeuralNetworks`Private`ScalarSymbol[6] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[5]}, 
                    NeuralNetworks`Private`ScalarSymbol[7] -> {Plus, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    NeuralNetworks`Private`ScalarSymbol[6]}]]], 
                "$Dimensions" -> {49, 8, 9}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{49, 8, 9}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{49, 8, 9}, NeuralNetworks`RealT]]], 
            "6" -> Association[
             "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "KernelSize" -> {2, 8}, "Stride" -> {9, 5}, 
                "PaddingSize" -> {6, 8}, "Function" -> Max, "Dimensionality" -> 
                2, "Channels" -> 49, "$InputSize" -> {8, 9}, 
                "$OutputSize" -> {3, 4}, "$MXPoolingConvention" -> "valid", 
                "$MXGlobalPool" -> False], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{49, 8, 9}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{49, 3, 4}, NeuralNetworks`RealT]]], 
            "7" -> Association[
             "Type" -> "Flatten", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "Level" -> DirectedInfinity[1], "OutputSize" -> {588}, 
                "$InputSize" -> {49, 3, 4}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{49, 3, 4}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{588}, NeuralNetworks`RealT]]], "8" -> 
            Association[
             "Type" -> "Linear", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{538, 588}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{538}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputDimensions" -> {538}, "$OutputSize" -> 538, 
                "$InputSize" -> 588, "$InputDimensions" -> {588}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{588}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{538}, NeuralNetworks`RealT]]], "9" -> 
            Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association["Function" -> NeuralNetworks`ValidatedParameter[
                  NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                   NeuralNetworks`Private`ScalarSymbol[11], 
                   Association[
                   NeuralNetworks`Private`ScalarSymbol[2] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[1], -1.}, 
                    NeuralNetworks`Private`ScalarSymbol[6] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    NeuralNetworks`Private`ScalarSymbol[5]}, 
                    NeuralNetworks`Private`ScalarSymbol[7] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[8] -> {Plus, -1., 
                    NeuralNetworks`Private`ScalarSymbol[7]}, 
                    NeuralNetworks`Private`ScalarSymbol[9] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[6], 
                    NeuralNetworks`Private`ScalarSymbol[8]}, 
                    NeuralNetworks`Private`ScalarSymbol[10] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[9]}, 
                    NeuralNetworks`Private`ScalarSymbol[11] -> {Plus, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    NeuralNetworks`Private`ScalarSymbol[10]}]]], 
                "$Dimensions" -> {538}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{538}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{538}, NeuralNetworks`RealT]]], "10" -> 
            Association[
             "Type" -> "Linear", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{10, 538}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputDimensions" -> {10}, "$OutputSize" -> 10, "$InputSize" -> 
                538, "$InputDimensions" -> {538}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{538}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "11" -> 
            Association[
             "Type" -> "Softmax", "Arrays" -> Association[], "Parameters" -> 
              Association[], "Inputs" -> 
              Association[
               "Input" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]],
               "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
          "Edges" -> {
           NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Inputs", "Input"], 
            NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "10", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Outputs", "Output"] -> 
            NeuralNetworks`NetPath["Nodes", "11", "Outputs", "Output"]}, 
          "Inputs" -> Association["Input" -> NetEncoder["Image", 
              Association[
              "ImageSize" -> {28, 28}, "ColorSpace" -> "Grayscale", 
               "ColorChannels" -> 1, "MeanImage" -> None], 
              NeuralNetworks`TensorT[{1, 28, 28}, NeuralNetworks`RealT]]], 
          "Outputs" -> Association["Output" -> NetDecoder["Class", 
              Association[
              "Labels" -> {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, "Dimensions" -> 10], 
              NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
         NeuralNetworks`Private`NetChain`opart, 
         NeuralNetworks`Private`NetChain`part, 
         NeuralNetworks`Private`NetChain`selected = Null}, 
         DynamicBox[GridBox[{{
             NeuralNetworks`Private`NetChain`MouseClickBoxes[
              TagBox[
               GridBox[{{
                  TagBox[
                   TagBox[
                   "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                   "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1\"", "\"28\"", "\"28\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"4\"", "\"11\"", "\"29\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"4\"", "\"11\"", "\"29\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"4\"", "\"7\"", "\"46\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"49\"", "\"8\"", "\"9\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["ElementwiseLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"49\"", "\"8\"", "\"9\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"49\"", "\"3\"", "\"4\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"588\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"538\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["ElementwiseLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"538\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"11\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                   "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                   "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                   "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  ItemBox[
                   StyleBox["\"(uninitialized)\"", 
                    RGBColor[0.66, 0, 0], Small, StripOnInput -> False], 
                   Alignment -> Center, StripOnInput -> False], 
                  "\[SpanFromLeft]", "\[SpanFromLeft]"}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
              If[
               ListQ[
               NeuralNetworks`Private`NetChain`part = MouseAnnotation[]], 
               If[NeuralNetworks`Private`NetChain`opart === 
                 NeuralNetworks`Private`NetChain`part, 
                 NeuralNetworks`Private`NetChain`selected = Null; 
                 NeuralNetworks`Private`NetChain`opart = Null, 
                 NeuralNetworks`Private`NetChain`selected = 
                  Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                 NeuralNetworks`Private`NetChain`opart = 
                  NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
            NeuralNetworks`Private`NetChain`fmtSelected[
            NeuralNetworks`Private`NetChain`selected, 
             NeuralNetworks`Private`NetChain`part]}, 
           GridBoxSpacings -> {"Columns" -> {{1}}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}],
          ImageSizeCache->{356., {156., 164.}},
          TrackedSymbols:>{NeuralNetworks`Private`NetChain`selected}],
         Initialization:>{NetChain}],
        BaselinePosition->Automatic], "]"}]}],
     False],
    Deploy],
   LineBreakWithin->False]}, {13,"13"->
  StyleBox[
   TagBox[
    TagBox[
     RowBox[{"NetChain", 
      RowBox[{"[", 
       PanelBox[
        DynamicModuleBox[{NeuralNetworks`Private`NetChain`assoc3 = 
         Association[
         "Type" -> "Chain", "Nodes" -> 
          Association[
           "1" -> Association[
             "Type" -> "Convolution", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{8, 1, 5, 17}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputChannels" -> 8, "KernelSize" -> {5, 17}, 
                "Stride" -> {4, 4}, "PaddingSize" -> {22, 24}, 
                "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
                1, "$GroupNumber" -> 1, "$InputSize" -> {28, 28}, 
                "$OutputSize" -> {17, 15}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{1, 28, 28}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{8, 17, 15}, NeuralNetworks`RealT]]], 
            "2" -> Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association["Function" -> NeuralNetworks`ValidatedParameter[
                  NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                   NeuralNetworks`Private`ScalarSymbol[7], 
                   Association[
                   NeuralNetworks`Private`ScalarSymbol[2] -> {Plus, -1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[2], -1.}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    NeuralNetworks`Private`ScalarSymbol[4]}, 
                    NeuralNetworks`Private`ScalarSymbol[6] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[7] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[5], 
                    NeuralNetworks`Private`ScalarSymbol[6]}]]], 
                "$Dimensions" -> {8, 17, 15}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{8, 17, 15}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{8, 17, 15}, NeuralNetworks`RealT]]], 
            "3" -> Association[
             "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "KernelSize" -> {8, 8}, "Stride" -> {6, 3}, 
                "PaddingSize" -> {17, 8}, "Function" -> Mean, 
                "Dimensionality" -> 2, "Channels" -> 8, 
                "$InputSize" -> {17, 15}, "$OutputSize" -> {8, 8}, 
                "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> False], 
              "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{8, 17, 15}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{8, 8, 8}, NeuralNetworks`RealT]]], 
            "4" -> Association[
             "Type" -> "Convolution", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{64, 8, 5, 3}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputChannels" -> 64, "KernelSize" -> {5, 3}, 
                "Stride" -> {1, 5}, "PaddingSize" -> {8, 11}, 
                "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
                8, "$GroupNumber" -> 1, "$InputSize" -> {8, 8}, 
                "$OutputSize" -> {20, 6}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{8, 8, 8}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{64, 20, 6}, NeuralNetworks`RealT]]], 
            "5" -> Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association["Function" -> NeuralNetworks`ValidatedParameter[
                  NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                   NeuralNetworks`Private`ScalarSymbol[7], 
                   Association[
                   NeuralNetworks`Private`ScalarSymbol[2] -> {Plus, -1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[2], -1.}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    NeuralNetworks`Private`ScalarSymbol[4]}, 
                    NeuralNetworks`Private`ScalarSymbol[6] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[7] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[5], 
                    NeuralNetworks`Private`ScalarSymbol[6]}]]], 
                "$Dimensions" -> {64, 20, 6}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{64, 20, 6}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{64, 20, 6}, NeuralNetworks`RealT]]], 
            "6" -> Association[
             "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "KernelSize" -> {1, 4}, "Stride" -> {8, 8}, 
                "PaddingSize" -> {5, 4}, "Function" -> Max, "Dimensionality" -> 
                2, "Channels" -> 64, "$InputSize" -> {20, 6}, 
                "$OutputSize" -> {4, 2}, "$MXPoolingConvention" -> "valid", 
                "$MXGlobalPool" -> False], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{64, 20, 6}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{64, 4, 2}, NeuralNetworks`RealT]]], 
            "7" -> Association[
             "Type" -> "Flatten", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "Level" -> DirectedInfinity[1], "OutputSize" -> {512}, 
                "$InputSize" -> {64, 4, 2}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{64, 4, 2}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], "8" -> 
            Association[
             "Type" -> "Linear", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{558, 512}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{558}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputDimensions" -> {558}, "$OutputSize" -> 558, 
                "$InputSize" -> 512, "$InputDimensions" -> {512}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{558}, NeuralNetworks`RealT]]], "9" -> 
            Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                "$Dimensions" -> {558}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{558}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{558}, NeuralNetworks`RealT]]], "10" -> 
            Association[
             "Type" -> "Linear", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{10, 558}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputDimensions" -> {10}, "$OutputSize" -> 10, "$InputSize" -> 
                558, "$InputDimensions" -> {558}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{558}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "11" -> 
            Association[
             "Type" -> "Softmax", "Arrays" -> Association[], "Parameters" -> 
              Association[], "Inputs" -> 
              Association[
               "Input" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]],
               "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
          "Edges" -> {
           NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Inputs", "Input"], 
            NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "10", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Outputs", "Output"] -> 
            NeuralNetworks`NetPath["Nodes", "11", "Outputs", "Output"]}, 
          "Inputs" -> Association["Input" -> NetEncoder["Image", 
              Association[
              "ImageSize" -> {28, 28}, "ColorSpace" -> "Grayscale", 
               "ColorChannels" -> 1, "MeanImage" -> None], 
              NeuralNetworks`TensorT[{1, 28, 28}, NeuralNetworks`RealT]]], 
          "Outputs" -> Association["Output" -> NetDecoder["Class", 
              Association[
              "Labels" -> {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, "Dimensions" -> 10], 
              NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
         NeuralNetworks`Private`NetChain`opart, 
         NeuralNetworks`Private`NetChain`part, 
         NeuralNetworks`Private`NetChain`selected = Null}, 
         DynamicBox[GridBox[{{
             NeuralNetworks`Private`NetChain`MouseClickBoxes[
              TagBox[
               GridBox[{{
                  TagBox[
                   TagBox[
                   "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                   "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1\"", "\"28\"", "\"28\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"8\"", "\"17\"", "\"15\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["ElementwiseLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"8\"", "\"17\"", "\"15\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"8\"", "\"8\"", "\"8\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"64\"", "\"20\"", "\"6\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["ElementwiseLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"64\"", "\"20\"", "\"6\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"64\"", "\"4\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"558\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["Tanh", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"558\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"11\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                   "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                   "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                   "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  ItemBox[
                   StyleBox["\"(uninitialized)\"", 
                    RGBColor[0.66, 0, 0], Small, StripOnInput -> False], 
                   Alignment -> Center, StripOnInput -> False], 
                  "\[SpanFromLeft]", "\[SpanFromLeft]"}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                False, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
              If[
               ListQ[
               NeuralNetworks`Private`NetChain`part = MouseAnnotation[]], 
               If[NeuralNetworks`Private`NetChain`opart === 
                 NeuralNetworks`Private`NetChain`part, 
                 NeuralNetworks`Private`NetChain`selected = Null; 
                 NeuralNetworks`Private`NetChain`opart = Null, 
                 NeuralNetworks`Private`NetChain`selected = 
                  Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                 NeuralNetworks`Private`NetChain`opart = 
                  NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
            NeuralNetworks`Private`NetChain`fmtSelected[
            NeuralNetworks`Private`NetChain`selected, 
             NeuralNetworks`Private`NetChain`part]}, 
           GridBoxSpacings -> {"Columns" -> {{1}}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}],
          ImageSizeCache->{356., {156., 164.}},
          TrackedSymbols:>{NeuralNetworks`Private`NetChain`selected}],
         Initialization:>{NetChain}],
        BaselinePosition->Automatic], "]"}]}],
     False],
    Deploy],
   LineBreakWithin->False]}, {14,"14"->
  StyleBox[
   TagBox[
    TagBox[
     RowBox[{"NetChain", 
      RowBox[{"[", 
       PanelBox[
        DynamicModuleBox[{NeuralNetworks`Private`NetChain`assoc3 = 
         Association[
         "Type" -> "Chain", "Nodes" -> 
          Association[
           "1" -> Association[
             "Type" -> "Convolution", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{16, 1, 8, 15}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputChannels" -> 16, "KernelSize" -> {8, 15}, 
                "Stride" -> {5, 5}, "PaddingSize" -> {24, 23}, 
                "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
                1, "$GroupNumber" -> 1, "$InputSize" -> {28, 28}, 
                "$OutputSize" -> {14, 12}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{1, 28, 28}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{16, 14, 12}, NeuralNetworks`RealT]]], 
            "2" -> Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                "$Dimensions" -> {16, 14, 12}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{16, 14, 12}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{16, 14, 12}, NeuralNetworks`RealT]]], 
            "3" -> Association[
             "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "KernelSize" -> {9, 9}, "Stride" -> {8, 3}, 
                "PaddingSize" -> {21, 11}, "Function" -> Max, 
                "Dimensionality" -> 2, "Channels" -> 16, 
                "$InputSize" -> {14, 12}, "$OutputSize" -> {6, 9}, 
                "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> False], 
              "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{16, 14, 12}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{16, 6, 9}, NeuralNetworks`RealT]]], 
            "4" -> Association[
             "Type" -> "Convolution", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{50, 16, 2, 4}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputChannels" -> 50, "KernelSize" -> {2, 4}, 
                "Stride" -> {5, 6}, "PaddingSize" -> {9, 8}, 
                "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
                16, "$GroupNumber" -> 1, "$InputSize" -> {6, 9}, 
                "$OutputSize" -> {5, 4}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{16, 6, 9}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{50, 5, 4}, NeuralNetworks`RealT]]], 
            "5" -> Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                "$Dimensions" -> {50, 5, 4}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{50, 5, 4}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{50, 5, 4}, NeuralNetworks`RealT]]], 
            "6" -> Association[
             "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "KernelSize" -> {4, 1}, "Stride" -> {6, 11}, 
                "PaddingSize" -> {9, 8}, "Function" -> Max, "Dimensionality" -> 
                2, "Channels" -> 50, "$InputSize" -> {5, 4}, 
                "$OutputSize" -> {4, 2}, "$MXPoolingConvention" -> "valid", 
                "$MXGlobalPool" -> False], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{50, 5, 4}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{50, 4, 2}, NeuralNetworks`RealT]]], 
            "7" -> Association[
             "Type" -> "Flatten", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "Level" -> DirectedInfinity[1], "OutputSize" -> {400}, 
                "$InputSize" -> {50, 4, 2}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{50, 4, 2}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{400}, NeuralNetworks`RealT]]], "8" -> 
            Association[
             "Type" -> "Linear", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{568, 400}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{568}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputDimensions" -> {568}, "$OutputSize" -> 568, 
                "$InputSize" -> 400, "$InputDimensions" -> {400}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{400}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{568}, NeuralNetworks`RealT]]], "9" -> 
            Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association["Function" -> NeuralNetworks`ValidatedParameter[
                  NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                   NeuralNetworks`Private`ScalarSymbol[7], 
                   Association[
                   NeuralNetworks`Private`ScalarSymbol[2] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {
                    Times, 0.2211891475931247, 
                    NeuralNetworks`Private`ScalarSymbol[4]}, 
                    NeuralNetworks`Private`ScalarSymbol[6] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[5]}, 
                    NeuralNetworks`Private`ScalarSymbol[7] -> {Plus, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    NeuralNetworks`Private`ScalarSymbol[6]}]]], 
                "$Dimensions" -> {568}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{568}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{568}, NeuralNetworks`RealT]]], "10" -> 
            Association[
             "Type" -> "Linear", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{10, 568}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputDimensions" -> {10}, "$OutputSize" -> 10, "$InputSize" -> 
                568, "$InputDimensions" -> {568}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{568}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "11" -> 
            Association[
             "Type" -> "Softmax", "Arrays" -> Association[], "Parameters" -> 
              Association[], "Inputs" -> 
              Association[
               "Input" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]],
               "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
          "Edges" -> {
           NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Inputs", "Input"], 
            NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "10", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Outputs", "Output"] -> 
            NeuralNetworks`NetPath["Nodes", "11", "Outputs", "Output"]}, 
          "Inputs" -> Association["Input" -> NetEncoder["Image", 
              Association[
              "ImageSize" -> {28, 28}, "ColorSpace" -> "Grayscale", 
               "ColorChannels" -> 1, "MeanImage" -> None], 
              NeuralNetworks`TensorT[{1, 28, 28}, NeuralNetworks`RealT]]], 
          "Outputs" -> Association["Output" -> NetDecoder["Class", 
              Association[
              "Labels" -> {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, "Dimensions" -> 10], 
              NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
         NeuralNetworks`Private`NetChain`opart, 
         NeuralNetworks`Private`NetChain`part, 
         NeuralNetworks`Private`NetChain`selected = Null}, 
         DynamicBox[GridBox[{{
             NeuralNetworks`Private`NetChain`MouseClickBoxes[
              TagBox[
               GridBox[{{
                  TagBox[
                   TagBox[
                   "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                   "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1\"", "\"28\"", "\"28\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"16\"", "\"14\"", "\"12\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["Tanh", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"16\"", "\"14\"", "\"12\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"16\"", "\"6\"", "\"9\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"50\"", "\"5\"", "\"4\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["Tanh", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"50\"", "\"5\"", "\"4\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"50\"", "\"4\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"400\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"568\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["ElementwiseLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"568\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"11\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                   "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                   "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                   "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  ItemBox[
                   StyleBox["\"(uninitialized)\"", 
                    RGBColor[0.66, 0, 0], Small, StripOnInput -> False], 
                   Alignment -> Center, StripOnInput -> False], 
                  "\[SpanFromLeft]", "\[SpanFromLeft]"}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
              If[
               ListQ[
               NeuralNetworks`Private`NetChain`part = MouseAnnotation[]], 
               If[NeuralNetworks`Private`NetChain`opart === 
                 NeuralNetworks`Private`NetChain`part, 
                 NeuralNetworks`Private`NetChain`selected = Null; 
                 NeuralNetworks`Private`NetChain`opart = Null, 
                 NeuralNetworks`Private`NetChain`selected = 
                  Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                 NeuralNetworks`Private`NetChain`opart = 
                  NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
            NeuralNetworks`Private`NetChain`fmtSelected[
            NeuralNetworks`Private`NetChain`selected, 
             NeuralNetworks`Private`NetChain`part]}, 
           GridBoxSpacings -> {"Columns" -> {{1}}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}],
          ImageSizeCache->{365., {156., 164.}},
          TrackedSymbols:>{NeuralNetworks`Private`NetChain`selected}],
         Initialization:>{NetChain}],
        BaselinePosition->Automatic], "]"}]}],
     False],
    Deploy],
   LineBreakWithin->False]}, {15,"15"->
  StyleBox[
   TagBox[
    TagBox[
     RowBox[{"NetChain", 
      RowBox[{"[", 
       PanelBox[
        DynamicModuleBox[{NeuralNetworks`Private`NetChain`assoc3 = 
         Association[
         "Type" -> "Chain", "Nodes" -> 
          Association[
           "1" -> Association[
             "Type" -> "Convolution", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{14, 1, 5, 16}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{14}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputChannels" -> 14, "KernelSize" -> {5, 16}, 
                "Stride" -> {5, 1}, "PaddingSize" -> {23, 25}, 
                "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
                1, "$GroupNumber" -> 1, "$InputSize" -> {28, 28}, 
                "$OutputSize" -> {14, 63}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{1, 28, 28}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{14, 14, 63}, NeuralNetworks`RealT]]], 
            "2" -> Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                "$Dimensions" -> {14, 14, 63}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{14, 14, 63}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{14, 14, 63}, NeuralNetworks`RealT]]], 
            "3" -> Association[
             "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "KernelSize" -> {8, 12}, "Stride" -> {6, 5}, 
                "PaddingSize" -> {18, 10}, "Function" -> Mean, 
                "Dimensionality" -> 2, "Channels" -> 14, 
                "$InputSize" -> {14, 63}, "$OutputSize" -> {8, 15}, 
                "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> False], 
              "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{14, 14, 63}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{14, 8, 15}, NeuralNetworks`RealT]]], 
            "4" -> Association[
             "Type" -> "Convolution", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{43, 14, 3, 7}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{43}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputChannels" -> 43, "KernelSize" -> {3, 7}, 
                "Stride" -> {1, 4}, "PaddingSize" -> {12, 11}, 
                "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
                14, "$GroupNumber" -> 1, "$InputSize" -> {8, 15}, 
                "$OutputSize" -> {30, 8}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{14, 8, 15}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{43, 30, 8}, NeuralNetworks`RealT]]], 
            "5" -> Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                "$Dimensions" -> {43, 30, 8}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{43, 30, 8}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{43, 30, 8}, NeuralNetworks`RealT]]], 
            "6" -> Association[
             "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "KernelSize" -> {7, 5}, "Stride" -> {6, 10}, 
                "PaddingSize" -> {12, 6}, "Function" -> Mean, 
                "Dimensionality" -> 2, "Channels" -> 43, 
                "$InputSize" -> {30, 8}, "$OutputSize" -> {8, 2}, 
                "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> False], 
              "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{43, 30, 8}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{43, 8, 2}, NeuralNetworks`RealT]]], 
            "7" -> Association[
             "Type" -> "Flatten", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "Level" -> DirectedInfinity[1], "OutputSize" -> {688}, 
                "$InputSize" -> {43, 8, 2}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{43, 8, 2}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{688}, NeuralNetworks`RealT]]], "8" -> 
            Association[
             "Type" -> "Linear", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{580, 688}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{580}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputDimensions" -> {580}, "$OutputSize" -> 580, 
                "$InputSize" -> 688, "$InputDimensions" -> {688}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{688}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{580}, NeuralNetworks`RealT]]], "9" -> 
            Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                "$Dimensions" -> {580}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{580}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{580}, NeuralNetworks`RealT]]], "10" -> 
            Association[
             "Type" -> "Linear", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{10, 580}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputDimensions" -> {10}, "$OutputSize" -> 10, "$InputSize" -> 
                580, "$InputDimensions" -> {580}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{580}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "11" -> 
            Association[
             "Type" -> "Softmax", "Arrays" -> Association[], "Parameters" -> 
              Association[], "Inputs" -> 
              Association[
               "Input" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]],
               "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
          "Edges" -> {
           NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Inputs", "Input"], 
            NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "10", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Outputs", "Output"] -> 
            NeuralNetworks`NetPath["Nodes", "11", "Outputs", "Output"]}, 
          "Inputs" -> Association["Input" -> NetEncoder["Image", 
              Association[
              "ImageSize" -> {28, 28}, "ColorSpace" -> "Grayscale", 
               "ColorChannels" -> 1, "MeanImage" -> None], 
              NeuralNetworks`TensorT[{1, 28, 28}, NeuralNetworks`RealT]]], 
          "Outputs" -> Association["Output" -> NetDecoder["Class", 
              Association[
              "Labels" -> {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, "Dimensions" -> 10], 
              NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
         NeuralNetworks`Private`NetChain`opart, 
         NeuralNetworks`Private`NetChain`part, 
         NeuralNetworks`Private`NetChain`selected = Null}, 
         DynamicBox[GridBox[{{
             NeuralNetworks`Private`NetChain`MouseClickBoxes[
              TagBox[
               GridBox[{{
                  TagBox[
                   TagBox[
                   "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                   "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1\"", "\"28\"", "\"28\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"14\"", "\"14\"", "\"63\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"14\"", "\"14\"", "\"63\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"14\"", "\"8\"", "\"15\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"43\"", "\"30\"", "\"8\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"43\"", "\"30\"", "\"8\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"43\"", "\"8\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"688\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"580\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"580\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"11\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                   "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                   "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                   "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  ItemBox[
                   StyleBox["\"(uninitialized)\"", 
                    RGBColor[0.66, 0, 0], Small, StripOnInput -> False], 
                   Alignment -> Center, StripOnInput -> False], 
                  "\[SpanFromLeft]", "\[SpanFromLeft]"}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
              If[
               ListQ[
               NeuralNetworks`Private`NetChain`part = MouseAnnotation[]], 
               If[NeuralNetworks`Private`NetChain`opart === 
                 NeuralNetworks`Private`NetChain`part, 
                 NeuralNetworks`Private`NetChain`selected = Null; 
                 NeuralNetworks`Private`NetChain`opart = Null, 
                 NeuralNetworks`Private`NetChain`selected = 
                  Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                 NeuralNetworks`Private`NetChain`opart = 
                  NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
            NeuralNetworks`Private`NetChain`fmtSelected[
            NeuralNetworks`Private`NetChain`selected, 
             NeuralNetworks`Private`NetChain`part]}, 
           GridBoxSpacings -> {"Columns" -> {{1}}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}],
          ImageSizeCache->{363., {156., 164.}},
          TrackedSymbols:>{NeuralNetworks`Private`NetChain`selected}],
         Initialization:>{NetChain}],
        BaselinePosition->Automatic], "]"}]}],
     False],
    Deploy],
   LineBreakWithin->False]}, {16,"16"->
  StyleBox[
   TagBox[
    TagBox[
     RowBox[{"NetChain", 
      RowBox[{"[", 
       PanelBox[
        DynamicModuleBox[{NeuralNetworks`Private`NetChain`assoc3 = 
         Association[
         "Type" -> "Chain", "Nodes" -> 
          Association[
           "1" -> Association[
             "Type" -> "Convolution", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{19, 1, 6, 16}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{19}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputChannels" -> 19, "KernelSize" -> {6, 16}, 
                "Stride" -> {8, 1}, "PaddingSize" -> {25, 24}, 
                "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
                1, "$GroupNumber" -> 1, "$InputSize" -> {28, 28}, 
                "$OutputSize" -> {10, 61}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{1, 28, 28}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{19, 10, 61}, NeuralNetworks`RealT]]], 
            "2" -> Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "Function" -> 
                NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                "$Dimensions" -> {19, 10, 61}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{19, 10, 61}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{19, 10, 61}, NeuralNetworks`RealT]]], 
            "3" -> Association[
             "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "KernelSize" -> {6, 16}, "Stride" -> {10, 7}, 
                "PaddingSize" -> {17, 9}, "Function" -> Mean, 
                "Dimensionality" -> 2, "Channels" -> 19, 
                "$InputSize" -> {10, 61}, "$OutputSize" -> {4, 10}, 
                "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> False], 
              "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{19, 10, 61}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{19, 4, 10}, NeuralNetworks`RealT]]], 
            "4" -> Association[
             "Type" -> "Convolution", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{51, 19, 1, 8}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{51}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputChannels" -> 51, "KernelSize" -> {1, 8}, 
                "Stride" -> {2, 8}, "PaddingSize" -> {16, 8}, 
                "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
                19, "$GroupNumber" -> 1, "$InputSize" -> {4, 10}, 
                "$OutputSize" -> {18, 3}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{19, 4, 10}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{51, 18, 3}, NeuralNetworks`RealT]]], 
            "5" -> Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association["Function" -> NeuralNetworks`ValidatedParameter[
                  NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                   NeuralNetworks`Private`ScalarSymbol[11], 
                   Association[
                   NeuralNetworks`Private`ScalarSymbol[2] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[1], -1.}, 
                    NeuralNetworks`Private`ScalarSymbol[6] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    NeuralNetworks`Private`ScalarSymbol[5]}, 
                    NeuralNetworks`Private`ScalarSymbol[7] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[8] -> {Plus, -1., 
                    NeuralNetworks`Private`ScalarSymbol[7]}, 
                    NeuralNetworks`Private`ScalarSymbol[9] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[6], 
                    NeuralNetworks`Private`ScalarSymbol[8]}, 
                    NeuralNetworks`Private`ScalarSymbol[10] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[9]}, 
                    NeuralNetworks`Private`ScalarSymbol[11] -> {Plus, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    NeuralNetworks`Private`ScalarSymbol[10]}]]], 
                "$Dimensions" -> {51, 18, 3}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{51, 18, 3}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{51, 18, 3}, NeuralNetworks`RealT]]], 
            "6" -> Association[
             "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "KernelSize" -> {11, 3}, "Stride" -> {5, 8}, 
                "PaddingSize" -> {10, 2}, "Function" -> Max, "Dimensionality" -> 
                2, "Channels" -> 51, "$InputSize" -> {18, 3}, 
                "$OutputSize" -> {6, 1}, "$MXPoolingConvention" -> "valid", 
                "$MXGlobalPool" -> False], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{51, 18, 3}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{51, 6, 1}, NeuralNetworks`RealT]]], 
            "7" -> Association[
             "Type" -> "Flatten", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "Level" -> DirectedInfinity[1], "OutputSize" -> {306}, 
                "$InputSize" -> {51, 6, 1}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{51, 6, 1}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{306}, NeuralNetworks`RealT]]], "8" -> 
            Association[
             "Type" -> "Linear", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{570, 306}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{570}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputDimensions" -> {570}, "$OutputSize" -> 570, 
                "$InputSize" -> 306, "$InputDimensions" -> {306}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{306}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{570}, NeuralNetworks`RealT]]], "9" -> 
            Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                "$Dimensions" -> {570}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{570}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{570}, NeuralNetworks`RealT]]], "10" -> 
            Association[
             "Type" -> "Linear", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{10, 570}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputDimensions" -> {10}, "$OutputSize" -> 10, "$InputSize" -> 
                570, "$InputDimensions" -> {570}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{570}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "11" -> 
            Association[
             "Type" -> "Softmax", "Arrays" -> Association[], "Parameters" -> 
              Association[], "Inputs" -> 
              Association[
               "Input" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]],
               "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
          "Edges" -> {
           NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Inputs", "Input"], 
            NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "10", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Outputs", "Output"] -> 
            NeuralNetworks`NetPath["Nodes", "11", "Outputs", "Output"]}, 
          "Inputs" -> Association["Input" -> NetEncoder["Image", 
              Association[
              "ImageSize" -> {28, 28}, "ColorSpace" -> "Grayscale", 
               "ColorChannels" -> 1, "MeanImage" -> None], 
              NeuralNetworks`TensorT[{1, 28, 28}, NeuralNetworks`RealT]]], 
          "Outputs" -> Association["Output" -> NetDecoder["Class", 
              Association[
              "Labels" -> {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, "Dimensions" -> 10], 
              NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
         NeuralNetworks`Private`NetChain`opart, 
         NeuralNetworks`Private`NetChain`part, 
         NeuralNetworks`Private`NetChain`selected = Null}, 
         DynamicBox[GridBox[{{
             NeuralNetworks`Private`NetChain`MouseClickBoxes[
              TagBox[
               GridBox[{{
                  TagBox[
                   TagBox[
                   "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                   "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1\"", "\"28\"", "\"28\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"19\"", "\"10\"", "\"61\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["LogisticSigmoid", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"19\"", "\"10\"", "\"61\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"19\"", "\"4\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"51\"", "\"18\"", "\"3\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["ElementwiseLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"51\"", "\"18\"", "\"3\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"51\"", "\"6\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"306\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"570\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["Tanh", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"570\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"11\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                   "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                   "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                   "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  ItemBox[
                   StyleBox["\"(uninitialized)\"", 
                    RGBColor[0.66, 0, 0], Small, StripOnInput -> False], 
                   Alignment -> Center, StripOnInput -> False], 
                  "\[SpanFromLeft]", "\[SpanFromLeft]"}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
              If[
               ListQ[
               NeuralNetworks`Private`NetChain`part = MouseAnnotation[]], 
               If[NeuralNetworks`Private`NetChain`opart === 
                 NeuralNetworks`Private`NetChain`part, 
                 NeuralNetworks`Private`NetChain`selected = Null; 
                 NeuralNetworks`Private`NetChain`opart = Null, 
                 NeuralNetworks`Private`NetChain`selected = 
                  Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                 NeuralNetworks`Private`NetChain`opart = 
                  NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
            NeuralNetworks`Private`NetChain`fmtSelected[
            NeuralNetworks`Private`NetChain`selected, 
             NeuralNetworks`Private`NetChain`part]}, 
           GridBoxSpacings -> {"Columns" -> {{1}}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}],
          ImageSizeCache->{365., {156., 164.}},
          TrackedSymbols:>{NeuralNetworks`Private`NetChain`selected}],
         Initialization:>{NetChain}],
        BaselinePosition->Automatic], "]"}]}],
     False],
    Deploy],
   LineBreakWithin->False]}, {17,"17"->
  StyleBox[
   TagBox[
    TagBox[
     RowBox[{"NetChain", 
      RowBox[{"[", 
       PanelBox[
        DynamicModuleBox[{NeuralNetworks`Private`NetChain`assoc3 = 
         Association[
         "Type" -> "Chain", "Nodes" -> 
          Association[
           "1" -> Association[
             "Type" -> "Convolution", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{6, 1, 8, 18}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputChannels" -> 6, "KernelSize" -> {8, 18}, 
                "Stride" -> {6, 1}, "PaddingSize" -> {21, 20}, 
                "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
                1, "$GroupNumber" -> 1, "$InputSize" -> {28, 28}, 
                "$OutputSize" -> {11, 51}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{1, 28, 28}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{6, 11, 51}, NeuralNetworks`RealT]]], 
            "2" -> Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association["Function" -> NeuralNetworks`ValidatedParameter[
                  NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                   NeuralNetworks`Private`ScalarSymbol[11], 
                   Association[
                   NeuralNetworks`Private`ScalarSymbol[2] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[1], -1.}, 
                    NeuralNetworks`Private`ScalarSymbol[6] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    NeuralNetworks`Private`ScalarSymbol[5]}, 
                    NeuralNetworks`Private`ScalarSymbol[7] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[8] -> {Plus, -1., 
                    NeuralNetworks`Private`ScalarSymbol[7]}, 
                    NeuralNetworks`Private`ScalarSymbol[9] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[6], 
                    NeuralNetworks`Private`ScalarSymbol[8]}, 
                    NeuralNetworks`Private`ScalarSymbol[10] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[9]}, 
                    NeuralNetworks`Private`ScalarSymbol[11] -> {Plus, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    NeuralNetworks`Private`ScalarSymbol[10]}]]], 
                "$Dimensions" -> {6, 11, 51}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{6, 11, 51}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{6, 11, 51}, NeuralNetworks`RealT]]], 
            "3" -> Association[
             "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "KernelSize" -> {9, 14}, "Stride" -> {13, 6}, 
                "PaddingSize" -> {13, 9}, "Function" -> Mean, 
                "Dimensionality" -> 2, "Channels" -> 6, 
                "$InputSize" -> {11, 51}, "$OutputSize" -> {3, 10}, 
                "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> False], 
              "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{6, 11, 51}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{6, 3, 10}, NeuralNetworks`RealT]]], 
            "4" -> 
            Association[
             "Type" -> "Convolution", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{43, 6, 1, 5}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{43}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputChannels" -> 43, "KernelSize" -> {1, 5}, 
                "Stride" -> {3, 9}, "PaddingSize" -> {19, 11}, 
                "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
                6, "$GroupNumber" -> 1, "$InputSize" -> {3, 10}, 
                "$OutputSize" -> {14, 4}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{6, 3, 10}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{43, 14, 4}, NeuralNetworks`RealT]]], 
            "5" -> Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "Function" -> 
                NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                "$Dimensions" -> {43, 14, 4}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{43, 14, 4}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{43, 14, 4}, NeuralNetworks`RealT]]], 
            "6" -> Association[
             "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "KernelSize" -> {11, 3}, "Stride" -> {2, 7}, 
                "PaddingSize" -> {9, 6}, "Function" -> Max, "Dimensionality" -> 
                2, "Channels" -> 43, "$InputSize" -> {14, 4}, 
                "$OutputSize" -> {11, 2}, "$MXPoolingConvention" -> "valid", 
                "$MXGlobalPool" -> False], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{43, 14, 4}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{43, 11, 2}, NeuralNetworks`RealT]]], 
            "7" -> Association[
             "Type" -> "Flatten", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "Level" -> DirectedInfinity[1], "OutputSize" -> {946}, 
                "$InputSize" -> {43, 11, 2}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{43, 11, 2}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{946}, NeuralNetworks`RealT]]], "8" -> 
            Association[
             "Type" -> "Linear", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{570, 946}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{570}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputDimensions" -> {570}, "$OutputSize" -> 570, 
                "$InputSize" -> 946, "$InputDimensions" -> {946}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{946}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{570}, NeuralNetworks`RealT]]], "9" -> 
            Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                "$Dimensions" -> {570}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{570}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{570}, NeuralNetworks`RealT]]], "10" -> 
            Association[
             "Type" -> "Linear", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{10, 570}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputDimensions" -> {10}, "$OutputSize" -> 10, "$InputSize" -> 
                570, "$InputDimensions" -> {570}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{570}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "11" -> 
            Association[
             "Type" -> "Softmax", "Arrays" -> Association[], "Parameters" -> 
              Association[], "Inputs" -> 
              Association[
               "Input" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]],
               "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
          "Edges" -> {
           NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Inputs", "Input"], 
            NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "10", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Outputs", "Output"] -> 
            NeuralNetworks`NetPath["Nodes", "11", "Outputs", "Output"]}, 
          "Inputs" -> Association["Input" -> NetEncoder["Image", 
              Association[
              "ImageSize" -> {28, 28}, "ColorSpace" -> "Grayscale", 
               "ColorChannels" -> 1, "MeanImage" -> None], 
              NeuralNetworks`TensorT[{1, 28, 28}, NeuralNetworks`RealT]]], 
          "Outputs" -> Association["Output" -> NetDecoder["Class", 
              Association[
              "Labels" -> {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, "Dimensions" -> 10], 
              NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
         NeuralNetworks`Private`NetChain`opart, 
         NeuralNetworks`Private`NetChain`part, 
         NeuralNetworks`Private`NetChain`selected = Null}, 
         DynamicBox[GridBox[{{
             NeuralNetworks`Private`NetChain`MouseClickBoxes[
              TagBox[
               GridBox[{{
                  TagBox[
                   TagBox[
                   "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                   "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1\"", "\"28\"", "\"28\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"6\"", "\"11\"", "\"51\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["ElementwiseLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"6\"", "\"11\"", "\"51\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"6\"", "\"3\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"43\"", "\"14\"", "\"4\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["LogisticSigmoid", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"43\"", "\"14\"", "\"4\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"43\"", "\"11\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"946\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"570\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"570\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"11\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                   "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                   "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                   "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  ItemBox[
                   StyleBox["\"(uninitialized)\"", 
                    RGBColor[0.66, 0, 0], Small, StripOnInput -> False], 
                   Alignment -> Center, StripOnInput -> False], 
                  "\[SpanFromLeft]", "\[SpanFromLeft]"}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
              If[
               ListQ[
               NeuralNetworks`Private`NetChain`part = MouseAnnotation[]], 
               If[NeuralNetworks`Private`NetChain`opart === 
                 NeuralNetworks`Private`NetChain`part, 
                 NeuralNetworks`Private`NetChain`selected = Null; 
                 NeuralNetworks`Private`NetChain`opart = Null, 
                 NeuralNetworks`Private`NetChain`selected = 
                  Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                 NeuralNetworks`Private`NetChain`opart = 
                  NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
            NeuralNetworks`Private`NetChain`fmtSelected[
            NeuralNetworks`Private`NetChain`selected, 
             NeuralNetworks`Private`NetChain`part]}, 
           GridBoxSpacings -> {"Columns" -> {{1}}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}],
          ImageSizeCache->{356., {156., 164.}},
          TrackedSymbols:>{NeuralNetworks`Private`NetChain`selected}],
         Initialization:>{NetChain}],
        BaselinePosition->Automatic], "]"}]}],
     False],
    Deploy],
   LineBreakWithin->False]}, {18,"18"->
  StyleBox[
   TagBox[
    TagBox[
     RowBox[{"NetChain", 
      RowBox[{"[", 
       PanelBox[
        DynamicModuleBox[{NeuralNetworks`Private`NetChain`assoc3 = 
         Association[
         "Type" -> "Chain", "Nodes" -> 
          Association[
           "1" -> Association[
             "Type" -> "Convolution", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{1, 1, 5, 16}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputChannels" -> 1, "KernelSize" -> {5, 16}, 
                "Stride" -> {2, 2}, "PaddingSize" -> {17, 16}, 
                "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
                1, "$GroupNumber" -> 1, "$InputSize" -> {28, 28}, 
                "$OutputSize" -> {29, 23}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{1, 28, 28}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{1, 29, 23}, NeuralNetworks`RealT]]], 
            "2" -> Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "Function" -> 
                NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                "$Dimensions" -> {1, 29, 23}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{1, 29, 23}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{1, 29, 23}, NeuralNetworks`RealT]]], 
            "3" -> Association[
             "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "KernelSize" -> {10, 14}, "Stride" -> {13, 7}, 
                "PaddingSize" -> {17, 13}, "Function" -> Max, 
                "Dimensionality" -> 2, "Channels" -> 1, 
                "$InputSize" -> {29, 23}, "$OutputSize" -> {5, 6}, 
                "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> False], 
              "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{1, 29, 23}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{1, 5, 6}, NeuralNetworks`RealT]]], 
            "4" -> Association[
             "Type" -> "Convolution", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{57, 1, 2, 5}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{57}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputChannels" -> 57, "KernelSize" -> {2, 5}, 
                "Stride" -> {2, 8}, "PaddingSize" -> {21, 11}, 
                "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
                1, "$GroupNumber" -> 1, "$InputSize" -> {5, 6}, 
                "$OutputSize" -> {23, 3}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{1, 5, 6}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{57, 23, 3}, NeuralNetworks`RealT]]], 
            "5" -> Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                "$Dimensions" -> {57, 23, 3}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{57, 23, 3}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{57, 23, 3}, NeuralNetworks`RealT]]], 
            "6" -> Association[
             "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "KernelSize" -> {7, 3}, "Stride" -> {5, 9}, 
                "PaddingSize" -> {11, 2}, "Function" -> Mean, 
                "Dimensionality" -> 2, "Channels" -> 57, 
                "$InputSize" -> {23, 3}, "$OutputSize" -> {8, 1}, 
                "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> False], 
              "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{57, 23, 3}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{57, 8, 1}, NeuralNetworks`RealT]]], 
            "7" -> Association[
             "Type" -> "Flatten", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "Level" -> DirectedInfinity[1], "OutputSize" -> {456}, 
                "$InputSize" -> {57, 8, 1}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{57, 8, 1}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{456}, NeuralNetworks`RealT]]], "8" -> 
            Association[
             "Type" -> "Linear", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{570, 456}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{570}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputDimensions" -> {570}, "$OutputSize" -> 570, 
                "$InputSize" -> 456, "$InputDimensions" -> {456}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{456}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{570}, NeuralNetworks`RealT]]], "9" -> 
            Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association["Function" -> NeuralNetworks`ValidatedParameter[
                  NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                   NeuralNetworks`Private`ScalarSymbol[11], 
                   Association[
                   NeuralNetworks`Private`ScalarSymbol[2] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[1], -1.}, 
                    NeuralNetworks`Private`ScalarSymbol[6] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    NeuralNetworks`Private`ScalarSymbol[5]}, 
                    NeuralNetworks`Private`ScalarSymbol[7] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[8] -> {Plus, -1., 
                    NeuralNetworks`Private`ScalarSymbol[7]}, 
                    NeuralNetworks`Private`ScalarSymbol[9] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[6], 
                    NeuralNetworks`Private`ScalarSymbol[8]}, 
                    NeuralNetworks`Private`ScalarSymbol[10] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[9]}, 
                    NeuralNetworks`Private`ScalarSymbol[11] -> {Plus, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    NeuralNetworks`Private`ScalarSymbol[10]}]]], 
                "$Dimensions" -> {570}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{570}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{570}, NeuralNetworks`RealT]]], "10" -> 
            Association[
             "Type" -> "Linear", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{10, 570}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputDimensions" -> {10}, "$OutputSize" -> 10, "$InputSize" -> 
                570, "$InputDimensions" -> {570}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{570}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "11" -> 
            Association[
             "Type" -> "Softmax", "Arrays" -> Association[], "Parameters" -> 
              Association[], "Inputs" -> 
              Association[
               "Input" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]],
               "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
          "Edges" -> {
           NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Inputs", "Input"], 
            NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "10", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Outputs", "Output"] -> 
            NeuralNetworks`NetPath["Nodes", "11", "Outputs", "Output"]}, 
          "Inputs" -> Association["Input" -> NetEncoder["Image", 
              Association[
              "ImageSize" -> {28, 28}, "ColorSpace" -> "Grayscale", 
               "ColorChannels" -> 1, "MeanImage" -> None], 
              NeuralNetworks`TensorT[{1, 28, 28}, NeuralNetworks`RealT]]], 
          "Outputs" -> Association["Output" -> NetDecoder["Class", 
              Association[
              "Labels" -> {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, "Dimensions" -> 10], 
              NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
         NeuralNetworks`Private`NetChain`opart, 
         NeuralNetworks`Private`NetChain`part, 
         NeuralNetworks`Private`NetChain`selected = Null}, 
         DynamicBox[GridBox[{{
             NeuralNetworks`Private`NetChain`MouseClickBoxes[
              TagBox[
               GridBox[{{
                  TagBox[
                   TagBox[
                   "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                   "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1\"", "\"28\"", "\"28\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1\"", "\"29\"", "\"23\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["LogisticSigmoid", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1\"", "\"29\"", "\"23\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1\"", "\"5\"", "\"6\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"57\"", "\"23\"", "\"3\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["Tanh", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"57\"", "\"23\"", "\"3\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"57\"", "\"8\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"456\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"570\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["ElementwiseLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"570\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"11\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                   "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                   "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                   "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  ItemBox[
                   StyleBox["\"(uninitialized)\"", 
                    RGBColor[0.66, 0, 0], Small, StripOnInput -> False], 
                   Alignment -> Center, StripOnInput -> False], 
                  "\[SpanFromLeft]", "\[SpanFromLeft]"}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
              If[
               ListQ[
               NeuralNetworks`Private`NetChain`part = MouseAnnotation[]], 
               If[NeuralNetworks`Private`NetChain`opart === 
                 NeuralNetworks`Private`NetChain`part, 
                 NeuralNetworks`Private`NetChain`selected = Null; 
                 NeuralNetworks`Private`NetChain`opart = Null, 
                 NeuralNetworks`Private`NetChain`selected = 
                  Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                 NeuralNetworks`Private`NetChain`opart = 
                  NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
            NeuralNetworks`Private`NetChain`fmtSelected[
            NeuralNetworks`Private`NetChain`selected, 
             NeuralNetworks`Private`NetChain`part]}, 
           GridBoxSpacings -> {"Columns" -> {{1}}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}],
          ImageSizeCache->{356., {156., 164.}},
          TrackedSymbols:>{NeuralNetworks`Private`NetChain`selected}],
         Initialization:>{NetChain}],
        BaselinePosition->Automatic], "]"}]}],
     False],
    Deploy],
   LineBreakWithin->False]}, {19,"19"->
  StyleBox[
   TagBox[
    TagBox[
     RowBox[{"NetChain", 
      RowBox[{"[", 
       PanelBox[
        DynamicModuleBox[{NeuralNetworks`Private`NetChain`assoc3 = 
         Association[
         "Type" -> "Chain", "Nodes" -> 
          Association[
           "1" -> Association[
             "Type" -> "Convolution", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{9, 1, 3, 12}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{9}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputChannels" -> 9, "KernelSize" -> {3, 12}, 
                "Stride" -> {1, 2}, "PaddingSize" -> {16, 13}, 
                "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
                1, "$GroupNumber" -> 1, "$InputSize" -> {28, 28}, 
                "$OutputSize" -> {58, 22}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{1, 28, 28}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{9, 58, 22}, NeuralNetworks`RealT]]], 
            "2" -> Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association["Function" -> NeuralNetworks`ValidatedParameter[
                  NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                   NeuralNetworks`Private`ScalarSymbol[7], 
                   Association[
                   NeuralNetworks`Private`ScalarSymbol[2] -> {Plus, -1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[2], -1.}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    NeuralNetworks`Private`ScalarSymbol[4]}, 
                    NeuralNetworks`Private`ScalarSymbol[6] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[7] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[5], 
                    NeuralNetworks`Private`ScalarSymbol[6]}]]], 
                "$Dimensions" -> {9, 58, 22}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{9, 58, 22}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{9, 58, 22}, NeuralNetworks`RealT]]], 
            "3" -> Association[
             "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "KernelSize" -> {9, 16}, "Stride" -> {15, 4}, 
                "PaddingSize" -> {15, 16}, "Function" -> Mean, 
                "Dimensionality" -> 2, "Channels" -> 9, 
                "$InputSize" -> {58, 22}, "$OutputSize" -> {6, 10}, 
                "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> False], 
              "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{9, 58, 22}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{9, 6, 10}, NeuralNetworks`RealT]]], 
            "4" -> Association[
             "Type" -> "Convolution", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{74, 9, 1, 5}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{74}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputChannels" -> 74, "KernelSize" -> {1, 5}, 
                "Stride" -> {3, 4}, "PaddingSize" -> {23, 15}, 
                "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
                9, "$GroupNumber" -> 1, "$InputSize" -> {6, 10}, 
                "$OutputSize" -> {18, 9}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{9, 6, 10}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{74, 18, 9}, NeuralNetworks`RealT]]], 
            "5" -> Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                "$Dimensions" -> {74, 18, 9}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{74, 18, 9}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{74, 18, 9}, NeuralNetworks`RealT]]], 
            "6" -> Association[
             "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "KernelSize" -> {3, 6}, "Stride" -> {5, 10}, 
                "PaddingSize" -> {11, 6}, "Function" -> Max, "Dimensionality" -> 
                2, "Channels" -> 74, "$InputSize" -> {18, 9}, 
                "$OutputSize" -> {8, 2}, "$MXPoolingConvention" -> "valid", 
                "$MXGlobalPool" -> False], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{74, 18, 9}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{74, 8, 2}, NeuralNetworks`RealT]]], 
            "7" -> Association[
             "Type" -> "Flatten", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "Level" -> DirectedInfinity[1], "OutputSize" -> {1184}, 
                "$InputSize" -> {74, 8, 2}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{74, 8, 2}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{1184}, NeuralNetworks`RealT]]], "8" -> 
            Association[
             "Type" -> "Linear", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{588, 1184}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{588}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputDimensions" -> {588}, "$OutputSize" -> 588, 
                "$InputSize" -> 1184, "$InputDimensions" -> {1184}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{1184}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{588}, NeuralNetworks`RealT]]], "9" -> 
            Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "Function" -> 
                NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                "$Dimensions" -> {588}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{588}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{588}, NeuralNetworks`RealT]]], "10" -> 
            Association[
             "Type" -> "Linear", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{10, 588}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputDimensions" -> {10}, "$OutputSize" -> 10, "$InputSize" -> 
                588, "$InputDimensions" -> {588}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{588}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "11" -> 
            Association[
             "Type" -> "Softmax", "Arrays" -> Association[], "Parameters" -> 
              Association[], "Inputs" -> 
              Association[
               "Input" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]],
               "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
          "Edges" -> {
           NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Inputs", "Input"], 
            NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "10", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Outputs", "Output"] -> 
            NeuralNetworks`NetPath["Nodes", "11", "Outputs", "Output"]}, 
          "Inputs" -> Association["Input" -> NetEncoder["Image", 
              Association[
              "ImageSize" -> {28, 28}, "ColorSpace" -> "Grayscale", 
               "ColorChannels" -> 1, "MeanImage" -> None], 
              NeuralNetworks`TensorT[{1, 28, 28}, NeuralNetworks`RealT]]], 
          "Outputs" -> Association["Output" -> NetDecoder["Class", 
              Association[
              "Labels" -> {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, "Dimensions" -> 10], 
              NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
         NeuralNetworks`Private`NetChain`opart, 
         NeuralNetworks`Private`NetChain`part, 
         NeuralNetworks`Private`NetChain`selected = Null}, 
         DynamicBox[GridBox[{{
             NeuralNetworks`Private`NetChain`MouseClickBoxes[
              TagBox[
               GridBox[{{
                  TagBox[
                   TagBox[
                   "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                   "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1\"", "\"28\"", "\"28\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"9\"", "\"58\"", "\"22\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["ElementwiseLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"9\"", "\"58\"", "\"22\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"9\"", "\"6\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"74\"", "\"18\"", "\"9\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"74\"", "\"18\"", "\"9\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"74\"", "\"8\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1184\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"588\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["LogisticSigmoid", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"588\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"11\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                   "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                   "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                   "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  ItemBox[
                   StyleBox["\"(uninitialized)\"", 
                    RGBColor[0.66, 0, 0], Small, StripOnInput -> False], 
                   Alignment -> Center, StripOnInput -> False], 
                  "\[SpanFromLeft]", "\[SpanFromLeft]"}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                False, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
              If[
               ListQ[
               NeuralNetworks`Private`NetChain`part = MouseAnnotation[]], 
               If[NeuralNetworks`Private`NetChain`opart === 
                 NeuralNetworks`Private`NetChain`part, 
                 NeuralNetworks`Private`NetChain`selected = Null; 
                 NeuralNetworks`Private`NetChain`opart = Null, 
                 NeuralNetworks`Private`NetChain`selected = 
                  Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                 NeuralNetworks`Private`NetChain`opart = 
                  NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
            NeuralNetworks`Private`NetChain`fmtSelected[
            NeuralNetworks`Private`NetChain`selected, 
             NeuralNetworks`Private`NetChain`part]}, 
           GridBoxSpacings -> {"Columns" -> {{1}}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}],
          ImageSizeCache->{356., {156., 164.}},
          TrackedSymbols:>{NeuralNetworks`Private`NetChain`selected}],
         Initialization:>{NetChain}],
        BaselinePosition->Automatic], "]"}]}],
     False],
    Deploy],
   LineBreakWithin->False]}, {20,"20"->
  StyleBox[
   TagBox[
    TagBox[
     RowBox[{"NetChain", 
      RowBox[{"[", 
       PanelBox[
        DynamicModuleBox[{NeuralNetworks`Private`NetChain`assoc3 = 
         Association[
         "Type" -> "Chain", "Nodes" -> 
          Association[
           "1" -> Association[
             "Type" -> "Convolution", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{27, 1, 6, 9}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{27}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputChannels" -> 27, "KernelSize" -> {6, 9}, 
                "Stride" -> {2, 2}, "PaddingSize" -> {15, 11}, 
                "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
                1, "$GroupNumber" -> 1, "$InputSize" -> {28, 28}, 
                "$OutputSize" -> {27, 21}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{1, 28, 28}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{27, 27, 21}, NeuralNetworks`RealT]]], 
            "2" -> Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association["Function" -> NeuralNetworks`ValidatedParameter[
                  NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                   NeuralNetworks`Private`ScalarSymbol[7], 
                   Association[
                   NeuralNetworks`Private`ScalarSymbol[2] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {
                    Times, 0.20113120978695287`, 
                    NeuralNetworks`Private`ScalarSymbol[4]}, 
                    NeuralNetworks`Private`ScalarSymbol[6] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[5]}, 
                    NeuralNetworks`Private`ScalarSymbol[7] -> {Plus, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    NeuralNetworks`Private`ScalarSymbol[6]}]]], 
                "$Dimensions" -> {27, 27, 21}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{27, 27, 21}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{27, 27, 21}, NeuralNetworks`RealT]]], 
            "3" -> Association[
             "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "KernelSize" -> {5, 14}, "Stride" -> {12, 6}, 
                "PaddingSize" -> {19, 12}, "Function" -> Mean, 
                "Dimensionality" -> 2, "Channels" -> 27, 
                "$InputSize" -> {27, 21}, "$OutputSize" -> {6, 6}, 
                "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> False], 
              "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{27, 27, 21}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{27, 6, 6}, NeuralNetworks`RealT]]], 
            "4" -> Association[
             "Type" -> "Convolution", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{83, 27, 2, 1}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{83}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputChannels" -> 83, "KernelSize" -> {2, 1}, 
                "Stride" -> {3, 4}, "PaddingSize" -> {21, 12}, 
                "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
                27, "$GroupNumber" -> 1, "$InputSize" -> {6, 6}, 
                "$OutputSize" -> {16, 8}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{27, 6, 6}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{83, 16, 8}, NeuralNetworks`RealT]]], 
            "5" -> Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association["Function" -> NeuralNetworks`ValidatedParameter[
                  NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                   NeuralNetworks`Private`ScalarSymbol[7], 
                   Association[
                   NeuralNetworks`Private`ScalarSymbol[2] -> {Plus, -1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[2], -1.}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    NeuralNetworks`Private`ScalarSymbol[4]}, 
                    NeuralNetworks`Private`ScalarSymbol[6] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[7] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[5], 
                    NeuralNetworks`Private`ScalarSymbol[6]}]]], 
                "$Dimensions" -> {83, 16, 8}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{83, 16, 8}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{83, 16, 8}, NeuralNetworks`RealT]]], 
            "6" -> Association[
             "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "KernelSize" -> {6, 2}, "Stride" -> {3, 14}, 
                "PaddingSize" -> {11, 9}, "Function" -> Mean, 
                "Dimensionality" -> 2, "Channels" -> 83, 
                "$InputSize" -> {16, 8}, "$OutputSize" -> {11, 2}, 
                "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> False], 
              "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{83, 16, 8}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{83, 11, 2}, NeuralNetworks`RealT]]], 
            "7" -> Association[
             "Type" -> "Flatten", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "Level" -> DirectedInfinity[1], "OutputSize" -> {1826}, 
                "$InputSize" -> {83, 11, 2}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{83, 11, 2}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{1826}, NeuralNetworks`RealT]]], "8" -> 
            Association[
             "Type" -> "Linear", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{574, 1826}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{574}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputDimensions" -> {574}, "$OutputSize" -> 574, 
                "$InputSize" -> 1826, "$InputDimensions" -> {1826}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{1826}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{574}, NeuralNetworks`RealT]]], "9" -> 
            Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association["Function" -> NeuralNetworks`ValidatedParameter[
                  NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                   NeuralNetworks`Private`ScalarSymbol[7], 
                   Association[
                   NeuralNetworks`Private`ScalarSymbol[2] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {
                    Times, 0.07326458803707481, 
                    NeuralNetworks`Private`ScalarSymbol[4]}, 
                    NeuralNetworks`Private`ScalarSymbol[6] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[5]}, 
                    NeuralNetworks`Private`ScalarSymbol[7] -> {Plus, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    NeuralNetworks`Private`ScalarSymbol[6]}]]], 
                "$Dimensions" -> {574}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{574}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{574}, NeuralNetworks`RealT]]], "10" -> 
            Association[
             "Type" -> "Linear", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{10, 574}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputDimensions" -> {10}, "$OutputSize" -> 10, "$InputSize" -> 
                574, "$InputDimensions" -> {574}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{574}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "11" -> 
            Association[
             "Type" -> "Softmax", "Arrays" -> Association[], "Parameters" -> 
              Association[], "Inputs" -> 
              Association[
               "Input" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]],
               "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
          "Edges" -> {
           NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Inputs", "Input"], 
            NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "10", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Outputs", "Output"] -> 
            NeuralNetworks`NetPath["Nodes", "11", "Outputs", "Output"]}, 
          "Inputs" -> Association["Input" -> NetEncoder["Image", 
              Association[
              "ImageSize" -> {28, 28}, "ColorSpace" -> "Grayscale", 
               "ColorChannels" -> 1, "MeanImage" -> None], 
              NeuralNetworks`TensorT[{1, 28, 28}, NeuralNetworks`RealT]]], 
          "Outputs" -> Association["Output" -> NetDecoder["Class", 
              Association[
              "Labels" -> {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, "Dimensions" -> 10], 
              NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
         NeuralNetworks`Private`NetChain`opart, 
         NeuralNetworks`Private`NetChain`part, 
         NeuralNetworks`Private`NetChain`selected = Null}, 
         DynamicBox[GridBox[{{
             NeuralNetworks`Private`NetChain`MouseClickBoxes[
              TagBox[
               GridBox[{{
                  TagBox[
                   TagBox[
                   "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                   "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1\"", "\"28\"", "\"28\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"27\"", "\"27\"", "\"21\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["ElementwiseLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"27\"", "\"27\"", "\"21\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"27\"", "\"6\"", "\"6\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"83\"", "\"16\"", "\"8\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["ElementwiseLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"83\"", "\"16\"", "\"8\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"83\"", "\"11\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1826\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"574\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["ElementwiseLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"574\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"11\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                   "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                   "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                   "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  ItemBox[
                   StyleBox["\"(uninitialized)\"", 
                    RGBColor[0.66, 0, 0], Small, StripOnInput -> False], 
                   Alignment -> Center, StripOnInput -> False], 
                  "\[SpanFromLeft]", "\[SpanFromLeft]"}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
              If[
               ListQ[
               NeuralNetworks`Private`NetChain`part = MouseAnnotation[]], 
               If[NeuralNetworks`Private`NetChain`opart === 
                 NeuralNetworks`Private`NetChain`part, 
                 NeuralNetworks`Private`NetChain`selected = Null; 
                 NeuralNetworks`Private`NetChain`opart = Null, 
                 NeuralNetworks`Private`NetChain`selected = 
                  Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                 NeuralNetworks`Private`NetChain`opart = 
                  NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
            NeuralNetworks`Private`NetChain`fmtSelected[
            NeuralNetworks`Private`NetChain`selected, 
             NeuralNetworks`Private`NetChain`part]}, 
           GridBoxSpacings -> {"Columns" -> {{1}}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}],
          ImageSizeCache->{365., {156., 164.}},
          TrackedSymbols:>{NeuralNetworks`Private`NetChain`selected}],
         Initialization:>{NetChain}],
        BaselinePosition->Automatic], "]"}]}],
     False],
    Deploy],
   LineBreakWithin->False]}, {21,"21"->
  StyleBox[
   TagBox[
    TagBox[
     RowBox[{"NetChain", 
      RowBox[{"[", 
       PanelBox[
        DynamicModuleBox[{NeuralNetworks`Private`NetChain`assoc3 = 
         Association[
         "Type" -> "Chain", "Nodes" -> 
          Association[
           "1" -> Association[
             "Type" -> "Convolution", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{44, 1, 3, 8}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{44}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputChannels" -> 44, "KernelSize" -> {3, 8}, 
                "Stride" -> {1, 1}, "PaddingSize" -> {15, 8}, 
                "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
                1, "$GroupNumber" -> 1, "$InputSize" -> {28, 28}, 
                "$OutputSize" -> {56, 37}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{1, 28, 28}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{44, 56, 37}, NeuralNetworks`RealT]]], 
            "2" -> Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                "$Dimensions" -> {44, 56, 37}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{44, 56, 37}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{44, 56, 37}, NeuralNetworks`RealT]]], 
            "3" -> Association[
             "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "KernelSize" -> {5, 10}, "Stride" -> {12, 8}, 
                "PaddingSize" -> {19, 8}, "Function" -> Max, "Dimensionality" -> 
                2, "Channels" -> 44, "$InputSize" -> {56, 37}, 
                "$OutputSize" -> {8, 6}, "$MXPoolingConvention" -> "valid", 
                "$MXGlobalPool" -> False], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{44, 56, 37}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{44, 8, 6}, NeuralNetworks`RealT]]], 
            "4" -> Association[
             "Type" -> "Convolution", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{92, 44, 5, 1}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{92}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputChannels" -> 92, "KernelSize" -> {5, 1}, 
                "Stride" -> {7, 6}, "PaddingSize" -> {25, 12}, 
                "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
                44, "$GroupNumber" -> 1, "$InputSize" -> {8, 6}, 
                "$OutputSize" -> {8, 5}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{44, 8, 6}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{92, 8, 5}, NeuralNetworks`RealT]]], 
            "5" -> Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                "$Dimensions" -> {92, 8, 5}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{92, 8, 5}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{92, 8, 5}, NeuralNetworks`RealT]]], 
            "6" -> Association[
             "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "KernelSize" -> {4, 4}, "Stride" -> {6, 18}, 
                "PaddingSize" -> {12, 10}, "Function" -> Mean, 
                "Dimensionality" -> 2, "Channels" -> 92, 
                "$InputSize" -> {8, 5}, "$OutputSize" -> {5, 2}, 
                "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> False], 
              "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{92, 8, 5}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{92, 5, 2}, NeuralNetworks`RealT]]], 
            "7" -> Association[
             "Type" -> "Flatten", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "Level" -> DirectedInfinity[1], "OutputSize" -> {920}, 
                "$InputSize" -> {92, 5, 2}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{92, 5, 2}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{920}, NeuralNetworks`RealT]]], "8" -> 
            Association[
             "Type" -> "Linear", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{594, 920}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{594}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputDimensions" -> {594}, "$OutputSize" -> 594, 
                "$InputSize" -> 920, "$InputDimensions" -> {920}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{920}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{594}, NeuralNetworks`RealT]]], "9" -> 
            Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "Function" -> 
                NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                "$Dimensions" -> {594}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{594}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{594}, NeuralNetworks`RealT]]], "10" -> 
            Association[
             "Type" -> "Linear", "Arrays" -> 
              Association[
               "Weights" -> 
                NeuralNetworks`TensorT[{10, 594}, NeuralNetworks`RealT], 
                "Biases" -> NeuralNetworks`Nullable[
                  NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], 
              "Parameters" -> 
              Association[
               "OutputDimensions" -> {10}, "$OutputSize" -> 10, "$InputSize" -> 
                594, "$InputDimensions" -> {594}], "Inputs" -> 
              Association[
               "Input" -> 
                NeuralNetworks`TensorT[{594}, NeuralNetworks`RealT]], 
              "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "11" -> 
            Association[
             "Type" -> "Softmax", "Arrays" -> Association[], "Parameters" -> 
              Association[], "Inputs" -> 
              Association[
               "Input" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]],
               "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
          "Edges" -> {
           NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Inputs", "Input"], 
            NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "10", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Outputs", "Output"] -> 
            NeuralNetworks`NetPath["Nodes", "11", "Outputs", "Output"]}, 
          "Inputs" -> Association["Input" -> NetEncoder["Image", 
              Association[
              "ImageSize" -> {28, 28}, "ColorSpace" -> "Grayscale", 
               "ColorChannels" -> 1, "MeanImage" -> None], 
              NeuralNetworks`TensorT[{1, 28, 28}, NeuralNetworks`RealT]]], 
          "Outputs" -> Association["Output" -> NetDecoder["Class", 
              Association[
              "Labels" -> {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, "Dimensions" -> 10], 
              NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
         NeuralNetworks`Private`NetChain`opart, 
         NeuralNetworks`Private`NetChain`part, 
         NeuralNetworks`Private`NetChain`selected = Null}, 
         DynamicBox[GridBox[{{
             NeuralNetworks`Private`NetChain`MouseClickBoxes[
              TagBox[
               GridBox[{{
                  TagBox[
                   TagBox[
                   "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                   "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1\"", "\"28\"", "\"28\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"44\"", "\"56\"", "\"37\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["Tanh", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"44\"", "\"56\"", "\"37\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"44\"", "\"8\"", "\"6\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"92\"", "\"8\"", "\"5\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"92\"", "\"8\"", "\"5\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"92\"", "\"5\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"920\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"594\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["LogisticSigmoid", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"594\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                    StyleBox["\"11\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  TagBox[
                   TagBox[
                   "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                   "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]], 
                  TagBox[
                   TagBox[
                   "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                   MouseAppearanceTag["LinkHand"]]}, {
                  ItemBox[
                   StyleBox["\"(uninitialized)\"", 
                    RGBColor[0.66, 0, 0], Small, StripOnInput -> False], 
                   Alignment -> Center, StripOnInput -> False], 
                  "\[SpanFromLeft]", "\[SpanFromLeft]"}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
              If[
               ListQ[
               NeuralNetworks`Private`NetChain`part = MouseAnnotation[]], 
               If[NeuralNetworks`Private`NetChain`opart === 
                 NeuralNetworks`Private`NetChain`part, 
                 NeuralNetworks`Private`NetChain`selected = Null; 
                 NeuralNetworks`Private`NetChain`opart = Null, 
                 NeuralNetworks`Private`NetChain`selected = 
                  Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                 NeuralNetworks`Private`NetChain`opart = 
                  NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
            NeuralNetworks`Private`NetChain`fmtSelected[
            NeuralNetworks`Private`NetChain`selected, 
             NeuralNetworks`Private`NetChain`part]}, 
           GridBoxSpacings -> {"Columns" -> {{1}}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}],
          ImageSizeCache->{363., {156., 164.}},
          TrackedSymbols:>{NeuralNetworks`Private`NetChain`selected}],
         Initialization:>{NetChain}],
        BaselinePosition->Automatic], "]"}]}],
     False],
    Deploy],
   LineBreakWithin->False]}}, 12]], "Output",ExpressionUUID->"5b59eb33-0883-\
4e93-ab36-a9ad7fe1652e"]
}, Open  ]],

Cell[CellGroupData[{

Cell["NetGraph", "Subsubsection",ExpressionUUID->"d6d871da-b5a9-4207-b1f2-e41e2582a4a4"],

Cell[BoxData[
 TabViewBox[{{1,"1"->
  StyleBox[
   TagBox[
    TagBox[
     RowBox[{"NetGraph", 
      RowBox[{"[", 
       PanelBox[
        DynamicModuleBox[{NeuralNetworks`Private`NetGraph`selection = None}, 
         DynamicBox[GridBox[
           Map[List, {
             ToBoxes[
              
              NeuralNetworks`Private`NetGraph`netLayerPlot[{{1, 2}, {2, 3}, {
               3, 4}, {2, 5}, {5, 6}, {4, 7}, {6, 7}, {8, 1}, {7, 9}}, 
               Dynamic[NeuralNetworks`Private`NetGraph`selection], False, {
               "squeeze1x1", "relu_squeeze1x1", "expand1x1", "relu_expand1x1",
                 "expand3x3", "relu_expand3x3", "concat", "Input", "Output"}, {
                Hue[0.61, 0.75, 1], 
                RGBColor[0.29, 0.29, 0.83], 
                RGBColor[1., 0.7, 0.31], Null}, {1, 2, 1, 2, 1, 2, 3, 4, 4}, {
               ConvolutionLayer, Ramp, CatenateLayer, Null}, {
                NeuralNetworks`TensorT[{16, 56, 56}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{16, 56, 56}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{64, 56, 56}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{16, 56, 56}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{64, 56, 56}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{64, 56, 56}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{64, 56, 56}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{64, 56, 56}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{128, 56, 56}, NeuralNetworks`RealT]}, 
               None]], 
             If[
              IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
              ItemBox[
               NeuralNetworks`Private`NetGraph`vpathInfo[
                Part[{
                  NeuralNetworks`NetPath["Nodes", "squeeze1x1"], 
                  NeuralNetworks`NetPath["Nodes", "relu_squeeze1x1"], 
                  NeuralNetworks`NetPath["Nodes", "expand1x1"], 
                  NeuralNetworks`NetPath["Nodes", "relu_expand1x1"], 
                  NeuralNetworks`NetPath["Nodes", "expand3x3"], 
                  NeuralNetworks`NetPath["Nodes", "relu_expand3x3"], 
                  NeuralNetworks`NetPath["Nodes", "concat"], 
                  NeuralNetworks`NetPath["Inputs", "Input"], 
                  NeuralNetworks`NetPath["Outputs", "Output"]}, 
                 NeuralNetworks`Private`NetGraph`selection], 
                Association[
                "Input" -> 
                 NeuralNetworks`TensorT[{64, 56, 56}, NeuralNetworks`RealT]], 
                
                Association[
                "Output" -> 
                 NeuralNetworks`TensorT[{128, 56, 56}, NeuralNetworks`RealT]], 
                Association[
                "squeeze1x1" -> 
                 Association[
                  "Type" -> "Convolution", "Arrays" -> 
                   Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{16, 64, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{16}]], 
                   "Parameters" -> 
                   Association[
                    "OutputChannels" -> 16, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {56, 56}], 
                   "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{16, 56, 56}, 
                    NeuralNetworks`RealT]]], "relu_squeeze1x1" -> 
                 Association[
                  "Type" -> "Elementwise", "Arrays" -> Association[], 
                   "Parameters" -> 
                   Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {16, 56, 56}], "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{16, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{16, 56, 56}, 
                    NeuralNetworks`RealT]]], "expand1x1" -> 
                 Association[
                  "Type" -> "Convolution", "Arrays" -> 
                   Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 16, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{64}]], 
                   "Parameters" -> 
                   Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 16, "$GroupNumber" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {56, 56}], 
                   "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{16, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "relu_expand1x1" -> 
                 Association[
                  "Type" -> "Elementwise", "Arrays" -> Association[], 
                   "Parameters" -> 
                   Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 56, 56}], "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "expand3x3" -> 
                 Association[
                  "Type" -> "Convolution", "Arrays" -> 
                   Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 16, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{64}]], 
                   "Parameters" -> 
                   Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 16, "$GroupNumber" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {56, 56}], 
                   "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{16, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "relu_expand3x3" -> 
                 Association[
                  "Type" -> "Elementwise", "Arrays" -> Association[], 
                   "Parameters" -> 
                   Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 56, 56}], "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "concat" -> 
                 Association[
                  "Type" -> "Catenate", "Arrays" -> Association[], 
                   "Parameters" -> Association["Level" -> 1, "$InputShapes" -> {
                    
                    NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]}, "$InputCount" -> 2, 
                    "$OutputShape" -> 
                    NeuralNetworks`TensorT[{128, 56, 56}, 
                    NeuralNetworks`RealT]], "Inputs" -> Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 56, 56}, 
                    NeuralNetworks`RealT]]]]], Alignment -> Center], 
              Nothing]}], GridBoxAlignment -> {"Columns" -> {{Left}}}],
          ImageSizeCache->{554., {95.5, 103.5}},
          TrackedSymbols:>{NeuralNetworks`Private`NetGraph`selection}],
         Initialization:>{NetGraph}],
        BaselinePosition->(Top -> Scaled[3])], "]"}]}],
     False],
    Deploy],
   LineBreakWithin->False]}, {2,"2"->
  StyleBox[
   TagBox[
    TagBox[
     RowBox[{"NetGraph", 
      RowBox[{"[", 
       PanelBox[
        DynamicModuleBox[{NeuralNetworks`Private`NetGraph`selection = None}, 
         DynamicBox[GridBox[
           Map[List, {
             ToBoxes[
              
              NeuralNetworks`Private`NetGraph`netLayerPlot[{{1, 2}, {2, 3}, {
               3, 4}, {4, 5}, {3, 6}, {6, 7}, {5, 8}, {7, 8}, {8, 9}}, 
               Dynamic[NeuralNetworks`Private`NetGraph`selection], False, {
               "Input", "squeeze1x1", "relu_squeeze1x1", "expand1x1", 
                "relu_expand1x1", "expand3x3", "relu_expand3x3", "concat", 
                "Output"}, {Null, 
                Hue[0.61, 0.75, 1], 
                RGBColor[0.29, 0.29, 0.83], 
                RGBColor[1., 0.7, 0.31]}, {1, 2, 3, 2, 3, 2, 3, 4, 1}, {
               Null, ConvolutionLayer, ElementwiseLayer, CatenateLayer}, {
                NeuralNetworks`TensorT[{64, 56, 56}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{24, 28, 16}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{24, 28, 16}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{62, 8, 4}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{24, 28, 16}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{60, 8, 4}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{62, 8, 4}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{60, 8, 4}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{122, 8, 4}, NeuralNetworks`RealT]}, {
               None, None, Tanh, None, Tanh, None, None, None, None}]], 
             If[
              IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
              ItemBox[
               NeuralNetworks`Private`NetGraph`vpathInfo[
                Part[{
                  NeuralNetworks`NetPath["Inputs", "Input"], 
                  NeuralNetworks`NetPath["Nodes", "squeeze1x1"], 
                  NeuralNetworks`NetPath["Nodes", "relu_squeeze1x1"], 
                  NeuralNetworks`NetPath["Nodes", "expand1x1"], 
                  NeuralNetworks`NetPath["Nodes", "relu_expand1x1"], 
                  NeuralNetworks`NetPath["Nodes", "expand3x3"], 
                  NeuralNetworks`NetPath["Nodes", "relu_expand3x3"], 
                  NeuralNetworks`NetPath["Nodes", "concat"], 
                  NeuralNetworks`NetPath["Outputs", "Output"]}, 
                 NeuralNetworks`Private`NetGraph`selection], 
                Association[
                "Input" -> 
                 NeuralNetworks`TensorT[{64, 56, 56}, NeuralNetworks`RealT]], 
                
                Association[
                "Output" -> 
                 NeuralNetworks`TensorT[{122, 8, 4}, NeuralNetworks`RealT]], 
                Association[
                "squeeze1x1" -> 
                 Association[
                  "Type" -> "Convolution", "Arrays" -> 
                   Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{24, 64, 4, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{24}, NeuralNetworks`RealT]]], 
                   "Parameters" -> 
                   Association[
                    "OutputChannels" -> 24, "KernelSize" -> {4, 3}, 
                    "Stride" -> {2, 4}, "PaddingSize" -> {1, 4}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {28, 16}], 
                   "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{24, 28, 16}, 
                    NeuralNetworks`RealT]]], "relu_squeeze1x1" -> 
                 Association[
                  "Type" -> "Elementwise", "Arrays" -> Association[], 
                   "Parameters" -> 
                   Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {24, 28, 16}], "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{24, 28, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{24, 28, 16}, 
                    NeuralNetworks`RealT]]], "expand1x1" -> 
                 Association[
                  "Type" -> "Convolution", "Arrays" -> 
                   Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{62, 24, 4, 2}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{62}, NeuralNetworks`RealT]]], 
                   "Parameters" -> 
                   Association[
                    "OutputChannels" -> 62, "KernelSize" -> {4, 2}, 
                    "Stride" -> {4, 5}, "PaddingSize" -> {3, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 24, "$GroupNumber" -> 1, 
                    "$InputSize" -> {28, 16}, "$OutputSize" -> {8, 4}], 
                   "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{24, 28, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{62, 8, 4}, 
                    NeuralNetworks`RealT]]], "relu_expand1x1" -> 
                 Association[
                  "Type" -> "Elementwise", "Arrays" -> Association[], 
                   "Parameters" -> 
                   Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {62, 8, 4}], "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{62, 8, 4}, NeuralNetworks`RealT]],
                    "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{62, 8, 4}, 
                    NeuralNetworks`RealT]]], "expand3x3" -> 
                 Association[
                  "Type" -> "Convolution", "Arrays" -> 
                   Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{60, 24, 3, 6}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{60}, NeuralNetworks`RealT]]], 
                   "Parameters" -> 
                   Association[
                    "OutputChannels" -> 60, "KernelSize" -> {3, 6}, 
                    "Stride" -> {4, 5}, "PaddingSize" -> {2, 3}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 24, "$GroupNumber" -> 1, 
                    "$InputSize" -> {28, 16}, "$OutputSize" -> {8, 4}], 
                   "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{24, 28, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{60, 8, 4}, 
                    NeuralNetworks`RealT]]], "relu_expand3x3" -> 
                 Association[
                  "Type" -> "Elementwise", "Arrays" -> Association[], 
                   "Parameters" -> 
                   Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[11], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[1], -1.}, 
                    NeuralNetworks`Private`ScalarSymbol[6] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    NeuralNetworks`Private`ScalarSymbol[5]}, 
                    NeuralNetworks`Private`ScalarSymbol[7] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[8] -> {Plus, -1., 
                    NeuralNetworks`Private`ScalarSymbol[7]}, 
                    NeuralNetworks`Private`ScalarSymbol[9] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[6], 
                    NeuralNetworks`Private`ScalarSymbol[8]}, 
                    NeuralNetworks`Private`ScalarSymbol[10] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[9]}, 
                    NeuralNetworks`Private`ScalarSymbol[11] -> {Plus, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    NeuralNetworks`Private`ScalarSymbol[10]}]]], 
                    "$Dimensions" -> {60, 8, 4}], "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{60, 8, 4}, NeuralNetworks`RealT]],
                    "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{60, 8, 4}, 
                    NeuralNetworks`RealT]]], "concat" -> 
                 Association[
                  "Type" -> "Catenate", "Arrays" -> Association[], 
                   "Parameters" -> Association["Level" -> 1, "$InputShapes" -> {
                    NeuralNetworks`TensorT[{62, 8, 4}, NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{60, 8, 4}, NeuralNetworks`RealT]},
                     "$InputCount" -> 2, "$OutputShape" -> 
                    NeuralNetworks`TensorT[{122, 8, 4}, 
                    NeuralNetworks`RealT]], "Inputs" -> Association["Input" -> {
                    NeuralNetworks`TensorT[{62, 8, 4}, NeuralNetworks`RealT], 
                    
                    
                    NeuralNetworks`TensorT[{60, 8, 4}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{122, 8, 4}, 
                    NeuralNetworks`RealT]]]]], Alignment -> Center], 
              Nothing]}], GridBoxAlignment -> {"Columns" -> {{Left}}}],
          ImageSizeCache->{554., {96.5, 104.5}},
          TrackedSymbols:>{NeuralNetworks`Private`NetGraph`selection}],
         Initialization:>{NetGraph}],
        BaselinePosition->(Top -> Scaled[3])], "]"}]}],
     False],
    Deploy],
   LineBreakWithin->False]}, {3,"3"->
  StyleBox[
   TagBox[
    TagBox[
     RowBox[{"NetGraph", 
      RowBox[{"[", 
       PanelBox[
        DynamicModuleBox[{NeuralNetworks`Private`NetGraph`selection = None}, 
         DynamicBox[GridBox[
           Map[List, {
             ToBoxes[
              
              NeuralNetworks`Private`NetGraph`netLayerPlot[{{1, 2}, {2, 3}, {
               3, 4}, {4, 5}, {3, 6}, {6, 7}, {5, 8}, {7, 8}, {8, 9}}, 
               Dynamic[NeuralNetworks`Private`NetGraph`selection], False, {
               "Input", "squeeze1x1", "relu_squeeze1x1", "expand1x1", 
                "relu_expand1x1", "expand3x3", "relu_expand3x3", "concat", 
                "Output"}, {Null, 
                Hue[0.61, 0.75, 1], 
                RGBColor[0.29, 0.29, 0.83], 
                RGBColor[1., 0.7, 0.31]}, {1, 2, 3, 2, 3, 2, 3, 4, 1}, {
               Null, ConvolutionLayer, ElementwiseLayer, CatenateLayer}, {
                NeuralNetworks`TensorT[{64, 56, 56}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{27, 12, 14}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{27, 12, 14}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{81, 2, 2}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{27, 12, 14}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{45, 2, 2}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{81, 2, 2}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{45, 2, 2}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{126, 2, 2}, NeuralNetworks`RealT]}, {
               None, None, Ramp, None, None, None, LogisticSigmoid, None, 
                None}]], 
             If[
              IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
              ItemBox[
               NeuralNetworks`Private`NetGraph`vpathInfo[
                Part[{
                  NeuralNetworks`NetPath["Inputs", "Input"], 
                  NeuralNetworks`NetPath["Nodes", "squeeze1x1"], 
                  NeuralNetworks`NetPath["Nodes", "relu_squeeze1x1"], 
                  NeuralNetworks`NetPath["Nodes", "expand1x1"], 
                  NeuralNetworks`NetPath["Nodes", "relu_expand1x1"], 
                  NeuralNetworks`NetPath["Nodes", "expand3x3"], 
                  NeuralNetworks`NetPath["Nodes", "relu_expand3x3"], 
                  NeuralNetworks`NetPath["Nodes", "concat"], 
                  NeuralNetworks`NetPath["Outputs", "Output"]}, 
                 NeuralNetworks`Private`NetGraph`selection], 
                Association[
                "Input" -> 
                 NeuralNetworks`TensorT[{64, 56, 56}, NeuralNetworks`RealT]], 
                
                Association[
                "Output" -> 
                 NeuralNetworks`TensorT[{126, 2, 2}, NeuralNetworks`RealT]], 
                Association[
                "squeeze1x1" -> 
                 Association[
                  "Type" -> "Convolution", "Arrays" -> 
                   Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{27, 64, 1, 5}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{27}, NeuralNetworks`RealT]]], 
                   "Parameters" -> 
                   Association[
                    "OutputChannels" -> 27, "KernelSize" -> {1, 5}, 
                    "Stride" -> {5, 5}, "PaddingSize" -> {1, 7}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {12, 14}], 
                   "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{27, 12, 14}, 
                    NeuralNetworks`RealT]]], "relu_squeeze1x1" -> 
                 Association[
                  "Type" -> "Elementwise", "Arrays" -> Association[], 
                   "Parameters" -> 
                   Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {27, 12, 14}], "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{27, 12, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{27, 12, 14}, 
                    NeuralNetworks`RealT]]], "expand1x1" -> 
                 Association[
                  "Type" -> "Convolution", "Arrays" -> 
                   Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{81, 27, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{81}, NeuralNetworks`RealT]]], 
                   "Parameters" -> 
                   Association[
                    "OutputChannels" -> 81, "KernelSize" -> {3, 3}, 
                    "Stride" -> {6, 9}, "PaddingSize" -> {0, 3}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 27, "$GroupNumber" -> 1, 
                    "$InputSize" -> {12, 14}, "$OutputSize" -> {2, 2}], 
                   "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{27, 12, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{81, 2, 2}, 
                    NeuralNetworks`RealT]]], "relu_expand1x1" -> 
                 Association[
                  "Type" -> "Elementwise", "Arrays" -> Association[], 
                   "Parameters" -> 
                   Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[7], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {
                    Times, 0.44788626069001647`, 
                    NeuralNetworks`Private`ScalarSymbol[4]}, 
                    NeuralNetworks`Private`ScalarSymbol[6] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[5]}, 
                    NeuralNetworks`Private`ScalarSymbol[7] -> {Plus, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    NeuralNetworks`Private`ScalarSymbol[6]}]]], 
                    "$Dimensions" -> {81, 2, 2}], "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{81, 2, 2}, NeuralNetworks`RealT]],
                    "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{81, 2, 2}, 
                    NeuralNetworks`RealT]]], "expand3x3" -> 
                 Association[
                  "Type" -> "Convolution", "Arrays" -> 
                   Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{45, 27, 1, 7}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{45}, NeuralNetworks`RealT]]], 
                   "Parameters" -> 
                   Association[
                    "OutputChannels" -> 45, "KernelSize" -> {1, 7}, 
                    "Stride" -> {8, 8}, "PaddingSize" -> {2, 2}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 27, "$GroupNumber" -> 1, 
                    "$InputSize" -> {12, 14}, "$OutputSize" -> {2, 2}], 
                   "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{27, 12, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{45, 2, 2}, 
                    NeuralNetworks`RealT]]], "relu_expand3x3" -> 
                 Association[
                  "Type" -> "Elementwise", "Arrays" -> Association[], 
                   "Parameters" -> 
                   Association[
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {45, 2, 2}], "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{45, 2, 2}, NeuralNetworks`RealT]],
                    "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{45, 2, 2}, 
                    NeuralNetworks`RealT]]], "concat" -> 
                 Association[
                  "Type" -> "Catenate", "Arrays" -> Association[], 
                   "Parameters" -> Association["Level" -> 1, "$InputShapes" -> {
                    NeuralNetworks`TensorT[{81, 2, 2}, NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{45, 2, 2}, NeuralNetworks`RealT]},
                     "$InputCount" -> 2, "$OutputShape" -> 
                    NeuralNetworks`TensorT[{126, 2, 2}, 
                    NeuralNetworks`RealT]], "Inputs" -> Association["Input" -> {
                    NeuralNetworks`TensorT[{81, 2, 2}, NeuralNetworks`RealT], 
                    
                    
                    NeuralNetworks`TensorT[{45, 2, 2}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{126, 2, 2}, 
                    NeuralNetworks`RealT]]]]], Alignment -> Center], 
              Nothing]}], GridBoxAlignment -> {"Columns" -> {{Left}}}],
          ImageSizeCache->{554., {96.5, 104.5}},
          TrackedSymbols:>{NeuralNetworks`Private`NetGraph`selection}],
         Initialization:>{NetGraph}],
        BaselinePosition->(Top -> Scaled[3])], "]"}]}],
     False],
    Deploy],
   LineBreakWithin->False]}, {4,"4"->
  StyleBox[
   TagBox[
    TagBox[
     RowBox[{"NetGraph", 
      RowBox[{"[", 
       PanelBox[
        DynamicModuleBox[{NeuralNetworks`Private`NetGraph`selection = None}, 
         DynamicBox[GridBox[
           Map[List, {
             ToBoxes[
              
              NeuralNetworks`Private`NetGraph`netLayerPlot[{{1, 2}, {2, 3}, {
               3, 4}, {4, 5}, {3, 6}, {6, 7}, {5, 8}, {7, 8}, {8, 9}}, 
               Dynamic[NeuralNetworks`Private`NetGraph`selection], False, {
               "Input", "squeeze1x1", "relu_squeeze1x1", "expand1x1", 
                "relu_expand1x1", "expand3x3", "relu_expand3x3", "concat", 
                "Output"}, {Null, 
                Hue[0.61, 0.75, 1], 
                RGBColor[0.29, 0.29, 0.83], 
                RGBColor[1., 0.7, 0.31]}, {1, 2, 3, 2, 3, 2, 3, 4, 1}, {
               Null, ConvolutionLayer, ElementwiseLayer, CatenateLayer}, {
                NeuralNetworks`TensorT[{64, 56, 56}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{33, 55, 36}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{33, 55, 36}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{64, 6, 4}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{33, 55, 36}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{33, 6, 4}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{64, 6, 4}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{33, 6, 4}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{97, 6, 4}, NeuralNetworks`RealT]}, 
               None]], 
             If[
              IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
              ItemBox[
               NeuralNetworks`Private`NetGraph`vpathInfo[
                Part[{
                  NeuralNetworks`NetPath["Inputs", "Input"], 
                  NeuralNetworks`NetPath["Nodes", "squeeze1x1"], 
                  NeuralNetworks`NetPath["Nodes", "relu_squeeze1x1"], 
                  NeuralNetworks`NetPath["Nodes", "expand1x1"], 
                  NeuralNetworks`NetPath["Nodes", "relu_expand1x1"], 
                  NeuralNetworks`NetPath["Nodes", "expand3x3"], 
                  NeuralNetworks`NetPath["Nodes", "relu_expand3x3"], 
                  NeuralNetworks`NetPath["Nodes", "concat"], 
                  NeuralNetworks`NetPath["Outputs", "Output"]}, 
                 NeuralNetworks`Private`NetGraph`selection], 
                Association[
                "Input" -> 
                 NeuralNetworks`TensorT[{64, 56, 56}, NeuralNetworks`RealT]], 
                
                Association[
                "Output" -> 
                 NeuralNetworks`TensorT[{97, 6, 4}, NeuralNetworks`RealT]], 
                Association[
                "squeeze1x1" -> 
                 Association[
                  "Type" -> "Convolution", "Arrays" -> 
                   Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{33, 64, 2, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{33}, NeuralNetworks`RealT]]], 
                   "Parameters" -> 
                   Association[
                    "OutputChannels" -> 33, "KernelSize" -> {2, 3}, 
                    "Stride" -> {1, 2}, "PaddingSize" -> {0, 9}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {55, 36}], 
                   "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{33, 55, 36}, 
                    NeuralNetworks`RealT]]], "relu_squeeze1x1" -> 
                 Association[
                  "Type" -> "Elementwise", "Arrays" -> Association[], 
                   "Parameters" -> 
                   Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[7], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Plus, -1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[2], -1.}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    NeuralNetworks`Private`ScalarSymbol[4]}, 
                    NeuralNetworks`Private`ScalarSymbol[6] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[7] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[5], 
                    NeuralNetworks`Private`ScalarSymbol[6]}]]], 
                    "$Dimensions" -> {33, 55, 36}], "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{33, 55, 36}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{33, 55, 36}, 
                    NeuralNetworks`RealT]]], "expand1x1" -> 
                 Association[
                  "Type" -> "Convolution", "Arrays" -> 
                   Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 33, 5, 4}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]], 
                   "Parameters" -> 
                   Association[
                    "OutputChannels" -> 64, "KernelSize" -> {5, 4}, 
                    "Stride" -> {9, 13}, "PaddingSize" -> {1, 4}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 33, "$GroupNumber" -> 1, 
                    "$InputSize" -> {55, 36}, "$OutputSize" -> {6, 4}], 
                   "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{33, 55, 36}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 6, 4}, 
                    NeuralNetworks`RealT]]], "relu_expand1x1" -> 
                 Association[
                  "Type" -> "Elementwise", "Arrays" -> Association[], 
                   "Parameters" -> 
                   Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[7], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Plus, -1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[2], -1.}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    NeuralNetworks`Private`ScalarSymbol[4]}, 
                    NeuralNetworks`Private`ScalarSymbol[6] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[7] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[5], 
                    NeuralNetworks`Private`ScalarSymbol[6]}]]], 
                    "$Dimensions" -> {64, 6, 4}], "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 6, 4}, NeuralNetworks`RealT]],
                    "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 6, 4}, 
                    NeuralNetworks`RealT]]], "expand3x3" -> 
                 Association[
                  "Type" -> "Convolution", "Arrays" -> 
                   Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{33, 33, 4, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{33}, NeuralNetworks`RealT]]], 
                   "Parameters" -> 
                   Association[
                    "OutputChannels" -> 33, "KernelSize" -> {4, 3}, 
                    "Stride" -> {11, 11}, "PaddingSize" -> {5, 4}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 33, "$GroupNumber" -> 1, 
                    "$InputSize" -> {55, 36}, "$OutputSize" -> {6, 4}], 
                   "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{33, 55, 36}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{33, 6, 4}, 
                    NeuralNetworks`RealT]]], "relu_expand3x3" -> 
                 Association[
                  "Type" -> "Elementwise", "Arrays" -> Association[], 
                   "Parameters" -> 
                   Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[7], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {
                    Times, 0.1832652153534423, 
                    NeuralNetworks`Private`ScalarSymbol[4]}, 
                    NeuralNetworks`Private`ScalarSymbol[6] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[5]}, 
                    NeuralNetworks`Private`ScalarSymbol[7] -> {Plus, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    NeuralNetworks`Private`ScalarSymbol[6]}]]], 
                    "$Dimensions" -> {33, 6, 4}], "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{33, 6, 4}, NeuralNetworks`RealT]],
                    "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{33, 6, 4}, 
                    NeuralNetworks`RealT]]], "concat" -> 
                 Association[
                  "Type" -> "Catenate", "Arrays" -> Association[], 
                   "Parameters" -> Association["Level" -> 1, "$InputShapes" -> {
                    NeuralNetworks`TensorT[{64, 6, 4}, NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{33, 6, 4}, NeuralNetworks`RealT]},
                     "$InputCount" -> 2, "$OutputShape" -> 
                    NeuralNetworks`TensorT[{97, 6, 4}, NeuralNetworks`RealT]],
                    "Inputs" -> Association["Input" -> {
                    NeuralNetworks`TensorT[{64, 6, 4}, NeuralNetworks`RealT], 
                    
                    
                    NeuralNetworks`TensorT[{33, 6, 4}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{97, 6, 4}, 
                    NeuralNetworks`RealT]]]]], Alignment -> Center], 
              Nothing]}], GridBoxAlignment -> {"Columns" -> {{Left}}}],
          ImageSizeCache->{554., {95.5, 103.5}},
          TrackedSymbols:>{NeuralNetworks`Private`NetGraph`selection}],
         Initialization:>{NetGraph}],
        BaselinePosition->(Top -> Scaled[3])], "]"}]}],
     False],
    Deploy],
   LineBreakWithin->False]}, {5,"5"->
  StyleBox[
   TagBox[
    TagBox[
     RowBox[{"NetGraph", 
      RowBox[{"[", 
       PanelBox[
        DynamicModuleBox[{NeuralNetworks`Private`NetGraph`selection = None}, 
         DynamicBox[GridBox[
           Map[List, {
             ToBoxes[
              
              NeuralNetworks`Private`NetGraph`netLayerPlot[{{1, 2}, {2, 3}, {
               3, 4}, {4, 5}, {3, 6}, {6, 7}, {5, 8}, {7, 8}, {8, 9}}, 
               Dynamic[NeuralNetworks`Private`NetGraph`selection], False, {
               "Input", "squeeze1x1", "relu_squeeze1x1", "expand1x1", 
                "relu_expand1x1", "expand3x3", "relu_expand3x3", "concat", 
                "Output"}, {Null, 
                Hue[0.61, 0.75, 1], 
                RGBColor[0.29, 0.29, 0.83], 
                RGBColor[1., 0.7, 0.31]}, {1, 2, 3, 2, 3, 2, 3, 4, 1}, {
               Null, ConvolutionLayer, ElementwiseLayer, CatenateLayer}, {
                NeuralNetworks`TensorT[{64, 56, 56}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{14, 21, 34}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{14, 21, 34}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{63, 3, 3}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{14, 21, 34}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{52, 3, 3}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{63, 3, 3}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{52, 3, 3}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{115, 3, 3}, NeuralNetworks`RealT]}, {
               None, None, Tanh, None, Ramp, None, Ramp, None, None}]], 
             If[
              IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
              ItemBox[
               NeuralNetworks`Private`NetGraph`vpathInfo[
                Part[{
                  NeuralNetworks`NetPath["Inputs", "Input"], 
                  NeuralNetworks`NetPath["Nodes", "squeeze1x1"], 
                  NeuralNetworks`NetPath["Nodes", "relu_squeeze1x1"], 
                  NeuralNetworks`NetPath["Nodes", "expand1x1"], 
                  NeuralNetworks`NetPath["Nodes", "relu_expand1x1"], 
                  NeuralNetworks`NetPath["Nodes", "expand3x3"], 
                  NeuralNetworks`NetPath["Nodes", "relu_expand3x3"], 
                  NeuralNetworks`NetPath["Nodes", "concat"], 
                  NeuralNetworks`NetPath["Outputs", "Output"]}, 
                 NeuralNetworks`Private`NetGraph`selection], 
                Association[
                "Input" -> 
                 NeuralNetworks`TensorT[{64, 56, 56}, NeuralNetworks`RealT]], 
                
                Association[
                "Output" -> 
                 NeuralNetworks`TensorT[{115, 3, 3}, NeuralNetworks`RealT]], 
                Association[
                "squeeze1x1" -> 
                 Association[
                  "Type" -> "Convolution", "Arrays" -> 
                   Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{14, 64, 3, 7}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{14}, NeuralNetworks`RealT]]], 
                   "Parameters" -> 
                   Association[
                    "OutputChannels" -> 14, "KernelSize" -> {3, 7}, 
                    "Stride" -> {3, 2}, "PaddingSize" -> {4, 9}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {21, 34}], 
                   "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{14, 21, 34}, 
                    NeuralNetworks`RealT]]], "relu_squeeze1x1" -> 
                 Association[
                  "Type" -> "Elementwise", "Arrays" -> Association[], 
                   "Parameters" -> 
                   Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {14, 21, 34}], "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{14, 21, 34}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{14, 21, 34}, 
                    NeuralNetworks`RealT]]], "expand1x1" -> 
                 Association[
                  "Type" -> "Convolution", "Arrays" -> 
                   Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{63, 14, 8, 8}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{63}, NeuralNetworks`RealT]]], 
                   "Parameters" -> 
                   Association[
                    "OutputChannels" -> 63, "KernelSize" -> {8, 8}, 
                    "Stride" -> {6, 16}, "PaddingSize" -> {1, 3}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 14, "$GroupNumber" -> 1, 
                    "$InputSize" -> {21, 34}, "$OutputSize" -> {3, 3}], 
                   "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{14, 21, 34}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{63, 3, 3}, 
                    NeuralNetworks`RealT]]], "relu_expand1x1" -> 
                 Association[
                  "Type" -> "Elementwise", "Arrays" -> Association[], 
                   "Parameters" -> 
                   Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {63, 3, 3}], "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{63, 3, 3}, NeuralNetworks`RealT]],
                    "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{63, 3, 3}, 
                    NeuralNetworks`RealT]]], "expand3x3" -> 
                 Association[
                  "Type" -> "Convolution", "Arrays" -> 
                   Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{52, 14, 7, 7}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{52}, NeuralNetworks`RealT]]], 
                   "Parameters" -> 
                   Association[
                    "OutputChannels" -> 52, "KernelSize" -> {7, 7}, 
                    "Stride" -> {10, 13}, "PaddingSize" -> {5, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 14, "$GroupNumber" -> 1, 
                    "$InputSize" -> {21, 34}, "$OutputSize" -> {3, 3}], 
                   "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{14, 21, 34}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{52, 3, 3}, 
                    NeuralNetworks`RealT]]], "relu_expand3x3" -> 
                 Association[
                  "Type" -> "Elementwise", "Arrays" -> Association[], 
                   "Parameters" -> 
                   Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {52, 3, 3}], "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{52, 3, 3}, NeuralNetworks`RealT]],
                    "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{52, 3, 3}, 
                    NeuralNetworks`RealT]]], "concat" -> 
                 Association[
                  "Type" -> "Catenate", "Arrays" -> Association[], 
                   "Parameters" -> Association["Level" -> 1, "$InputShapes" -> {
                    NeuralNetworks`TensorT[{63, 3, 3}, NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{52, 3, 3}, NeuralNetworks`RealT]},
                     "$InputCount" -> 2, "$OutputShape" -> 
                    NeuralNetworks`TensorT[{115, 3, 3}, 
                    NeuralNetworks`RealT]], "Inputs" -> Association["Input" -> {
                    NeuralNetworks`TensorT[{63, 3, 3}, NeuralNetworks`RealT], 
                    
                    
                    NeuralNetworks`TensorT[{52, 3, 3}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{115, 3, 3}, 
                    NeuralNetworks`RealT]]]]], Alignment -> Center], 
              Nothing]}], GridBoxAlignment -> {"Columns" -> {{Left}}}],
          ImageSizeCache->{554., {96.5, 104.5}},
          TrackedSymbols:>{NeuralNetworks`Private`NetGraph`selection}],
         Initialization:>{NetGraph}],
        BaselinePosition->(Top -> Scaled[3])], "]"}]}],
     False],
    Deploy],
   LineBreakWithin->False]}, {6,"6"->
  StyleBox[
   TagBox[
    TagBox[
     RowBox[{"NetGraph", 
      RowBox[{"[", 
       PanelBox[
        DynamicModuleBox[{NeuralNetworks`Private`NetGraph`selection = None}, 
         DynamicBox[GridBox[
           Map[List, {
             ToBoxes[
              
              NeuralNetworks`Private`NetGraph`netLayerPlot[{{1, 2}, {2, 3}, {
               3, 4}, {4, 5}, {3, 6}, {6, 7}, {5, 8}, {7, 8}, {8, 9}}, 
               Dynamic[NeuralNetworks`Private`NetGraph`selection], False, {
               "Input", "squeeze1x1", "relu_squeeze1x1", "expand1x1", 
                "relu_expand1x1", "expand3x3", "relu_expand3x3", "concat", 
                "Output"}, {Null, 
                Hue[0.61, 0.75, 1], 
                RGBColor[0.29, 0.29, 0.83], 
                RGBColor[1., 0.7, 0.31]}, {1, 2, 3, 2, 3, 2, 3, 4, 1}, {
               Null, ConvolutionLayer, ElementwiseLayer, CatenateLayer}, {
                NeuralNetworks`TensorT[{64, 56, 56}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{9, 12, 13}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{9, 12, 13}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{58, 2, 2}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{9, 12, 13}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{39, 2, 2}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{58, 2, 2}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{39, 2, 2}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{97, 2, 2}, NeuralNetworks`RealT]}, {
               None, None, Tanh, None, LogisticSigmoid, None, LogisticSigmoid,
                 None, None}]], 
             If[
              IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
              ItemBox[
               NeuralNetworks`Private`NetGraph`vpathInfo[
                Part[{
                  NeuralNetworks`NetPath["Inputs", "Input"], 
                  NeuralNetworks`NetPath["Nodes", "squeeze1x1"], 
                  NeuralNetworks`NetPath["Nodes", "relu_squeeze1x1"], 
                  NeuralNetworks`NetPath["Nodes", "expand1x1"], 
                  NeuralNetworks`NetPath["Nodes", "relu_expand1x1"], 
                  NeuralNetworks`NetPath["Nodes", "expand3x3"], 
                  NeuralNetworks`NetPath["Nodes", "relu_expand3x3"], 
                  NeuralNetworks`NetPath["Nodes", "concat"], 
                  NeuralNetworks`NetPath["Outputs", "Output"]}, 
                 NeuralNetworks`Private`NetGraph`selection], 
                Association[
                "Input" -> 
                 NeuralNetworks`TensorT[{64, 56, 56}, NeuralNetworks`RealT]], 
                
                Association[
                "Output" -> 
                 NeuralNetworks`TensorT[{97, 2, 2}, NeuralNetworks`RealT]], 
                Association[
                "squeeze1x1" -> 
                 Association[
                  "Type" -> "Convolution", "Arrays" -> 
                   Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{9, 64, 4, 6}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{9}, NeuralNetworks`RealT]]], 
                   "Parameters" -> 
                   Association[
                    "OutputChannels" -> 9, "KernelSize" -> {4, 6}, 
                    "Stride" -> {6, 5}, "PaddingSize" -> {8, 5}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {12, 13}], 
                   "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{9, 12, 13}, 
                    NeuralNetworks`RealT]]], "relu_squeeze1x1" -> 
                 Association[
                  "Type" -> "Elementwise", "Arrays" -> Association[], 
                   "Parameters" -> 
                   Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {9, 12, 13}], "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{9, 12, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{9, 12, 13}, 
                    NeuralNetworks`RealT]]], "expand1x1" -> 
                 Association[
                  "Type" -> "Convolution", "Arrays" -> 
                   Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{58, 9, 7, 7}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{58}, NeuralNetworks`RealT]]], 
                   "Parameters" -> 
                   Association[
                    "OutputChannels" -> 58, "KernelSize" -> {7, 7}, 
                    "Stride" -> {9, 13}, "PaddingSize" -> {2, 7}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 9, "$GroupNumber" -> 1, 
                    "$InputSize" -> {12, 13}, "$OutputSize" -> {2, 2}], 
                   "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{9, 12, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{58, 2, 2}, 
                    NeuralNetworks`RealT]]], "relu_expand1x1" -> 
                 Association[
                  "Type" -> "Elementwise", "Arrays" -> Association[], 
                   "Parameters" -> 
                   Association[
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {58, 2, 2}], "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{58, 2, 2}, NeuralNetworks`RealT]],
                    "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{58, 2, 2}, 
                    NeuralNetworks`RealT]]], "expand3x3" -> 
                 Association[
                  "Type" -> "Convolution", "Arrays" -> 
                   Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{39, 9, 5, 11}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{39}, NeuralNetworks`RealT]]], 
                   "Parameters" -> 
                   Association[
                    "OutputChannels" -> 39, "KernelSize" -> {5, 11}, 
                    "Stride" -> {14, 9}, "PaddingSize" -> {7, 5}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 9, "$GroupNumber" -> 1, 
                    "$InputSize" -> {12, 13}, "$OutputSize" -> {2, 2}], 
                   "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{9, 12, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{39, 2, 2}, 
                    NeuralNetworks`RealT]]], "relu_expand3x3" -> 
                 Association[
                  "Type" -> "Elementwise", "Arrays" -> Association[], 
                   "Parameters" -> 
                   Association[
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {39, 2, 2}], "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{39, 2, 2}, NeuralNetworks`RealT]],
                    "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{39, 2, 2}, 
                    NeuralNetworks`RealT]]], "concat" -> 
                 Association[
                  "Type" -> "Catenate", "Arrays" -> Association[], 
                   "Parameters" -> Association["Level" -> 1, "$InputShapes" -> {
                    NeuralNetworks`TensorT[{58, 2, 2}, NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{39, 2, 2}, NeuralNetworks`RealT]},
                     "$InputCount" -> 2, "$OutputShape" -> 
                    NeuralNetworks`TensorT[{97, 2, 2}, NeuralNetworks`RealT]],
                    "Inputs" -> Association["Input" -> {
                    NeuralNetworks`TensorT[{58, 2, 2}, NeuralNetworks`RealT], 
                    
                    
                    NeuralNetworks`TensorT[{39, 2, 2}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{97, 2, 2}, 
                    NeuralNetworks`RealT]]]]], Alignment -> Center], 
              Nothing]}], GridBoxAlignment -> {"Columns" -> {{Left}}}],
          ImageSizeCache->{554., {96.5, 104.5}},
          TrackedSymbols:>{NeuralNetworks`Private`NetGraph`selection}],
         Initialization:>{NetGraph}],
        BaselinePosition->(Top -> Scaled[3])], "]"}]}],
     False],
    Deploy],
   LineBreakWithin->False]}, {7,"7"->
  StyleBox[
   TagBox[
    TagBox[
     RowBox[{"NetGraph", 
      RowBox[{"[", 
       PanelBox[
        DynamicModuleBox[{NeuralNetworks`Private`NetGraph`selection = None}, 
         DynamicBox[GridBox[
           Map[List, {
             ToBoxes[
              
              NeuralNetworks`Private`NetGraph`netLayerPlot[{{1, 2}, {2, 3}, {
               3, 4}, {4, 5}, {3, 6}, {6, 7}, {5, 8}, {7, 8}, {8, 9}}, 
               Dynamic[NeuralNetworks`Private`NetGraph`selection], False, {
               "Input", "squeeze1x1", "relu_squeeze1x1", "expand1x1", 
                "relu_expand1x1", "expand3x3", "relu_expand3x3", "concat", 
                "Output"}, {Null, 
                Hue[0.61, 0.75, 1], 
                RGBColor[0.29, 0.29, 0.83], 
                RGBColor[1., 0.7, 0.31]}, {1, 2, 3, 2, 3, 2, 3, 4, 1}, {
               Null, ConvolutionLayer, ElementwiseLayer, CatenateLayer}, {
                NeuralNetworks`TensorT[{64, 56, 56}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{11, 16, 13}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{11, 16, 13}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{77, 2, 2}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{11, 16, 13}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{53, 2, 2}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{77, 2, 2}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{53, 2, 2}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{130, 2, 2}, NeuralNetworks`RealT]}, {
               None, None, None, None, Ramp, None, None, None, None}]], 
             If[
              IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
              ItemBox[
               NeuralNetworks`Private`NetGraph`vpathInfo[
                Part[{
                  NeuralNetworks`NetPath["Inputs", "Input"], 
                  NeuralNetworks`NetPath["Nodes", "squeeze1x1"], 
                  NeuralNetworks`NetPath["Nodes", "relu_squeeze1x1"], 
                  NeuralNetworks`NetPath["Nodes", "expand1x1"], 
                  NeuralNetworks`NetPath["Nodes", "relu_expand1x1"], 
                  NeuralNetworks`NetPath["Nodes", "expand3x3"], 
                  NeuralNetworks`NetPath["Nodes", "relu_expand3x3"], 
                  NeuralNetworks`NetPath["Nodes", "concat"], 
                  NeuralNetworks`NetPath["Outputs", "Output"]}, 
                 NeuralNetworks`Private`NetGraph`selection], 
                Association[
                "Input" -> 
                 NeuralNetworks`TensorT[{64, 56, 56}, NeuralNetworks`RealT]], 
                
                Association[
                "Output" -> 
                 NeuralNetworks`TensorT[{130, 2, 2}, NeuralNetworks`RealT]], 
                Association[
                "squeeze1x1" -> 
                 Association[
                  "Type" -> "Convolution", "Arrays" -> 
                   Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{11, 64, 1, 9}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT]]], 
                   "Parameters" -> 
                   Association[
                    "OutputChannels" -> 11, "KernelSize" -> {1, 9}, 
                    "Stride" -> {5, 4}, "PaddingSize" -> {11, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {16, 13}], 
                   "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{11, 16, 13}, 
                    NeuralNetworks`RealT]]], "relu_squeeze1x1" -> 
                 Association[
                  "Type" -> "Elementwise", "Arrays" -> Association[], 
                   "Parameters" -> 
                   Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[7], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Plus, -1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[2], -1.}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    NeuralNetworks`Private`ScalarSymbol[4]}, 
                    NeuralNetworks`Private`ScalarSymbol[6] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[7] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[5], 
                    NeuralNetworks`Private`ScalarSymbol[6]}]]], 
                    "$Dimensions" -> {11, 16, 13}], "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{11, 16, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{11, 16, 13}, 
                    NeuralNetworks`RealT]]], "expand1x1" -> 
                 Association[
                  "Type" -> "Convolution", "Arrays" -> 
                   Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{77, 11, 10, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{77}, NeuralNetworks`RealT]]], 
                   "Parameters" -> 
                   Association[
                    "OutputChannels" -> 77, "KernelSize" -> {10, 3}, 
                    "Stride" -> {12, 13}, "PaddingSize" -> {3, 3}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 11, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 13}, "$OutputSize" -> {2, 2}], 
                   "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{11, 16, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{77, 2, 2}, 
                    NeuralNetworks`RealT]]], "relu_expand1x1" -> 
                 Association[
                  "Type" -> "Elementwise", "Arrays" -> Association[], 
                   "Parameters" -> 
                   Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {77, 2, 2}], "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{77, 2, 2}, NeuralNetworks`RealT]],
                    "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{77, 2, 2}, 
                    NeuralNetworks`RealT]]], "expand3x3" -> 
                 Association[
                  "Type" -> "Convolution", "Arrays" -> 
                   Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{53, 11, 7, 11}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{53}, NeuralNetworks`RealT]]], 
                   "Parameters" -> 
                   Association[
                    "OutputChannels" -> 53, "KernelSize" -> {7, 11}, 
                    "Stride" -> {14, 6}, "PaddingSize" -> {6, 4}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 11, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 13}, "$OutputSize" -> {2, 2}], 
                   "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{11, 16, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{53, 2, 2}, 
                    NeuralNetworks`RealT]]], "relu_expand3x3" -> 
                 Association[
                  "Type" -> "Elementwise", "Arrays" -> Association[], 
                   "Parameters" -> 
                   Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[11], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[1], -1.}, 
                    NeuralNetworks`Private`ScalarSymbol[6] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    NeuralNetworks`Private`ScalarSymbol[5]}, 
                    NeuralNetworks`Private`ScalarSymbol[7] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[8] -> {Plus, -1., 
                    NeuralNetworks`Private`ScalarSymbol[7]}, 
                    NeuralNetworks`Private`ScalarSymbol[9] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[6], 
                    NeuralNetworks`Private`ScalarSymbol[8]}, 
                    NeuralNetworks`Private`ScalarSymbol[10] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[9]}, 
                    NeuralNetworks`Private`ScalarSymbol[11] -> {Plus, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    NeuralNetworks`Private`ScalarSymbol[10]}]]], 
                    "$Dimensions" -> {53, 2, 2}], "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{53, 2, 2}, NeuralNetworks`RealT]],
                    "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{53, 2, 2}, 
                    NeuralNetworks`RealT]]], "concat" -> 
                 Association[
                  "Type" -> "Catenate", "Arrays" -> Association[], 
                   "Parameters" -> Association["Level" -> 1, "$InputShapes" -> {
                    NeuralNetworks`TensorT[{77, 2, 2}, NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{53, 2, 2}, NeuralNetworks`RealT]},
                     "$InputCount" -> 2, "$OutputShape" -> 
                    NeuralNetworks`TensorT[{130, 2, 2}, 
                    NeuralNetworks`RealT]], "Inputs" -> Association["Input" -> {
                    NeuralNetworks`TensorT[{77, 2, 2}, NeuralNetworks`RealT], 
                    
                    
                    NeuralNetworks`TensorT[{53, 2, 2}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{130, 2, 2}, 
                    NeuralNetworks`RealT]]]]], Alignment -> Center], 
              Nothing]}], GridBoxAlignment -> {"Columns" -> {{Left}}}],
          ImageSizeCache->{554., {95.5, 103.5}},
          TrackedSymbols:>{NeuralNetworks`Private`NetGraph`selection}],
         Initialization:>{NetGraph}],
        BaselinePosition->(Top -> Scaled[3])], "]"}]}],
     False],
    Deploy],
   LineBreakWithin->False]}, {8,"8"->
  StyleBox[
   TagBox[
    TagBox[
     RowBox[{"NetGraph", 
      RowBox[{"[", 
       PanelBox[
        DynamicModuleBox[{NeuralNetworks`Private`NetGraph`selection = None}, 
         DynamicBox[GridBox[
           Map[List, {
             ToBoxes[
              
              NeuralNetworks`Private`NetGraph`netLayerPlot[{{1, 2}, {2, 3}, {
               3, 4}, {4, 5}, {3, 6}, {6, 7}, {5, 8}, {7, 8}, {8, 9}}, 
               Dynamic[NeuralNetworks`Private`NetGraph`selection], False, {
               "Input", "squeeze1x1", "relu_squeeze1x1", "expand1x1", 
                "relu_expand1x1", "expand3x3", "relu_expand3x3", "concat", 
                "Output"}, {Null, 
                Hue[0.61, 0.75, 1], 
                RGBColor[0.29, 0.29, 0.83], 
                RGBColor[1., 0.7, 0.31]}, {1, 2, 3, 2, 3, 2, 3, 4, 1}, {
               Null, ConvolutionLayer, ElementwiseLayer, CatenateLayer}, {
                NeuralNetworks`TensorT[{64, 56, 56}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{19, 11, 13}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{19, 11, 13}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{58, 1, 2}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{19, 11, 13}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{43, 1, 2}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{58, 1, 2}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{43, 1, 2}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{101, 1, 2}, NeuralNetworks`RealT]}, {
               None, None, Tanh, None, None, None, LogisticSigmoid, None, 
                None}]], 
             If[
              IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
              ItemBox[
               NeuralNetworks`Private`NetGraph`vpathInfo[
                Part[{
                  NeuralNetworks`NetPath["Inputs", "Input"], 
                  NeuralNetworks`NetPath["Nodes", "squeeze1x1"], 
                  NeuralNetworks`NetPath["Nodes", "relu_squeeze1x1"], 
                  NeuralNetworks`NetPath["Nodes", "expand1x1"], 
                  NeuralNetworks`NetPath["Nodes", "relu_expand1x1"], 
                  NeuralNetworks`NetPath["Nodes", "expand3x3"], 
                  NeuralNetworks`NetPath["Nodes", "relu_expand3x3"], 
                  NeuralNetworks`NetPath["Nodes", "concat"], 
                  NeuralNetworks`NetPath["Outputs", "Output"]}, 
                 NeuralNetworks`Private`NetGraph`selection], 
                Association[
                "Input" -> 
                 NeuralNetworks`TensorT[{64, 56, 56}, NeuralNetworks`RealT]], 
                
                Association[
                "Output" -> 
                 NeuralNetworks`TensorT[{101, 1, 2}, NeuralNetworks`RealT]], 
                Association[
                "squeeze1x1" -> 
                 Association[
                  "Type" -> "Convolution", "Arrays" -> 
                   Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{19, 64, 4, 7}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{19}, NeuralNetworks`RealT]]], 
                   "Parameters" -> 
                   Association[
                    "OutputChannels" -> 19, "KernelSize" -> {4, 7}, 
                    "Stride" -> {8, 4}, "PaddingSize" -> {15, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {11, 13}], 
                   "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{19, 11, 13}, 
                    NeuralNetworks`RealT]]], "relu_squeeze1x1" -> 
                 Association[
                  "Type" -> "Elementwise", "Arrays" -> Association[], 
                   "Parameters" -> 
                   Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {19, 11, 13}], "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{19, 11, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{19, 11, 13}, 
                    NeuralNetworks`RealT]]], "expand1x1" -> 
                 Association[
                  "Type" -> "Convolution", "Arrays" -> 
                   Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{58, 19, 10, 4}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{58}, NeuralNetworks`RealT]]], 
                   "Parameters" -> 
                   Association[
                    "OutputChannels" -> 58, "KernelSize" -> {10, 4}, 
                    "Stride" -> {9, 9}, "PaddingSize" -> {2, 2}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 19, "$GroupNumber" -> 1, 
                    "$InputSize" -> {11, 13}, "$OutputSize" -> {1, 2}], 
                   "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{19, 11, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{58, 1, 2}, 
                    NeuralNetworks`RealT]]], "relu_expand1x1" -> 
                 Association[
                  "Type" -> "Elementwise", "Arrays" -> Association[], 
                   "Parameters" -> 
                   Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[11], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[1], -1.}, 
                    NeuralNetworks`Private`ScalarSymbol[6] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    NeuralNetworks`Private`ScalarSymbol[5]}, 
                    NeuralNetworks`Private`ScalarSymbol[7] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[8] -> {Plus, -1., 
                    NeuralNetworks`Private`ScalarSymbol[7]}, 
                    NeuralNetworks`Private`ScalarSymbol[9] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[6], 
                    NeuralNetworks`Private`ScalarSymbol[8]}, 
                    NeuralNetworks`Private`ScalarSymbol[10] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[9]}, 
                    NeuralNetworks`Private`ScalarSymbol[11] -> {Plus, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    NeuralNetworks`Private`ScalarSymbol[10]}]]], 
                    "$Dimensions" -> {58, 1, 2}], "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{58, 1, 2}, NeuralNetworks`RealT]],
                    "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{58, 1, 2}, 
                    NeuralNetworks`RealT]]], "expand3x3" -> 
                 Association[
                  "Type" -> "Convolution", "Arrays" -> 
                   Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{43, 19, 5, 9}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{43}, NeuralNetworks`RealT]]], 
                   "Parameters" -> 
                   Association[
                    "OutputChannels" -> 43, "KernelSize" -> {5, 9}, 
                    "Stride" -> {18, 4}, "PaddingSize" -> {3, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 19, "$GroupNumber" -> 1, 
                    "$InputSize" -> {11, 13}, "$OutputSize" -> {1, 2}], 
                   "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{19, 11, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{43, 1, 2}, 
                    NeuralNetworks`RealT]]], "relu_expand3x3" -> 
                 Association[
                  "Type" -> "Elementwise", "Arrays" -> Association[], 
                   "Parameters" -> 
                   Association[
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {43, 1, 2}], "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{43, 1, 2}, NeuralNetworks`RealT]],
                    "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{43, 1, 2}, 
                    NeuralNetworks`RealT]]], "concat" -> 
                 Association[
                  "Type" -> "Catenate", "Arrays" -> Association[], 
                   "Parameters" -> Association["Level" -> 1, "$InputShapes" -> {
                    NeuralNetworks`TensorT[{58, 1, 2}, NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{43, 1, 2}, NeuralNetworks`RealT]},
                     "$InputCount" -> 2, "$OutputShape" -> 
                    NeuralNetworks`TensorT[{101, 1, 2}, 
                    NeuralNetworks`RealT]], "Inputs" -> Association["Input" -> {
                    NeuralNetworks`TensorT[{58, 1, 2}, NeuralNetworks`RealT], 
                    
                    
                    NeuralNetworks`TensorT[{43, 1, 2}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{101, 1, 2}, 
                    NeuralNetworks`RealT]]]]], Alignment -> Center], 
              Nothing]}], GridBoxAlignment -> {"Columns" -> {{Left}}}],
          ImageSizeCache->{554., {96.5, 104.5}},
          TrackedSymbols:>{NeuralNetworks`Private`NetGraph`selection}],
         Initialization:>{NetGraph}],
        BaselinePosition->(Top -> Scaled[3])], "]"}]}],
     False],
    Deploy],
   LineBreakWithin->False]}, {9,"9"->
  StyleBox[
   TagBox[
    TagBox[
     RowBox[{"NetGraph", 
      RowBox[{"[", 
       PanelBox[
        DynamicModuleBox[{NeuralNetworks`Private`NetGraph`selection = None}, 
         DynamicBox[GridBox[
           Map[List, {
             ToBoxes[
              
              NeuralNetworks`Private`NetGraph`netLayerPlot[{{1, 2}, {2, 3}, {
               3, 4}, {4, 5}, {3, 6}, {6, 7}, {5, 8}, {7, 8}, {8, 9}}, 
               Dynamic[NeuralNetworks`Private`NetGraph`selection], False, {
               "Input", "squeeze1x1", "relu_squeeze1x1", "expand1x1", 
                "relu_expand1x1", "expand3x3", "relu_expand3x3", "concat", 
                "Output"}, {Null, 
                Hue[0.61, 0.75, 1], 
                RGBColor[0.29, 0.29, 0.83], 
                RGBColor[1., 0.7, 0.31]}, {1, 2, 3, 2, 3, 2, 3, 4, 1}, {
               Null, ConvolutionLayer, ElementwiseLayer, CatenateLayer}, {
                NeuralNetworks`TensorT[{64, 56, 56}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{37, 18, 26}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{37, 18, 26}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{69, 1, 5}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{37, 18, 26}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{49, 1, 5}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{69, 1, 5}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{49, 1, 5}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{118, 1, 5}, NeuralNetworks`RealT]}, {
               None, None, None, None, LogisticSigmoid, None, None, None, 
                None}]], 
             If[
              IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
              ItemBox[
               NeuralNetworks`Private`NetGraph`vpathInfo[
                Part[{
                  NeuralNetworks`NetPath["Inputs", "Input"], 
                  NeuralNetworks`NetPath["Nodes", "squeeze1x1"], 
                  NeuralNetworks`NetPath["Nodes", "relu_squeeze1x1"], 
                  NeuralNetworks`NetPath["Nodes", "expand1x1"], 
                  NeuralNetworks`NetPath["Nodes", "relu_expand1x1"], 
                  NeuralNetworks`NetPath["Nodes", "expand3x3"], 
                  NeuralNetworks`NetPath["Nodes", "relu_expand3x3"], 
                  NeuralNetworks`NetPath["Nodes", "concat"], 
                  NeuralNetworks`NetPath["Outputs", "Output"]}, 
                 NeuralNetworks`Private`NetGraph`selection], 
                Association[
                "Input" -> 
                 NeuralNetworks`TensorT[{64, 56, 56}, NeuralNetworks`RealT]], 
                
                Association[
                "Output" -> 
                 NeuralNetworks`TensorT[{118, 1, 5}, NeuralNetworks`RealT]], 
                Association[
                "squeeze1x1" -> 
                 Association[
                  "Type" -> "Convolution", "Arrays" -> 
                   Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{37, 64, 2, 8}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{37}, NeuralNetworks`RealT]]], 
                   "Parameters" -> 
                   Association[
                    "OutputChannels" -> 37, "KernelSize" -> {2, 8}, 
                    "Stride" -> {5, 2}, "PaddingSize" -> {16, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {18, 26}], 
                   "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{37, 18, 26}, 
                    NeuralNetworks`RealT]]], "relu_squeeze1x1" -> 
                 Association[
                  "Type" -> "Elementwise", "Arrays" -> Association[], 
                   "Parameters" -> 
                   Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[11], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[1], -1.}, 
                    NeuralNetworks`Private`ScalarSymbol[6] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    NeuralNetworks`Private`ScalarSymbol[5]}, 
                    NeuralNetworks`Private`ScalarSymbol[7] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[8] -> {Plus, -1., 
                    NeuralNetworks`Private`ScalarSymbol[7]}, 
                    NeuralNetworks`Private`ScalarSymbol[9] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[6], 
                    NeuralNetworks`Private`ScalarSymbol[8]}, 
                    NeuralNetworks`Private`ScalarSymbol[10] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[9]}, 
                    NeuralNetworks`Private`ScalarSymbol[11] -> {Plus, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    NeuralNetworks`Private`ScalarSymbol[10]}]]], 
                    "$Dimensions" -> {37, 18, 26}], "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{37, 18, 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{37, 18, 26}, 
                    NeuralNetworks`RealT]]], "expand1x1" -> 
                 Association[
                  "Type" -> "Convolution", "Arrays" -> 
                   Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{69, 37, 14, 4}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{69}, NeuralNetworks`RealT]]], 
                   "Parameters" -> 
                   Association[
                    "OutputChannels" -> 69, "KernelSize" -> {14, 4}, 
                    "Stride" -> {10, 7}, "PaddingSize" -> {1, 3}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 37, "$GroupNumber" -> 1, 
                    "$InputSize" -> {18, 26}, "$OutputSize" -> {1, 5}], 
                   "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{37, 18, 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{69, 1, 5}, 
                    NeuralNetworks`RealT]]], "relu_expand1x1" -> 
                 Association[
                  "Type" -> "Elementwise", "Arrays" -> Association[], 
                   "Parameters" -> 
                   Association[
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {69, 1, 5}], "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{69, 1, 5}, NeuralNetworks`RealT]],
                    "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{69, 1, 5}, 
                    NeuralNetworks`RealT]]], "expand3x3" -> 
                 Association[
                  "Type" -> "Convolution", "Arrays" -> 
                   Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{49, 37, 8, 5}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{49}, NeuralNetworks`RealT]]], 
                   "Parameters" -> 
                   Association[
                    "OutputChannels" -> 49, "KernelSize" -> {8, 5}, 
                    "Stride" -> {22, 6}, "PaddingSize" -> {2, 4}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 37, "$GroupNumber" -> 1, 
                    "$InputSize" -> {18, 26}, "$OutputSize" -> {1, 5}], 
                   "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{37, 18, 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{49, 1, 5}, 
                    NeuralNetworks`RealT]]], "relu_expand3x3" -> 
                 Association[
                  "Type" -> "Elementwise", "Arrays" -> Association[], 
                   "Parameters" -> 
                   Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[7], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {
                    Times, 0.22600905807438743`, 
                    NeuralNetworks`Private`ScalarSymbol[4]}, 
                    NeuralNetworks`Private`ScalarSymbol[6] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[5]}, 
                    NeuralNetworks`Private`ScalarSymbol[7] -> {Plus, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    NeuralNetworks`Private`ScalarSymbol[6]}]]], 
                    "$Dimensions" -> {49, 1, 5}], "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{49, 1, 5}, NeuralNetworks`RealT]],
                    "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{49, 1, 5}, 
                    NeuralNetworks`RealT]]], "concat" -> 
                 Association[
                  "Type" -> "Catenate", "Arrays" -> Association[], 
                   "Parameters" -> Association["Level" -> 1, "$InputShapes" -> {
                    NeuralNetworks`TensorT[{69, 1, 5}, NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{49, 1, 5}, NeuralNetworks`RealT]},
                     "$InputCount" -> 2, "$OutputShape" -> 
                    NeuralNetworks`TensorT[{118, 1, 5}, 
                    NeuralNetworks`RealT]], "Inputs" -> Association["Input" -> {
                    NeuralNetworks`TensorT[{69, 1, 5}, NeuralNetworks`RealT], 
                    
                    
                    NeuralNetworks`TensorT[{49, 1, 5}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{118, 1, 5}, 
                    NeuralNetworks`RealT]]]]], Alignment -> Center], 
              Nothing]}], GridBoxAlignment -> {"Columns" -> {{Left}}}],
          ImageSizeCache->{554., {95.5, 103.5}},
          TrackedSymbols:>{NeuralNetworks`Private`NetGraph`selection}],
         Initialization:>{NetGraph}],
        BaselinePosition->(Top -> Scaled[3])], "]"}]}],
     False],
    Deploy],
   LineBreakWithin->False]}, {10,"10"->
  StyleBox[
   TagBox[
    TagBox[
     RowBox[{"NetGraph", 
      RowBox[{"[", 
       PanelBox[
        DynamicModuleBox[{NeuralNetworks`Private`NetGraph`selection = None}, 
         DynamicBox[GridBox[
           Map[List, {
             ToBoxes[
              
              NeuralNetworks`Private`NetGraph`netLayerPlot[{{1, 2}, {2, 3}, {
               3, 4}, {4, 5}, {3, 6}, {6, 7}, {5, 8}, {7, 8}, {8, 9}}, 
               Dynamic[NeuralNetworks`Private`NetGraph`selection], False, {
               "Input", "squeeze1x1", "relu_squeeze1x1", "expand1x1", 
                "relu_expand1x1", "expand3x3", "relu_expand3x3", "concat", 
                "Output"}, {Null, 
                Hue[0.61, 0.75, 1], 
                RGBColor[0.29, 0.29, 0.83], 
                RGBColor[1., 0.7, 0.31]}, {1, 2, 3, 2, 3, 2, 3, 4, 1}, {
               Null, ConvolutionLayer, ElementwiseLayer, CatenateLayer}, {
                NeuralNetworks`TensorT[{64, 56, 56}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{39, 16, 12}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{39, 16, 12}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{72, 1, 3}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{39, 16, 12}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{31, 1, 3}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{72, 1, 3}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{31, 1, 3}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{103, 1, 3}, NeuralNetworks`RealT]}, {
               None, None, None, None, None, None, LogisticSigmoid, None, 
                None}]], 
             If[
              IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
              ItemBox[
               NeuralNetworks`Private`NetGraph`vpathInfo[
                Part[{
                  NeuralNetworks`NetPath["Inputs", "Input"], 
                  NeuralNetworks`NetPath["Nodes", "squeeze1x1"], 
                  NeuralNetworks`NetPath["Nodes", "relu_squeeze1x1"], 
                  NeuralNetworks`NetPath["Nodes", "expand1x1"], 
                  NeuralNetworks`NetPath["Nodes", "relu_expand1x1"], 
                  NeuralNetworks`NetPath["Nodes", "expand3x3"], 
                  NeuralNetworks`NetPath["Nodes", "relu_expand3x3"], 
                  NeuralNetworks`NetPath["Nodes", "concat"], 
                  NeuralNetworks`NetPath["Outputs", "Output"]}, 
                 NeuralNetworks`Private`NetGraph`selection], 
                Association[
                "Input" -> 
                 NeuralNetworks`TensorT[{64, 56, 56}, NeuralNetworks`RealT]], 
                
                Association[
                "Output" -> 
                 NeuralNetworks`TensorT[{103, 1, 3}, NeuralNetworks`RealT]], 
                Association[
                "squeeze1x1" -> 
                 Association[
                  "Type" -> "Convolution", "Arrays" -> 
                   Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{39, 64, 2, 4}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{39}, NeuralNetworks`RealT]]], 
                   "Parameters" -> 
                   Association[
                    "OutputChannels" -> 39, "KernelSize" -> {2, 4}, 
                    "Stride" -> {6, 5}, "PaddingSize" -> {20, 3}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {16, 12}], 
                   "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{39, 16, 12}, 
                    NeuralNetworks`RealT]]], "relu_squeeze1x1" -> 
                 Association[
                  "Type" -> "Elementwise", "Arrays" -> Association[], 
                   "Parameters" -> 
                   Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[11], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[1], -1.}, 
                    NeuralNetworks`Private`ScalarSymbol[6] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    NeuralNetworks`Private`ScalarSymbol[5]}, 
                    NeuralNetworks`Private`ScalarSymbol[7] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[8] -> {Plus, -1., 
                    NeuralNetworks`Private`ScalarSymbol[7]}, 
                    NeuralNetworks`Private`ScalarSymbol[9] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[6], 
                    NeuralNetworks`Private`ScalarSymbol[8]}, 
                    NeuralNetworks`Private`ScalarSymbol[10] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[9]}, 
                    NeuralNetworks`Private`ScalarSymbol[11] -> {Plus, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    NeuralNetworks`Private`ScalarSymbol[10]}]]], 
                    "$Dimensions" -> {39, 16, 12}], "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{39, 16, 12}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{39, 16, 12}, 
                    NeuralNetworks`RealT]]], "expand1x1" -> 
                 Association[
                  "Type" -> "Convolution", "Arrays" -> 
                   Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{72, 39, 15, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{72}, NeuralNetworks`RealT]]], 
                   "Parameters" -> 
                   Association[
                    "OutputChannels" -> 72, "KernelSize" -> {15, 3}, 
                    "Stride" -> {10, 7}, "PaddingSize" -> {4, 3}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 39, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 12}, "$OutputSize" -> {1, 3}], 
                   "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{39, 16, 12}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{72, 1, 3}, 
                    NeuralNetworks`RealT]]], "relu_expand1x1" -> 
                 Association[
                  "Type" -> "Elementwise", "Arrays" -> Association[], 
                   "Parameters" -> 
                   Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[7], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {
                    Times, 0.125972715631968, 
                    NeuralNetworks`Private`ScalarSymbol[4]}, 
                    NeuralNetworks`Private`ScalarSymbol[6] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[5]}, 
                    NeuralNetworks`Private`ScalarSymbol[7] -> {Plus, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    NeuralNetworks`Private`ScalarSymbol[6]}]]], 
                    "$Dimensions" -> {72, 1, 3}], "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{72, 1, 3}, NeuralNetworks`RealT]],
                    "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{72, 1, 3}, 
                    NeuralNetworks`RealT]]], "expand3x3" -> 
                 Association[
                  "Type" -> "Convolution", "Arrays" -> 
                   Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{31, 39, 6, 5}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{31}, NeuralNetworks`RealT]]], 
                   "Parameters" -> 
                   Association[
                    "OutputChannels" -> 31, "KernelSize" -> {6, 5}, 
                    "Stride" -> {23, 5}, "PaddingSize" -> {3, 2}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 39, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 12}, "$OutputSize" -> {1, 3}], 
                   "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{39, 16, 12}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{31, 1, 3}, 
                    NeuralNetworks`RealT]]], "relu_expand3x3" -> 
                 Association[
                  "Type" -> "Elementwise", "Arrays" -> Association[], 
                   "Parameters" -> 
                   Association[
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {31, 1, 3}], "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{31, 1, 3}, NeuralNetworks`RealT]],
                    "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{31, 1, 3}, 
                    NeuralNetworks`RealT]]], "concat" -> 
                 Association[
                  "Type" -> "Catenate", "Arrays" -> Association[], 
                   "Parameters" -> Association["Level" -> 1, "$InputShapes" -> {
                    NeuralNetworks`TensorT[{72, 1, 3}, NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{31, 1, 3}, NeuralNetworks`RealT]},
                     "$InputCount" -> 2, "$OutputShape" -> 
                    NeuralNetworks`TensorT[{103, 1, 3}, 
                    NeuralNetworks`RealT]], "Inputs" -> Association["Input" -> {
                    NeuralNetworks`TensorT[{72, 1, 3}, NeuralNetworks`RealT], 
                    
                    
                    NeuralNetworks`TensorT[{31, 1, 3}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{103, 1, 3}, 
                    NeuralNetworks`RealT]]]]], Alignment -> Center], 
              Nothing]}], GridBoxAlignment -> {"Columns" -> {{Left}}}],
          ImageSizeCache->{554., {96.5, 104.5}},
          TrackedSymbols:>{NeuralNetworks`Private`NetGraph`selection}],
         Initialization:>{NetGraph}],
        BaselinePosition->(Top -> Scaled[3])], "]"}]}],
     False],
    Deploy],
   LineBreakWithin->False]}, {11,"11"->
  StyleBox[
   TagBox[
    TagBox[
     RowBox[{"NetGraph", 
      RowBox[{"[", 
       PanelBox[
        DynamicModuleBox[{NeuralNetworks`Private`NetGraph`selection = None}, 
         DynamicBox[GridBox[
           Map[List, {
             ToBoxes[
              
              NeuralNetworks`Private`NetGraph`netLayerPlot[{{1, 2}, {2, 3}, {
               3, 4}, {4, 5}, {3, 6}, {6, 7}, {5, 8}, {7, 8}, {8, 9}}, 
               Dynamic[NeuralNetworks`Private`NetGraph`selection], False, {
               "Input", "squeeze1x1", "relu_squeeze1x1", "expand1x1", 
                "relu_expand1x1", "expand3x3", "relu_expand3x3", "concat", 
                "Output"}, {Null, 
                Hue[0.61, 0.75, 1], 
                RGBColor[0.29, 0.29, 0.83], 
                RGBColor[1., 0.7, 0.31]}, {1, 2, 3, 2, 3, 2, 3, 4, 1}, {
               Null, ConvolutionLayer, ElementwiseLayer, CatenateLayer}, {
                NeuralNetworks`TensorT[{64, 56, 56}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{44, 19, 17}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{44, 19, 17}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{74, 1, 3}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{44, 19, 17}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{44, 1, 3}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{74, 1, 3}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{44, 1, 3}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{118, 1, 3}, NeuralNetworks`RealT]}, {
               None, None, LogisticSigmoid, None, None, None, None, None, 
                None}]], 
             If[
              IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
              ItemBox[
               NeuralNetworks`Private`NetGraph`vpathInfo[
                Part[{
                  NeuralNetworks`NetPath["Inputs", "Input"], 
                  NeuralNetworks`NetPath["Nodes", "squeeze1x1"], 
                  NeuralNetworks`NetPath["Nodes", "relu_squeeze1x1"], 
                  NeuralNetworks`NetPath["Nodes", "expand1x1"], 
                  NeuralNetworks`NetPath["Nodes", "relu_expand1x1"], 
                  NeuralNetworks`NetPath["Nodes", "expand3x3"], 
                  NeuralNetworks`NetPath["Nodes", "relu_expand3x3"], 
                  NeuralNetworks`NetPath["Nodes", "concat"], 
                  NeuralNetworks`NetPath["Outputs", "Output"]}, 
                 NeuralNetworks`Private`NetGraph`selection], 
                Association[
                "Input" -> 
                 NeuralNetworks`TensorT[{64, 56, 56}, NeuralNetworks`RealT]], 
                
                Association[
                "Output" -> 
                 NeuralNetworks`TensorT[{118, 1, 3}, NeuralNetworks`RealT]], 
                Association[
                "squeeze1x1" -> 
                 Association[
                  "Type" -> "Convolution", "Arrays" -> 
                   Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{44, 64, 6, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{44}, NeuralNetworks`RealT]]], 
                   "Parameters" -> 
                   Association[
                    "OutputChannels" -> 44, "KernelSize" -> {6, 3}, 
                    "Stride" -> {5, 4}, "PaddingSize" -> {21, 7}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {19, 17}], 
                   "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{44, 19, 17}, 
                    NeuralNetworks`RealT]]], "relu_squeeze1x1" -> 
                 Association[
                  "Type" -> "Elementwise", "Arrays" -> Association[], 
                   "Parameters" -> 
                   Association[
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {44, 19, 17}], "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{44, 19, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{44, 19, 17}, 
                    NeuralNetworks`RealT]]], "expand1x1" -> 
                 Association[
                  "Type" -> "Convolution", "Arrays" -> 
                   Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{74, 44, 13, 4}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{74}, NeuralNetworks`RealT]]], 
                   "Parameters" -> 
                   Association[
                    "OutputChannels" -> 74, "KernelSize" -> {13, 4}, 
                    "Stride" -> {12, 9}, "PaddingSize" -> {2, 6}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 44, "$GroupNumber" -> 1, 
                    "$InputSize" -> {19, 17}, "$OutputSize" -> {1, 3}], 
                   "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{44, 19, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{74, 1, 3}, 
                    NeuralNetworks`RealT]]], "relu_expand1x1" -> 
                 Association[
                  "Type" -> "Elementwise", "Arrays" -> Association[], 
                   "Parameters" -> 
                   Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[7], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Plus, -1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[2], -1.}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    NeuralNetworks`Private`ScalarSymbol[4]}, 
                    NeuralNetworks`Private`ScalarSymbol[6] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[7] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[5], 
                    NeuralNetworks`Private`ScalarSymbol[6]}]]], 
                    "$Dimensions" -> {74, 1, 3}], "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{74, 1, 3}, NeuralNetworks`RealT]],
                    "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{74, 1, 3}, 
                    NeuralNetworks`RealT]]], "expand3x3" -> 
                 Association[
                  "Type" -> "Convolution", "Arrays" -> 
                   Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{44, 44, 6, 8}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{44}, NeuralNetworks`RealT]]], 
                   "Parameters" -> 
                   Association[
                    "OutputChannels" -> 44, "KernelSize" -> {6, 8}, 
                    "Stride" -> {19, 4}, "PaddingSize" -> {0, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 44, "$GroupNumber" -> 1, 
                    "$InputSize" -> {19, 17}, "$OutputSize" -> {1, 3}], 
                   "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{44, 19, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{44, 1, 3}, 
                    NeuralNetworks`RealT]]], "relu_expand3x3" -> 
                 Association[
                  "Type" -> "Elementwise", "Arrays" -> Association[], 
                   "Parameters" -> 
                   Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[7], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {
                    Times, 0.05992042727057023, 
                    NeuralNetworks`Private`ScalarSymbol[4]}, 
                    NeuralNetworks`Private`ScalarSymbol[6] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[5]}, 
                    NeuralNetworks`Private`ScalarSymbol[7] -> {Plus, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    NeuralNetworks`Private`ScalarSymbol[6]}]]], 
                    "$Dimensions" -> {44, 1, 3}], "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{44, 1, 3}, NeuralNetworks`RealT]],
                    "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{44, 1, 3}, 
                    NeuralNetworks`RealT]]], "concat" -> 
                 Association[
                  "Type" -> "Catenate", "Arrays" -> Association[], 
                   "Parameters" -> Association["Level" -> 1, "$InputShapes" -> {
                    NeuralNetworks`TensorT[{74, 1, 3}, NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{44, 1, 3}, NeuralNetworks`RealT]},
                     "$InputCount" -> 2, "$OutputShape" -> 
                    NeuralNetworks`TensorT[{118, 1, 3}, 
                    NeuralNetworks`RealT]], "Inputs" -> Association["Input" -> {
                    NeuralNetworks`TensorT[{74, 1, 3}, NeuralNetworks`RealT], 
                    
                    
                    NeuralNetworks`TensorT[{44, 1, 3}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{118, 1, 3}, 
                    NeuralNetworks`RealT]]]]], Alignment -> Center], 
              Nothing]}], GridBoxAlignment -> {"Columns" -> {{Left}}}],
          ImageSizeCache->{554., {96.5, 104.5}},
          TrackedSymbols:>{NeuralNetworks`Private`NetGraph`selection}],
         Initialization:>{NetGraph}],
        BaselinePosition->(Top -> Scaled[3])], "]"}]}],
     False],
    Deploy],
   LineBreakWithin->False]}, {12,"12"->
  StyleBox[
   TagBox[
    TagBox[
     RowBox[{"NetGraph", 
      RowBox[{"[", 
       PanelBox[
        DynamicModuleBox[{NeuralNetworks`Private`NetGraph`selection = None}, 
         DynamicBox[GridBox[
           Map[List, {
             ToBoxes[
              
              NeuralNetworks`Private`NetGraph`netLayerPlot[{{1, 2}, {2, 3}, {
               3, 4}, {4, 5}, {3, 6}, {6, 7}, {5, 8}, {7, 8}, {8, 9}}, 
               Dynamic[NeuralNetworks`Private`NetGraph`selection], False, {
               "Input", "squeeze1x1", "relu_squeeze1x1", "expand1x1", 
                "relu_expand1x1", "expand3x3", "relu_expand3x3", "concat", 
                "Output"}, {Null, 
                Hue[0.61, 0.75, 1], 
                RGBColor[0.29, 0.29, 0.83], 
                RGBColor[1., 0.7, 0.31]}, {1, 2, 3, 2, 3, 2, 3, 4, 1}, {
               Null, ConvolutionLayer, ElementwiseLayer, CatenateLayer}, {
                NeuralNetworks`TensorT[{64, 56, 56}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{25, 84, 8}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{25, 84, 8}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{56, 5, 2}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{25, 84, 8}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{34, 5, 2}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{56, 5, 2}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{34, 5, 2}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{90, 5, 2}, NeuralNetworks`RealT]}, {
               None, None, LogisticSigmoid, None, Ramp, None, None, None, 
                None}]], 
             If[
              IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
              ItemBox[
               NeuralNetworks`Private`NetGraph`vpathInfo[
                Part[{
                  NeuralNetworks`NetPath["Inputs", "Input"], 
                  NeuralNetworks`NetPath["Nodes", "squeeze1x1"], 
                  NeuralNetworks`NetPath["Nodes", "relu_squeeze1x1"], 
                  NeuralNetworks`NetPath["Nodes", "expand1x1"], 
                  NeuralNetworks`NetPath["Nodes", "relu_expand1x1"], 
                  NeuralNetworks`NetPath["Nodes", "expand3x3"], 
                  NeuralNetworks`NetPath["Nodes", "relu_expand3x3"], 
                  NeuralNetworks`NetPath["Nodes", "concat"], 
                  NeuralNetworks`NetPath["Outputs", "Output"]}, 
                 NeuralNetworks`Private`NetGraph`selection], 
                Association[
                "Input" -> 
                 NeuralNetworks`TensorT[{64, 56, 56}, NeuralNetworks`RealT]], 
                
                Association[
                "Output" -> 
                 NeuralNetworks`TensorT[{90, 5, 2}, NeuralNetworks`RealT]], 
                Association[
                "squeeze1x1" -> 
                 Association[
                  "Type" -> "Convolution", "Arrays" -> 
                   Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{25, 64, 7, 5}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{25}, NeuralNetworks`RealT]]], 
                   "Parameters" -> 
                   Association[
                    "OutputChannels" -> 25, "KernelSize" -> {7, 5}, 
                    "Stride" -> {1, 8}, "PaddingSize" -> {17, 6}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {84, 8}], 
                   "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{25, 84, 8}, 
                    NeuralNetworks`RealT]]], "relu_squeeze1x1" -> 
                 Association[
                  "Type" -> "Elementwise", "Arrays" -> Association[], 
                   "Parameters" -> 
                   Association[
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {25, 84, 8}], "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{25, 84, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{25, 84, 8}, 
                    NeuralNetworks`RealT]]], "expand1x1" -> 
                 Association[
                  "Type" -> "Convolution", "Arrays" -> 
                   Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{56, 25, 11, 8}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{56}, NeuralNetworks`RealT]]], 
                   "Parameters" -> 
                   Association[
                    "OutputChannels" -> 56, "KernelSize" -> {11, 8}, 
                    "Stride" -> {16, 11}, "PaddingSize" -> {3, 10}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 25, "$GroupNumber" -> 1, 
                    "$InputSize" -> {84, 8}, "$OutputSize" -> {5, 2}], 
                   "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{25, 84, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{56, 5, 2}, 
                    NeuralNetworks`RealT]]], "relu_expand1x1" -> 
                 Association[
                  "Type" -> "Elementwise", "Arrays" -> Association[], 
                   "Parameters" -> 
                   Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {56, 5, 2}], "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{56, 5, 2}, NeuralNetworks`RealT]],
                    "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{56, 5, 2}, 
                    NeuralNetworks`RealT]]], "expand3x3" -> 
                 Association[
                  "Type" -> "Convolution", "Arrays" -> 
                   Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{34, 25, 8, 7}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{34}, NeuralNetworks`RealT]]], 
                   "Parameters" -> 
                   Association[
                    "OutputChannels" -> 34, "KernelSize" -> {8, 7}, 
                    "Stride" -> {17, 6}, "PaddingSize" -> {0, 4}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 25, "$GroupNumber" -> 1, 
                    "$InputSize" -> {84, 8}, "$OutputSize" -> {5, 2}], 
                   "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{25, 84, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{34, 5, 2}, 
                    NeuralNetworks`RealT]]], "relu_expand3x3" -> 
                 Association[
                  "Type" -> "Elementwise", "Arrays" -> Association[], 
                   "Parameters" -> 
                   Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[11], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[1], -1.}, 
                    NeuralNetworks`Private`ScalarSymbol[6] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    NeuralNetworks`Private`ScalarSymbol[5]}, 
                    NeuralNetworks`Private`ScalarSymbol[7] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[8] -> {Plus, -1., 
                    NeuralNetworks`Private`ScalarSymbol[7]}, 
                    NeuralNetworks`Private`ScalarSymbol[9] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[6], 
                    NeuralNetworks`Private`ScalarSymbol[8]}, 
                    NeuralNetworks`Private`ScalarSymbol[10] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[9]}, 
                    NeuralNetworks`Private`ScalarSymbol[11] -> {Plus, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    NeuralNetworks`Private`ScalarSymbol[10]}]]], 
                    "$Dimensions" -> {34, 5, 2}], "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{34, 5, 2}, NeuralNetworks`RealT]],
                    "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{34, 5, 2}, 
                    NeuralNetworks`RealT]]], "concat" -> 
                 Association[
                  "Type" -> "Catenate", "Arrays" -> Association[], 
                   "Parameters" -> Association["Level" -> 1, "$InputShapes" -> {
                    NeuralNetworks`TensorT[{56, 5, 2}, NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{34, 5, 2}, NeuralNetworks`RealT]},
                     "$InputCount" -> 2, "$OutputShape" -> 
                    NeuralNetworks`TensorT[{90, 5, 2}, NeuralNetworks`RealT]],
                    "Inputs" -> Association["Input" -> {
                    NeuralNetworks`TensorT[{56, 5, 2}, NeuralNetworks`RealT], 
                    
                    
                    NeuralNetworks`TensorT[{34, 5, 2}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{90, 5, 2}, 
                    NeuralNetworks`RealT]]]]], Alignment -> Center], 
              Nothing]}], GridBoxAlignment -> {"Columns" -> {{Left}}}],
          ImageSizeCache->{554., {96.5, 104.5}},
          TrackedSymbols:>{NeuralNetworks`Private`NetGraph`selection}],
         Initialization:>{NetGraph}],
        BaselinePosition->(Top -> Scaled[3])], "]"}]}],
     False],
    Deploy],
   LineBreakWithin->False]}, {13,"13"->
  StyleBox[
   TagBox[
    TagBox[
     RowBox[{"NetGraph", 
      RowBox[{"[", 
       PanelBox[
        DynamicModuleBox[{NeuralNetworks`Private`NetGraph`selection = None}, 
         DynamicBox[GridBox[
           Map[List, {
             ToBoxes[
              
              NeuralNetworks`Private`NetGraph`netLayerPlot[{{1, 2}, {2, 3}, {
               3, 4}, {4, 5}, {3, 6}, {6, 7}, {5, 8}, {7, 8}, {8, 9}}, 
               Dynamic[NeuralNetworks`Private`NetGraph`selection], False, {
               "Input", "squeeze1x1", "relu_squeeze1x1", "expand1x1", 
                "relu_expand1x1", "expand3x3", "relu_expand3x3", "concat", 
                "Output"}, {Null, 
                Hue[0.61, 0.75, 1], 
                RGBColor[0.29, 0.29, 0.83], 
                RGBColor[1., 0.7, 0.31]}, {1, 2, 3, 2, 3, 2, 3, 4, 1}, {
               Null, ConvolutionLayer, ElementwiseLayer, CatenateLayer}, {
                NeuralNetworks`TensorT[{64, 56, 56}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{20, 16, 18}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{20, 16, 18}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{69, 1, 3}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{20, 16, 18}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{50, 1, 3}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{69, 1, 3}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{50, 1, 3}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{119, 1, 3}, NeuralNetworks`RealT]}, {
               None, None, Ramp, None, Ramp, None, None, None, None}]], 
             If[
              IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
              ItemBox[
               NeuralNetworks`Private`NetGraph`vpathInfo[
                Part[{
                  NeuralNetworks`NetPath["Inputs", "Input"], 
                  NeuralNetworks`NetPath["Nodes", "squeeze1x1"], 
                  NeuralNetworks`NetPath["Nodes", "relu_squeeze1x1"], 
                  NeuralNetworks`NetPath["Nodes", "expand1x1"], 
                  NeuralNetworks`NetPath["Nodes", "relu_expand1x1"], 
                  NeuralNetworks`NetPath["Nodes", "expand3x3"], 
                  NeuralNetworks`NetPath["Nodes", "relu_expand3x3"], 
                  NeuralNetworks`NetPath["Nodes", "concat"], 
                  NeuralNetworks`NetPath["Outputs", "Output"]}, 
                 NeuralNetworks`Private`NetGraph`selection], 
                Association[
                "Input" -> 
                 NeuralNetworks`TensorT[{64, 56, 56}, NeuralNetworks`RealT]], 
                
                Association[
                "Output" -> 
                 NeuralNetworks`TensorT[{119, 1, 3}, NeuralNetworks`RealT]], 
                Association[
                "squeeze1x1" -> 
                 Association[
                  "Type" -> "Convolution", "Arrays" -> 
                   Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{20, 64, 9, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]]], 
                   "Parameters" -> 
                   Association[
                    "OutputChannels" -> 20, "KernelSize" -> {9, 3}, 
                    "Stride" -> {5, 4}, "PaddingSize" -> {16, 9}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {16, 18}], 
                   "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20, 16, 18}, 
                    NeuralNetworks`RealT]]], "relu_squeeze1x1" -> 
                 Association[
                  "Type" -> "Elementwise", "Arrays" -> Association[], 
                   "Parameters" -> 
                   Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {20, 16, 18}], "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20, 16, 18}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20, 16, 18}, 
                    NeuralNetworks`RealT]]], "expand1x1" -> 
                 Association[
                  "Type" -> "Convolution", "Arrays" -> 
                   Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{69, 20, 15, 4}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{69}, NeuralNetworks`RealT]]], 
                   "Parameters" -> 
                   Association[
                    "OutputChannels" -> 69, "KernelSize" -> {15, 4}, 
                    "Stride" -> {15, 12}, "PaddingSize" -> {6, 7}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 20, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 18}, "$OutputSize" -> {1, 3}], 
                   "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20, 16, 18}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{69, 1, 3}, 
                    NeuralNetworks`RealT]]], "relu_expand1x1" -> 
                 Association[
                  "Type" -> "Elementwise", "Arrays" -> Association[], 
                   "Parameters" -> 
                   Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {69, 1, 3}], "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{69, 1, 3}, NeuralNetworks`RealT]],
                    "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{69, 1, 3}, 
                    NeuralNetworks`RealT]]], "expand3x3" -> 
                 Association[
                  "Type" -> "Convolution", "Arrays" -> 
                   Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{50, 20, 7, 4}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], 
                   "Parameters" -> 
                   Association[
                    "OutputChannels" -> 50, "KernelSize" -> {7, 4}, 
                    "Stride" -> {15, 10}, "PaddingSize" -> {0, 4}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 20, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 18}, "$OutputSize" -> {1, 3}], 
                   "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20, 16, 18}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{50, 1, 3}, 
                    NeuralNetworks`RealT]]], "relu_expand3x3" -> 
                 Association[
                  "Type" -> "Elementwise", "Arrays" -> Association[], 
                   "Parameters" -> 
                   Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[7], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Plus, -1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[2], -1.}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    NeuralNetworks`Private`ScalarSymbol[4]}, 
                    NeuralNetworks`Private`ScalarSymbol[6] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[7] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[5], 
                    NeuralNetworks`Private`ScalarSymbol[6]}]]], 
                    "$Dimensions" -> {50, 1, 3}], "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{50, 1, 3}, NeuralNetworks`RealT]],
                    "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{50, 1, 3}, 
                    NeuralNetworks`RealT]]], "concat" -> 
                 Association[
                  "Type" -> "Catenate", "Arrays" -> Association[], 
                   "Parameters" -> Association["Level" -> 1, "$InputShapes" -> {
                    NeuralNetworks`TensorT[{69, 1, 3}, NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{50, 1, 3}, NeuralNetworks`RealT]},
                     "$InputCount" -> 2, "$OutputShape" -> 
                    NeuralNetworks`TensorT[{119, 1, 3}, 
                    NeuralNetworks`RealT]], "Inputs" -> Association["Input" -> {
                    NeuralNetworks`TensorT[{69, 1, 3}, NeuralNetworks`RealT], 
                    
                    
                    NeuralNetworks`TensorT[{50, 1, 3}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{119, 1, 3}, 
                    NeuralNetworks`RealT]]]]], Alignment -> Center], 
              Nothing]}], GridBoxAlignment -> {"Columns" -> {{Left}}}],
          ImageSizeCache->{554., {96.5, 104.5}},
          TrackedSymbols:>{NeuralNetworks`Private`NetGraph`selection}],
         Initialization:>{NetGraph}],
        BaselinePosition->(Top -> Scaled[3])], "]"}]}],
     False],
    Deploy],
   LineBreakWithin->False]}, {14,"14"->
  StyleBox[
   TagBox[
    TagBox[
     RowBox[{"NetGraph", 
      RowBox[{"[", 
       PanelBox[
        DynamicModuleBox[{NeuralNetworks`Private`NetGraph`selection = None}, 
         DynamicBox[GridBox[
           Map[List, {
             ToBoxes[
              
              NeuralNetworks`Private`NetGraph`netLayerPlot[{{1, 2}, {2, 3}, {
               3, 4}, {4, 5}, {3, 6}, {6, 7}, {5, 8}, {7, 8}, {8, 9}}, 
               Dynamic[NeuralNetworks`Private`NetGraph`selection], False, {
               "Input", "squeeze1x1", "relu_squeeze1x1", "expand1x1", 
                "relu_expand1x1", "expand3x3", "relu_expand3x3", "concat", 
                "Output"}, {Null, 
                Hue[0.61, 0.75, 1], 
                RGBColor[0.29, 0.29, 0.83], 
                RGBColor[1., 0.7, 0.31]}, {1, 2, 3, 2, 3, 2, 3, 4, 1}, {
               Null, ConvolutionLayer, ElementwiseLayer, CatenateLayer}, {
                NeuralNetworks`TensorT[{64, 56, 56}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{16, 43, 23}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{16, 43, 23}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{50, 3, 4}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{16, 43, 23}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{41, 3, 4}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{50, 3, 4}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{41, 3, 4}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{91, 3, 4}, NeuralNetworks`RealT]}, 
               None]], 
             If[
              IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
              ItemBox[
               NeuralNetworks`Private`NetGraph`vpathInfo[
                Part[{
                  NeuralNetworks`NetPath["Inputs", "Input"], 
                  NeuralNetworks`NetPath["Nodes", "squeeze1x1"], 
                  NeuralNetworks`NetPath["Nodes", "relu_squeeze1x1"], 
                  NeuralNetworks`NetPath["Nodes", "expand1x1"], 
                  NeuralNetworks`NetPath["Nodes", "relu_expand1x1"], 
                  NeuralNetworks`NetPath["Nodes", "expand3x3"], 
                  NeuralNetworks`NetPath["Nodes", "relu_expand3x3"], 
                  NeuralNetworks`NetPath["Nodes", "concat"], 
                  NeuralNetworks`NetPath["Outputs", "Output"]}, 
                 NeuralNetworks`Private`NetGraph`selection], 
                Association[
                "Input" -> 
                 NeuralNetworks`TensorT[{64, 56, 56}, NeuralNetworks`RealT]], 
                
                Association[
                "Output" -> 
                 NeuralNetworks`TensorT[{91, 3, 4}, NeuralNetworks`RealT]], 
                Association[
                "squeeze1x1" -> 
                 Association[
                  "Type" -> "Convolution", "Arrays" -> 
                   Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{16, 64, 8, 4}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]]], 
                   "Parameters" -> 
                   Association[
                    "OutputChannels" -> 16, "KernelSize" -> {8, 4}, 
                    "Stride" -> {2, 3}, "PaddingSize" -> {18, 8}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {43, 23}], 
                   "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{16, 43, 23}, 
                    NeuralNetworks`RealT]]], "relu_squeeze1x1" -> 
                 Association[
                  "Type" -> "Elementwise", "Arrays" -> Association[], 
                   "Parameters" -> 
                   Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[11], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[1], -1.}, 
                    NeuralNetworks`Private`ScalarSymbol[6] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    NeuralNetworks`Private`ScalarSymbol[5]}, 
                    NeuralNetworks`Private`ScalarSymbol[7] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[8] -> {Plus, -1., 
                    NeuralNetworks`Private`ScalarSymbol[7]}, 
                    NeuralNetworks`Private`ScalarSymbol[9] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[6], 
                    NeuralNetworks`Private`ScalarSymbol[8]}, 
                    NeuralNetworks`Private`ScalarSymbol[10] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[9]}, 
                    NeuralNetworks`Private`ScalarSymbol[11] -> {Plus, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    NeuralNetworks`Private`ScalarSymbol[10]}]]], 
                    "$Dimensions" -> {16, 43, 23}], "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{16, 43, 23}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{16, 43, 23}, 
                    NeuralNetworks`RealT]]], "expand1x1" -> 
                 Association[
                  "Type" -> "Convolution", "Arrays" -> 
                   Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{50, 16, 11, 1}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], 
                   "Parameters" -> 
                   Association[
                    "OutputChannels" -> 50, "KernelSize" -> {11, 1}, 
                    "Stride" -> {18, 13}, "PaddingSize" -> {6, 11}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 16, "$GroupNumber" -> 1, 
                    "$InputSize" -> {43, 23}, "$OutputSize" -> {3, 4}], 
                   "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{16, 43, 23}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{50, 3, 4}, 
                    NeuralNetworks`RealT]]], "relu_expand1x1" -> 
                 Association[
                  "Type" -> "Elementwise", "Arrays" -> Association[], 
                   "Parameters" -> 
                   Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[7], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {
                    Times, 0.11324796947929228`, 
                    NeuralNetworks`Private`ScalarSymbol[4]}, 
                    NeuralNetworks`Private`ScalarSymbol[6] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[5]}, 
                    NeuralNetworks`Private`ScalarSymbol[7] -> {Plus, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    NeuralNetworks`Private`ScalarSymbol[6]}]]], 
                    "$Dimensions" -> {50, 3, 4}], "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{50, 3, 4}, NeuralNetworks`RealT]],
                    "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{50, 3, 4}, 
                    NeuralNetworks`RealT]]], "expand3x3" -> 
                 Association[
                  "Type" -> "Convolution", "Arrays" -> 
                   Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{41, 16, 3, 6}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{41}, NeuralNetworks`RealT]]], 
                   "Parameters" -> 
                   Association[
                    "OutputChannels" -> 41, "KernelSize" -> {3, 6}, 
                    "Stride" -> {19, 7}, "PaddingSize" -> {4, 2}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 16, "$GroupNumber" -> 1, 
                    "$InputSize" -> {43, 23}, "$OutputSize" -> {3, 4}], 
                   "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{16, 43, 23}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{41, 3, 4}, 
                    NeuralNetworks`RealT]]], "relu_expand3x3" -> 
                 Association[
                  "Type" -> "Elementwise", "Arrays" -> Association[], 
                   "Parameters" -> 
                   Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[11], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[1], -1.}, 
                    NeuralNetworks`Private`ScalarSymbol[6] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    NeuralNetworks`Private`ScalarSymbol[5]}, 
                    NeuralNetworks`Private`ScalarSymbol[7] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[8] -> {Plus, -1., 
                    NeuralNetworks`Private`ScalarSymbol[7]}, 
                    NeuralNetworks`Private`ScalarSymbol[9] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[6], 
                    NeuralNetworks`Private`ScalarSymbol[8]}, 
                    NeuralNetworks`Private`ScalarSymbol[10] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[9]}, 
                    NeuralNetworks`Private`ScalarSymbol[11] -> {Plus, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    NeuralNetworks`Private`ScalarSymbol[10]}]]], 
                    "$Dimensions" -> {41, 3, 4}], "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{41, 3, 4}, NeuralNetworks`RealT]],
                    "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{41, 3, 4}, 
                    NeuralNetworks`RealT]]], "concat" -> 
                 Association[
                  "Type" -> "Catenate", "Arrays" -> Association[], 
                   "Parameters" -> Association["Level" -> 1, "$InputShapes" -> {
                    NeuralNetworks`TensorT[{50, 3, 4}, NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{41, 3, 4}, NeuralNetworks`RealT]},
                     "$InputCount" -> 2, "$OutputShape" -> 
                    NeuralNetworks`TensorT[{91, 3, 4}, NeuralNetworks`RealT]],
                    "Inputs" -> Association["Input" -> {
                    NeuralNetworks`TensorT[{50, 3, 4}, NeuralNetworks`RealT], 
                    
                    
                    NeuralNetworks`TensorT[{41, 3, 4}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{91, 3, 4}, 
                    NeuralNetworks`RealT]]]]], Alignment -> Center], 
              Nothing]}], GridBoxAlignment -> {"Columns" -> {{Left}}}],
          ImageSizeCache->{554., {95.5, 103.5}},
          TrackedSymbols:>{NeuralNetworks`Private`NetGraph`selection}],
         Initialization:>{NetGraph}],
        BaselinePosition->(Top -> Scaled[3])], "]"}]}],
     False],
    Deploy],
   LineBreakWithin->False]}, {15,"15"->
  StyleBox[
   TagBox[
    TagBox[
     RowBox[{"NetGraph", 
      RowBox[{"[", 
       PanelBox[
        DynamicModuleBox[{NeuralNetworks`Private`NetGraph`selection = None}, 
         DynamicBox[GridBox[
           Map[List, {
             ToBoxes[
              
              NeuralNetworks`Private`NetGraph`netLayerPlot[{{1, 2}, {2, 3}, {
               3, 4}, {4, 5}, {3, 6}, {6, 7}, {5, 8}, {7, 8}, {8, 9}}, 
               Dynamic[NeuralNetworks`Private`NetGraph`selection], False, {
               "Input", "squeeze1x1", "relu_squeeze1x1", "expand1x1", 
                "relu_expand1x1", "expand3x3", "relu_expand3x3", "concat", 
                "Output"}, {Null, 
                Hue[0.61, 0.75, 1], 
                RGBColor[0.29, 0.29, 0.83], 
                RGBColor[1., 0.7, 0.31]}, {1, 2, 3, 2, 3, 2, 3, 4, 1}, {
               Null, ConvolutionLayer, ElementwiseLayer, CatenateLayer}, {
                NeuralNetworks`TensorT[{64, 56, 56}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{20, 23, 10}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{20, 23, 10}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{46, 2, 2}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{20, 23, 10}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{52, 2, 2}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{46, 2, 2}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{52, 2, 2}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{98, 2, 2}, NeuralNetworks`RealT]}, {
               None, None, None, None, LogisticSigmoid, None, LogisticSigmoid,
                 None, None}]], 
             If[
              IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
              ItemBox[
               NeuralNetworks`Private`NetGraph`vpathInfo[
                Part[{
                  NeuralNetworks`NetPath["Inputs", "Input"], 
                  NeuralNetworks`NetPath["Nodes", "squeeze1x1"], 
                  NeuralNetworks`NetPath["Nodes", "relu_squeeze1x1"], 
                  NeuralNetworks`NetPath["Nodes", "expand1x1"], 
                  NeuralNetworks`NetPath["Nodes", "relu_expand1x1"], 
                  NeuralNetworks`NetPath["Nodes", "expand3x3"], 
                  NeuralNetworks`NetPath["Nodes", "relu_expand3x3"], 
                  NeuralNetworks`NetPath["Nodes", "concat"], 
                  NeuralNetworks`NetPath["Outputs", "Output"]}, 
                 NeuralNetworks`Private`NetGraph`selection], 
                Association[
                "Input" -> 
                 NeuralNetworks`TensorT[{64, 56, 56}, NeuralNetworks`RealT]], 
                
                Association[
                "Output" -> 
                 NeuralNetworks`TensorT[{98, 2, 2}, NeuralNetworks`RealT]], 
                Association[
                "squeeze1x1" -> 
                 Association[
                  "Type" -> "Convolution", "Arrays" -> 
                   Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{20, 64, 5, 7}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]]], 
                   "Parameters" -> 
                   Association[
                    "OutputChannels" -> 20, "KernelSize" -> {5, 7}, 
                    "Stride" -> {4, 7}, "PaddingSize" -> {20, 7}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {23, 10}], 
                   "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20, 23, 10}, 
                    NeuralNetworks`RealT]]], "relu_squeeze1x1" -> 
                 Association[
                  "Type" -> "Elementwise", "Arrays" -> Association[], 
                   "Parameters" -> 
                   Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[7], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {
                    Times, 0.36803255636056, 
                    NeuralNetworks`Private`ScalarSymbol[4]}, 
                    NeuralNetworks`Private`ScalarSymbol[6] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[5]}, 
                    NeuralNetworks`Private`ScalarSymbol[7] -> {Plus, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    NeuralNetworks`Private`ScalarSymbol[6]}]]], 
                    "$Dimensions" -> {20, 23, 10}], "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20, 23, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20, 23, 10}, 
                    NeuralNetworks`RealT]]], "expand1x1" -> 
                 Association[
                  "Type" -> "Convolution", "Arrays" -> 
                   Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{46, 20, 11, 2}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{46}, NeuralNetworks`RealT]]], 
                   "Parameters" -> 
                   Association[
                    "OutputChannels" -> 46, "KernelSize" -> {11, 2}, 
                    "Stride" -> {17, 15}, "PaddingSize" -> {5, 10}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 20, "$GroupNumber" -> 1, 
                    "$InputSize" -> {23, 10}, "$OutputSize" -> {2, 2}], 
                   "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20, 23, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{46, 2, 2}, 
                    NeuralNetworks`RealT]]], "relu_expand1x1" -> 
                 Association[
                  "Type" -> "Elementwise", "Arrays" -> Association[], 
                   "Parameters" -> 
                   Association[
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {46, 2, 2}], "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{46, 2, 2}, NeuralNetworks`RealT]],
                    "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{46, 2, 2}, 
                    NeuralNetworks`RealT]]], "expand3x3" -> 
                 Association[
                  "Type" -> "Convolution", "Arrays" -> 
                   Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{52, 20, 6, 9}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{52}, NeuralNetworks`RealT]]], 
                   "Parameters" -> 
                   Association[
                    "OutputChannels" -> 52, "KernelSize" -> {6, 9}, 
                    "Stride" -> {22, 9}, "PaddingSize" -> {8, 4}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 20, "$GroupNumber" -> 1, 
                    "$InputSize" -> {23, 10}, "$OutputSize" -> {2, 2}], 
                   "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20, 23, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{52, 2, 2}, 
                    NeuralNetworks`RealT]]], "relu_expand3x3" -> 
                 Association[
                  "Type" -> "Elementwise", "Arrays" -> Association[], 
                   "Parameters" -> 
                   Association[
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {52, 2, 2}], "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{52, 2, 2}, NeuralNetworks`RealT]],
                    "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{52, 2, 2}, 
                    NeuralNetworks`RealT]]], "concat" -> 
                 Association[
                  "Type" -> "Catenate", "Arrays" -> Association[], 
                   "Parameters" -> Association["Level" -> 1, "$InputShapes" -> {
                    NeuralNetworks`TensorT[{46, 2, 2}, NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{52, 2, 2}, NeuralNetworks`RealT]},
                     "$InputCount" -> 2, "$OutputShape" -> 
                    NeuralNetworks`TensorT[{98, 2, 2}, NeuralNetworks`RealT]],
                    "Inputs" -> Association["Input" -> {
                    NeuralNetworks`TensorT[{46, 2, 2}, NeuralNetworks`RealT], 
                    
                    
                    NeuralNetworks`TensorT[{52, 2, 2}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{98, 2, 2}, 
                    NeuralNetworks`RealT]]]]], Alignment -> Center], 
              Nothing]}], GridBoxAlignment -> {"Columns" -> {{Left}}}],
          ImageSizeCache->{554., {96.5, 104.5}},
          TrackedSymbols:>{NeuralNetworks`Private`NetGraph`selection}],
         Initialization:>{NetGraph}],
        BaselinePosition->(Top -> Scaled[3])], "]"}]}],
     False],
    Deploy],
   LineBreakWithin->False]}, {16,"16"->
  StyleBox[
   TagBox[
    TagBox[
     RowBox[{"NetGraph", 
      RowBox[{"[", 
       PanelBox[
        DynamicModuleBox[{NeuralNetworks`Private`NetGraph`selection = None}, 
         DynamicBox[GridBox[
           Map[List, {
             ToBoxes[
              
              NeuralNetworks`Private`NetGraph`netLayerPlot[{{1, 2}, {2, 3}, {
               3, 4}, {4, 5}, {3, 6}, {6, 7}, {5, 8}, {7, 8}, {8, 9}}, 
               Dynamic[NeuralNetworks`Private`NetGraph`selection], False, {
               "Input", "squeeze1x1", "relu_squeeze1x1", "expand1x1", 
                "relu_expand1x1", "expand3x3", "relu_expand3x3", "concat", 
                "Output"}, {Null, 
                Hue[0.61, 0.75, 1], 
                RGBColor[0.29, 0.29, 0.83], 
                RGBColor[1., 0.7, 0.31]}, {1, 2, 3, 2, 3, 2, 3, 4, 1}, {
               Null, ConvolutionLayer, ElementwiseLayer, CatenateLayer}, {
                NeuralNetworks`TensorT[{64, 56, 56}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{12, 16, 12}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{12, 16, 12}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{32, 1, 2}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{12, 16, 12}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{37, 1, 2}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{32, 1, 2}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{37, 1, 2}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{69, 1, 2}, NeuralNetworks`RealT]}, {
               None, None, None, None, None, None, LogisticSigmoid, None, 
                None}]], 
             If[
              IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
              ItemBox[
               NeuralNetworks`Private`NetGraph`vpathInfo[
                Part[{
                  NeuralNetworks`NetPath["Inputs", "Input"], 
                  NeuralNetworks`NetPath["Nodes", "squeeze1x1"], 
                  NeuralNetworks`NetPath["Nodes", "relu_squeeze1x1"], 
                  NeuralNetworks`NetPath["Nodes", "expand1x1"], 
                  NeuralNetworks`NetPath["Nodes", "relu_expand1x1"], 
                  NeuralNetworks`NetPath["Nodes", "expand3x3"], 
                  NeuralNetworks`NetPath["Nodes", "relu_expand3x3"], 
                  NeuralNetworks`NetPath["Nodes", "concat"], 
                  NeuralNetworks`NetPath["Outputs", "Output"]}, 
                 NeuralNetworks`Private`NetGraph`selection], 
                Association[
                "Input" -> 
                 NeuralNetworks`TensorT[{64, 56, 56}, NeuralNetworks`RealT]], 
                
                Association[
                "Output" -> 
                 NeuralNetworks`TensorT[{69, 1, 2}, NeuralNetworks`RealT]], 
                Association[
                "squeeze1x1" -> 
                 Association[
                  "Type" -> "Convolution", "Arrays" -> 
                   Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{12, 64, 2, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{12}, NeuralNetworks`RealT]]], 
                   "Parameters" -> 
                   Association[
                    "OutputChannels" -> 12, "KernelSize" -> {2, 3}, 
                    "Stride" -> {6, 6}, "PaddingSize" -> {19, 7}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {16, 12}], 
                   "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{12, 16, 12}, 
                    NeuralNetworks`RealT]]], "relu_squeeze1x1" -> 
                 Association[
                  "Type" -> "Elementwise", "Arrays" -> Association[], 
                   "Parameters" -> 
                   Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[7], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Plus, -1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[2], -1.}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    NeuralNetworks`Private`ScalarSymbol[4]}, 
                    NeuralNetworks`Private`ScalarSymbol[6] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[7] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[5], 
                    NeuralNetworks`Private`ScalarSymbol[6]}]]], 
                    "$Dimensions" -> {12, 16, 12}], "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{12, 16, 12}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{12, 16, 12}, 
                    NeuralNetworks`RealT]]], "expand1x1" -> 
                 Association[
                  "Type" -> "Convolution", "Arrays" -> 
                   Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{32, 12, 10, 1}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]]], 
                   "Parameters" -> 
                   Association[
                    "OutputChannels" -> 32, "KernelSize" -> {10, 1}, 
                    "Stride" -> {21, 18}, "PaddingSize" -> {3, 9}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 12, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 12}, "$OutputSize" -> {1, 2}], 
                   "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{12, 16, 12}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{32, 1, 2}, 
                    NeuralNetworks`RealT]]], "relu_expand1x1" -> 
                 Association[
                  "Type" -> "Elementwise", "Arrays" -> Association[], 
                   "Parameters" -> 
                   Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[7], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Plus, -1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[2], -1.}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    NeuralNetworks`Private`ScalarSymbol[4]}, 
                    NeuralNetworks`Private`ScalarSymbol[6] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[7] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[5], 
                    NeuralNetworks`Private`ScalarSymbol[6]}]]], 
                    "$Dimensions" -> {32, 1, 2}], "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{32, 1, 2}, NeuralNetworks`RealT]],
                    "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{32, 1, 2}, 
                    NeuralNetworks`RealT]]], "expand3x3" -> 
                 Association[
                  "Type" -> "Convolution", "Arrays" -> 
                   Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{37, 12, 10, 10}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{37}, NeuralNetworks`RealT]]], 
                   "Parameters" -> 
                   Association[
                    "OutputChannels" -> 37, "KernelSize" -> {10, 10}, 
                    "Stride" -> {22, 10}, "PaddingSize" -> {4, 8}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 12, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 12}, "$OutputSize" -> {1, 2}], 
                   "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{12, 16, 12}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{37, 1, 2}, 
                    NeuralNetworks`RealT]]], "relu_expand3x3" -> 
                 Association[
                  "Type" -> "Elementwise", "Arrays" -> Association[], 
                   "Parameters" -> 
                   Association[
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {37, 1, 2}], "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{37, 1, 2}, NeuralNetworks`RealT]],
                    "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{37, 1, 2}, 
                    NeuralNetworks`RealT]]], "concat" -> 
                 Association[
                  "Type" -> "Catenate", "Arrays" -> Association[], 
                   "Parameters" -> Association["Level" -> 1, "$InputShapes" -> {
                    NeuralNetworks`TensorT[{32, 1, 2}, NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{37, 1, 2}, NeuralNetworks`RealT]},
                     "$InputCount" -> 2, "$OutputShape" -> 
                    NeuralNetworks`TensorT[{69, 1, 2}, NeuralNetworks`RealT]],
                    "Inputs" -> Association["Input" -> {
                    NeuralNetworks`TensorT[{32, 1, 2}, NeuralNetworks`RealT], 
                    
                    
                    NeuralNetworks`TensorT[{37, 1, 2}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{69, 1, 2}, 
                    NeuralNetworks`RealT]]]]], Alignment -> Center], 
              Nothing]}], GridBoxAlignment -> {"Columns" -> {{Left}}}],
          ImageSizeCache->{554., {96.5, 104.5}},
          TrackedSymbols:>{NeuralNetworks`Private`NetGraph`selection}],
         Initialization:>{NetGraph}],
        BaselinePosition->(Top -> Scaled[3])], "]"}]}],
     False],
    Deploy],
   LineBreakWithin->False]}, {17,"17"->
  StyleBox[
   TagBox[
    TagBox[
     RowBox[{"NetGraph", 
      RowBox[{"[", 
       PanelBox[
        DynamicModuleBox[{NeuralNetworks`Private`NetGraph`selection = None}, 
         DynamicBox[GridBox[
           Map[List, {
             ToBoxes[
              
              NeuralNetworks`Private`NetGraph`netLayerPlot[{{1, 2}, {2, 3}, {
               3, 4}, {4, 5}, {3, 6}, {6, 7}, {5, 8}, {7, 8}, {8, 9}}, 
               Dynamic[NeuralNetworks`Private`NetGraph`selection], False, {
               "Input", "squeeze1x1", "relu_squeeze1x1", "expand1x1", 
                "relu_expand1x1", "expand3x3", "relu_expand3x3", "concat", 
                "Output"}, {Null, 
                Hue[0.61, 0.75, 1], 
                RGBColor[0.29, 0.29, 0.83], 
                RGBColor[1., 0.7, 0.31]}, {1, 2, 3, 2, 3, 2, 3, 4, 1}, {
               Null, ConvolutionLayer, ElementwiseLayer, CatenateLayer}, {
                NeuralNetworks`TensorT[{64, 56, 56}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{24, 24, 17}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{24, 24, 17}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{29, 1, 2}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{24, 24, 17}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{53, 1, 2}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{29, 1, 2}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{53, 1, 2}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{82, 1, 2}, NeuralNetworks`RealT]}, {
               None, None, None, None, None, None, Ramp, None, None}]], 
             If[
              IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
              ItemBox[
               NeuralNetworks`Private`NetGraph`vpathInfo[
                Part[{
                  NeuralNetworks`NetPath["Inputs", "Input"], 
                  NeuralNetworks`NetPath["Nodes", "squeeze1x1"], 
                  NeuralNetworks`NetPath["Nodes", "relu_squeeze1x1"], 
                  NeuralNetworks`NetPath["Nodes", "expand1x1"], 
                  NeuralNetworks`NetPath["Nodes", "relu_expand1x1"], 
                  NeuralNetworks`NetPath["Nodes", "expand3x3"], 
                  NeuralNetworks`NetPath["Nodes", "relu_expand3x3"], 
                  NeuralNetworks`NetPath["Nodes", "concat"], 
                  NeuralNetworks`NetPath["Outputs", "Output"]}, 
                 NeuralNetworks`Private`NetGraph`selection], 
                Association[
                "Input" -> 
                 NeuralNetworks`TensorT[{64, 56, 56}, NeuralNetworks`RealT]], 
                
                Association[
                "Output" -> 
                 NeuralNetworks`TensorT[{82, 1, 2}, NeuralNetworks`RealT]], 
                Association[
                "squeeze1x1" -> 
                 Association[
                  "Type" -> "Convolution", "Arrays" -> 
                   Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{24, 64, 3, 6}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{24}, NeuralNetworks`RealT]]], 
                   "Parameters" -> 
                   Association[
                    "OutputChannels" -> 24, "KernelSize" -> {3, 6}, 
                    "Stride" -> {4, 4}, "PaddingSize" -> {20, 8}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {24, 17}], 
                   "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{24, 24, 17}, 
                    NeuralNetworks`RealT]]], "relu_squeeze1x1" -> 
                 Association[
                  "Type" -> "Elementwise", "Arrays" -> Association[], 
                   "Parameters" -> 
                   Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[7], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Plus, -1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[2], -1.}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    NeuralNetworks`Private`ScalarSymbol[4]}, 
                    NeuralNetworks`Private`ScalarSymbol[6] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[7] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[5], 
                    NeuralNetworks`Private`ScalarSymbol[6]}]]], 
                    "$Dimensions" -> {24, 24, 17}], "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{24, 24, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{24, 24, 17}, 
                    NeuralNetworks`RealT]]], "expand1x1" -> 
                 Association[
                  "Type" -> "Convolution", "Arrays" -> 
                   Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{29, 24, 13, 4}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{29}, NeuralNetworks`RealT]]], 
                   "Parameters" -> 
                   Association[
                    "OutputChannels" -> 29, "KernelSize" -> {13, 4}, 
                    "Stride" -> {21, 17}, "PaddingSize" -> {1, 7}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 24, "$GroupNumber" -> 1, 
                    "$InputSize" -> {24, 17}, "$OutputSize" -> {1, 2}], 
                   "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{24, 24, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{29, 1, 2}, 
                    NeuralNetworks`RealT]]], "relu_expand1x1" -> 
                 Association[
                  "Type" -> "Elementwise", "Arrays" -> Association[], 
                   "Parameters" -> 
                   Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[11], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[1], -1.}, 
                    NeuralNetworks`Private`ScalarSymbol[6] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    NeuralNetworks`Private`ScalarSymbol[5]}, 
                    NeuralNetworks`Private`ScalarSymbol[7] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[8] -> {Plus, -1., 
                    NeuralNetworks`Private`ScalarSymbol[7]}, 
                    NeuralNetworks`Private`ScalarSymbol[9] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[6], 
                    NeuralNetworks`Private`ScalarSymbol[8]}, 
                    NeuralNetworks`Private`ScalarSymbol[10] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[9]}, 
                    NeuralNetworks`Private`ScalarSymbol[11] -> {Plus, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    NeuralNetworks`Private`ScalarSymbol[10]}]]], 
                    "$Dimensions" -> {29, 1, 2}], "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{29, 1, 2}, NeuralNetworks`RealT]],
                    "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{29, 1, 2}, 
                    NeuralNetworks`RealT]]], "expand3x3" -> 
                 Association[
                  "Type" -> "Convolution", "Arrays" -> 
                   Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{53, 24, 14, 8}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{53}, NeuralNetworks`RealT]]], 
                   "Parameters" -> 
                   Association[
                    "OutputChannels" -> 53, "KernelSize" -> {14, 8}, 
                    "Stride" -> {26, 12}, "PaddingSize" -> {2, 6}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 24, "$GroupNumber" -> 1, 
                    "$InputSize" -> {24, 17}, "$OutputSize" -> {1, 2}], 
                   "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{24, 24, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{53, 1, 2}, 
                    NeuralNetworks`RealT]]], "relu_expand3x3" -> 
                 Association[
                  "Type" -> "Elementwise", "Arrays" -> Association[], 
                   "Parameters" -> 
                   Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {53, 1, 2}], "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{53, 1, 2}, NeuralNetworks`RealT]],
                    "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{53, 1, 2}, 
                    NeuralNetworks`RealT]]], "concat" -> 
                 Association[
                  "Type" -> "Catenate", "Arrays" -> Association[], 
                   "Parameters" -> Association["Level" -> 1, "$InputShapes" -> {
                    NeuralNetworks`TensorT[{29, 1, 2}, NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{53, 1, 2}, NeuralNetworks`RealT]},
                     "$InputCount" -> 2, "$OutputShape" -> 
                    NeuralNetworks`TensorT[{82, 1, 2}, NeuralNetworks`RealT]],
                    "Inputs" -> Association["Input" -> {
                    NeuralNetworks`TensorT[{29, 1, 2}, NeuralNetworks`RealT], 
                    
                    
                    NeuralNetworks`TensorT[{53, 1, 2}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{82, 1, 2}, 
                    NeuralNetworks`RealT]]]]], Alignment -> Center], 
              Nothing]}], GridBoxAlignment -> {"Columns" -> {{Left}}}],
          ImageSizeCache->{554., {96.5, 104.5}},
          TrackedSymbols:>{NeuralNetworks`Private`NetGraph`selection}],
         Initialization:>{NetGraph}],
        BaselinePosition->(Top -> Scaled[3])], "]"}]}],
     False],
    Deploy],
   LineBreakWithin->False]}, {18,"18"->
  StyleBox[
   TagBox[
    TagBox[
     RowBox[{"NetGraph", 
      RowBox[{"[", 
       PanelBox[
        DynamicModuleBox[{NeuralNetworks`Private`NetGraph`selection = None}, 
         DynamicBox[GridBox[
           Map[List, {
             ToBoxes[
              
              NeuralNetworks`Private`NetGraph`netLayerPlot[{{1, 2}, {2, 3}, {
               3, 4}, {4, 5}, {3, 6}, {6, 7}, {5, 8}, {7, 8}, {8, 9}}, 
               Dynamic[NeuralNetworks`Private`NetGraph`selection], False, {
               "Input", "squeeze1x1", "relu_squeeze1x1", "expand1x1", 
                "relu_expand1x1", "expand3x3", "relu_expand3x3", "concat", 
                "Output"}, {Null, 
                Hue[0.61, 0.75, 1], 
                RGBColor[0.29, 0.29, 0.83], 
                RGBColor[1., 0.7, 0.31]}, {1, 2, 3, 2, 3, 2, 3, 4, 1}, {
               Null, ConvolutionLayer, ElementwiseLayer, CatenateLayer}, {
                NeuralNetworks`TensorT[{64, 56, 56}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{36, 90, 11}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{36, 90, 11}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{26, 4, 1}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{36, 90, 11}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{57, 4, 1}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{26, 4, 1}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{57, 4, 1}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{83, 4, 1}, NeuralNetworks`RealT]}, {
               None, None, Tanh, None, None, None, None, None, None}]], 
             If[
              IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
              ItemBox[
               NeuralNetworks`Private`NetGraph`vpathInfo[
                Part[{
                  NeuralNetworks`NetPath["Inputs", "Input"], 
                  NeuralNetworks`NetPath["Nodes", "squeeze1x1"], 
                  NeuralNetworks`NetPath["Nodes", "relu_squeeze1x1"], 
                  NeuralNetworks`NetPath["Nodes", "expand1x1"], 
                  NeuralNetworks`NetPath["Nodes", "relu_expand1x1"], 
                  NeuralNetworks`NetPath["Nodes", "expand3x3"], 
                  NeuralNetworks`NetPath["Nodes", "relu_expand3x3"], 
                  NeuralNetworks`NetPath["Nodes", "concat"], 
                  NeuralNetworks`NetPath["Outputs", "Output"]}, 
                 NeuralNetworks`Private`NetGraph`selection], 
                Association[
                "Input" -> 
                 NeuralNetworks`TensorT[{64, 56, 56}, NeuralNetworks`RealT]], 
                
                Association[
                "Output" -> 
                 NeuralNetworks`TensorT[{83, 4, 1}, NeuralNetworks`RealT]], 
                Association[
                "squeeze1x1" -> 
                 Association[
                  "Type" -> "Convolution", "Arrays" -> 
                   Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{36, 64, 5, 10}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{36}, NeuralNetworks`RealT]]], 
                   "Parameters" -> 
                   Association[
                    "OutputChannels" -> 36, "KernelSize" -> {5, 10}, 
                    "Stride" -> {1, 7}, "PaddingSize" -> {19, 12}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {90, 11}], 
                   "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{36, 90, 11}, 
                    NeuralNetworks`RealT]]], "relu_squeeze1x1" -> 
                 Association[
                  "Type" -> "Elementwise", "Arrays" -> Association[], 
                   "Parameters" -> 
                   Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {36, 90, 11}], "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{36, 90, 11}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{36, 90, 11}, 
                    NeuralNetworks`RealT]]], "expand1x1" -> 
                 Association[
                  "Type" -> "Convolution", "Arrays" -> 
                   Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{26, 36, 14, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{26}, NeuralNetworks`RealT]]], 
                   "Parameters" -> 
                   Association[
                    "OutputChannels" -> 26, "KernelSize" -> {14, 3}, 
                    "Stride" -> {24, 20}, "PaddingSize" -> {2, 3}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 36, "$GroupNumber" -> 1, 
                    "$InputSize" -> {90, 11}, "$OutputSize" -> {4, 1}], 
                   "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{36, 90, 11}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{26, 4, 1}, 
                    NeuralNetworks`RealT]]], "relu_expand1x1" -> 
                 Association[
                  "Type" -> "Elementwise", "Arrays" -> Association[], 
                   "Parameters" -> 
                   Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[11], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[1], -1.}, 
                    NeuralNetworks`Private`ScalarSymbol[6] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    NeuralNetworks`Private`ScalarSymbol[5]}, 
                    NeuralNetworks`Private`ScalarSymbol[7] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[8] -> {Plus, -1., 
                    NeuralNetworks`Private`ScalarSymbol[7]}, 
                    NeuralNetworks`Private`ScalarSymbol[9] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[6], 
                    NeuralNetworks`Private`ScalarSymbol[8]}, 
                    NeuralNetworks`Private`ScalarSymbol[10] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[9]}, 
                    NeuralNetworks`Private`ScalarSymbol[11] -> {Plus, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    NeuralNetworks`Private`ScalarSymbol[10]}]]], 
                    "$Dimensions" -> {26, 4, 1}], "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{26, 4, 1}, NeuralNetworks`RealT]],
                    "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{26, 4, 1}, 
                    NeuralNetworks`RealT]]], "expand3x3" -> 
                 Association[
                  "Type" -> "Convolution", "Arrays" -> 
                   Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{57, 36, 18, 11}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{57}, NeuralNetworks`RealT]]], 
                   "Parameters" -> 
                   Association[
                    "OutputChannels" -> 57, "KernelSize" -> {18, 11}, 
                    "Stride" -> {27, 10}, "PaddingSize" -> {6, 2}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 36, "$GroupNumber" -> 1, 
                    "$InputSize" -> {90, 11}, "$OutputSize" -> {4, 1}], 
                   "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{36, 90, 11}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{57, 4, 1}, 
                    NeuralNetworks`RealT]]], "relu_expand3x3" -> 
                 Association[
                  "Type" -> "Elementwise", "Arrays" -> Association[], 
                   "Parameters" -> 
                   Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[11], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[1], -1.}, 
                    NeuralNetworks`Private`ScalarSymbol[6] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    NeuralNetworks`Private`ScalarSymbol[5]}, 
                    NeuralNetworks`Private`ScalarSymbol[7] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[8] -> {Plus, -1., 
                    NeuralNetworks`Private`ScalarSymbol[7]}, 
                    NeuralNetworks`Private`ScalarSymbol[9] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[6], 
                    NeuralNetworks`Private`ScalarSymbol[8]}, 
                    NeuralNetworks`Private`ScalarSymbol[10] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[9]}, 
                    NeuralNetworks`Private`ScalarSymbol[11] -> {Plus, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    NeuralNetworks`Private`ScalarSymbol[10]}]]], 
                    "$Dimensions" -> {57, 4, 1}], "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{57, 4, 1}, NeuralNetworks`RealT]],
                    "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{57, 4, 1}, 
                    NeuralNetworks`RealT]]], "concat" -> 
                 Association[
                  "Type" -> "Catenate", "Arrays" -> Association[], 
                   "Parameters" -> Association["Level" -> 1, "$InputShapes" -> {
                    NeuralNetworks`TensorT[{26, 4, 1}, NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{57, 4, 1}, NeuralNetworks`RealT]},
                     "$InputCount" -> 2, "$OutputShape" -> 
                    NeuralNetworks`TensorT[{83, 4, 1}, NeuralNetworks`RealT]],
                    "Inputs" -> Association["Input" -> {
                    NeuralNetworks`TensorT[{26, 4, 1}, NeuralNetworks`RealT], 
                    
                    
                    NeuralNetworks`TensorT[{57, 4, 1}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{83, 4, 1}, 
                    NeuralNetworks`RealT]]]]], Alignment -> Center], 
              Nothing]}], GridBoxAlignment -> {"Columns" -> {{Left}}}],
          ImageSizeCache->{554., {96.5, 104.5}},
          TrackedSymbols:>{NeuralNetworks`Private`NetGraph`selection}],
         Initialization:>{NetGraph}],
        BaselinePosition->(Top -> Scaled[3])], "]"}]}],
     False],
    Deploy],
   LineBreakWithin->False]}, {19,"19"->
  StyleBox[
   TagBox[
    TagBox[
     RowBox[{"NetGraph", 
      RowBox[{"[", 
       PanelBox[
        DynamicModuleBox[{NeuralNetworks`Private`NetGraph`selection = None}, 
         DynamicBox[GridBox[
           Map[List, {
             ToBoxes[
              
              NeuralNetworks`Private`NetGraph`netLayerPlot[{{1, 2}, {2, 3}, {
               3, 4}, {4, 5}, {3, 6}, {6, 7}, {5, 8}, {7, 8}, {8, 9}}, 
               Dynamic[NeuralNetworks`Private`NetGraph`selection], False, {
               "Input", "squeeze1x1", "relu_squeeze1x1", "expand1x1", 
                "relu_expand1x1", "expand3x3", "relu_expand3x3", "concat", 
                "Output"}, {Null, 
                Hue[0.61, 0.75, 1], 
                RGBColor[0.29, 0.29, 0.83], 
                RGBColor[1., 0.7, 0.31]}, {1, 2, 3, 2, 3, 2, 3, 4, 1}, {
               Null, ConvolutionLayer, ElementwiseLayer, CatenateLayer}, {
                NeuralNetworks`TensorT[{64, 56, 56}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{44, 31, 11}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{44, 31, 11}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{17, 2, 1}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{44, 31, 11}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{52, 2, 1}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{17, 2, 1}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{52, 2, 1}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{69, 2, 1}, NeuralNetworks`RealT]}, {
               None, None, None, None, Ramp, None, None, None, None}]], 
             If[
              IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
              ItemBox[
               NeuralNetworks`Private`NetGraph`vpathInfo[
                Part[{
                  NeuralNetworks`NetPath["Inputs", "Input"], 
                  NeuralNetworks`NetPath["Nodes", "squeeze1x1"], 
                  NeuralNetworks`NetPath["Nodes", "relu_squeeze1x1"], 
                  NeuralNetworks`NetPath["Nodes", "expand1x1"], 
                  NeuralNetworks`NetPath["Nodes", "relu_expand1x1"], 
                  NeuralNetworks`NetPath["Nodes", "expand3x3"], 
                  NeuralNetworks`NetPath["Nodes", "relu_expand3x3"], 
                  NeuralNetworks`NetPath["Nodes", "concat"], 
                  NeuralNetworks`NetPath["Outputs", "Output"]}, 
                 NeuralNetworks`Private`NetGraph`selection], 
                Association[
                "Input" -> 
                 NeuralNetworks`TensorT[{64, 56, 56}, NeuralNetworks`RealT]], 
                
                Association[
                "Output" -> 
                 NeuralNetworks`TensorT[{69, 2, 1}, NeuralNetworks`RealT]], 
                Association[
                "squeeze1x1" -> 
                 Association[
                  "Type" -> "Convolution", "Arrays" -> 
                   Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{44, 64, 6, 13}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{44}, NeuralNetworks`RealT]]], 
                   "Parameters" -> 
                   Association[
                    "OutputChannels" -> 44, "KernelSize" -> {6, 13}, 
                    "Stride" -> {3, 6}, "PaddingSize" -> {20, 10}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {31, 11}], 
                   "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{44, 31, 11}, 
                    NeuralNetworks`RealT]]], "relu_squeeze1x1" -> 
                 Association[
                  "Type" -> "Elementwise", "Arrays" -> Association[], 
                   "Parameters" -> 
                   Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[11], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[1], -1.}, 
                    NeuralNetworks`Private`ScalarSymbol[6] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    NeuralNetworks`Private`ScalarSymbol[5]}, 
                    NeuralNetworks`Private`ScalarSymbol[7] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[8] -> {Plus, -1., 
                    NeuralNetworks`Private`ScalarSymbol[7]}, 
                    NeuralNetworks`Private`ScalarSymbol[9] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[6], 
                    NeuralNetworks`Private`ScalarSymbol[8]}, 
                    NeuralNetworks`Private`ScalarSymbol[10] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[9]}, 
                    NeuralNetworks`Private`ScalarSymbol[11] -> {Plus, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    NeuralNetworks`Private`ScalarSymbol[10]}]]], 
                    "$Dimensions" -> {44, 31, 11}], "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{44, 31, 11}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{44, 31, 11}, 
                    NeuralNetworks`RealT]]], "expand1x1" -> 
                 Association[
                  "Type" -> "Convolution", "Arrays" -> 
                   Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{17, 44, 15, 7}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{17}, NeuralNetworks`RealT]]], 
                   "Parameters" -> 
                   Association[
                    "OutputChannels" -> 17, "KernelSize" -> {15, 7}, 
                    "Stride" -> {20, 22}, "PaddingSize" -> {6, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 44, "$GroupNumber" -> 1, 
                    "$InputSize" -> {31, 11}, "$OutputSize" -> {2, 1}], 
                   "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{44, 31, 11}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{17, 2, 1}, 
                    NeuralNetworks`RealT]]], "relu_expand1x1" -> 
                 Association[
                  "Type" -> "Elementwise", "Arrays" -> Association[], 
                   "Parameters" -> 
                   Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {17, 2, 1}], "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{17, 2, 1}, NeuralNetworks`RealT]],
                    "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{17, 2, 1}, 
                    NeuralNetworks`RealT]]], "expand3x3" -> 
                 Association[
                  "Type" -> "Convolution", "Arrays" -> 
                   Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{52, 44, 22, 10}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{52}, NeuralNetworks`RealT]]], 
                   "Parameters" -> 
                   Association[
                    "OutputChannels" -> 52, "KernelSize" -> {22, 10}, 
                    "Stride" -> {26, 14}, "PaddingSize" -> {10, 2}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 44, "$GroupNumber" -> 1, 
                    "$InputSize" -> {31, 11}, "$OutputSize" -> {2, 1}], 
                   "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{44, 31, 11}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{52, 2, 1}, 
                    NeuralNetworks`RealT]]], "relu_expand3x3" -> 
                 Association[
                  "Type" -> "Elementwise", "Arrays" -> Association[], 
                   "Parameters" -> 
                   Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[11], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[3]}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[1], -1.}, 
                    NeuralNetworks`Private`ScalarSymbol[6] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    NeuralNetworks`Private`ScalarSymbol[5]}, 
                    NeuralNetworks`Private`ScalarSymbol[7] -> {Exp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[8] -> {Plus, -1., 
                    NeuralNetworks`Private`ScalarSymbol[7]}, 
                    NeuralNetworks`Private`ScalarSymbol[9] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[6], 
                    NeuralNetworks`Private`ScalarSymbol[8]}, 
                    NeuralNetworks`Private`ScalarSymbol[10] -> {Minus, 
                    NeuralNetworks`Private`ScalarSymbol[9]}, 
                    NeuralNetworks`Private`ScalarSymbol[11] -> {Plus, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    NeuralNetworks`Private`ScalarSymbol[10]}]]], 
                    "$Dimensions" -> {52, 2, 1}], "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{52, 2, 1}, NeuralNetworks`RealT]],
                    "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{52, 2, 1}, 
                    NeuralNetworks`RealT]]], "concat" -> 
                 Association[
                  "Type" -> "Catenate", "Arrays" -> Association[], 
                   "Parameters" -> Association["Level" -> 1, "$InputShapes" -> {
                    NeuralNetworks`TensorT[{17, 2, 1}, NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{52, 2, 1}, NeuralNetworks`RealT]},
                     "$InputCount" -> 2, "$OutputShape" -> 
                    NeuralNetworks`TensorT[{69, 2, 1}, NeuralNetworks`RealT]],
                    "Inputs" -> Association["Input" -> {
                    NeuralNetworks`TensorT[{17, 2, 1}, NeuralNetworks`RealT], 
                    
                    
                    NeuralNetworks`TensorT[{52, 2, 1}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{69, 2, 1}, 
                    NeuralNetworks`RealT]]]]], Alignment -> Center], 
              Nothing]}], GridBoxAlignment -> {"Columns" -> {{Left}}}],
          ImageSizeCache->{554., {95.5, 103.5}},
          TrackedSymbols:>{NeuralNetworks`Private`NetGraph`selection}],
         Initialization:>{NetGraph}],
        BaselinePosition->(Top -> Scaled[3])], "]"}]}],
     False],
    Deploy],
   LineBreakWithin->False]}, {20,"20"->
  StyleBox[
   TagBox[
    TagBox[
     RowBox[{"NetGraph", 
      RowBox[{"[", 
       PanelBox[
        DynamicModuleBox[{NeuralNetworks`Private`NetGraph`selection = None}, 
         DynamicBox[GridBox[
           Map[List, {
             ToBoxes[
              
              NeuralNetworks`Private`NetGraph`netLayerPlot[{{1, 2}, {2, 3}, {
               3, 4}, {4, 5}, {3, 6}, {6, 7}, {5, 8}, {7, 8}, {8, 9}}, 
               Dynamic[NeuralNetworks`Private`NetGraph`selection], False, {
               "Input", "squeeze1x1", "relu_squeeze1x1", "expand1x1", 
                "relu_expand1x1", "expand3x3", "relu_expand3x3", "concat", 
                "Output"}, {Null, 
                Hue[0.61, 0.75, 1], 
                RGBColor[0.29, 0.29, 0.83], 
                RGBColor[1., 0.7, 0.31]}, {1, 2, 3, 2, 3, 2, 3, 4, 1}, {
               Null, ConvolutionLayer, ElementwiseLayer, CatenateLayer}, {
                NeuralNetworks`TensorT[{64, 56, 56}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{44, 19, 22}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{44, 19, 22}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{34, 1, 2}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{44, 19, 22}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{60, 1, 2}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{34, 1, 2}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{60, 1, 2}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{94, 1, 2}, NeuralNetworks`RealT]}, {
               None, None, Ramp, None, LogisticSigmoid, None, Tanh, None, 
                None}]], 
             If[
              IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
              ItemBox[
               NeuralNetworks`Private`NetGraph`vpathInfo[
                Part[{
                  NeuralNetworks`NetPath["Inputs", "Input"], 
                  NeuralNetworks`NetPath["Nodes", "squeeze1x1"], 
                  NeuralNetworks`NetPath["Nodes", "relu_squeeze1x1"], 
                  NeuralNetworks`NetPath["Nodes", "expand1x1"], 
                  NeuralNetworks`NetPath["Nodes", "relu_expand1x1"], 
                  NeuralNetworks`NetPath["Nodes", "expand3x3"], 
                  NeuralNetworks`NetPath["Nodes", "relu_expand3x3"], 
                  NeuralNetworks`NetPath["Nodes", "concat"], 
                  NeuralNetworks`NetPath["Outputs", "Output"]}, 
                 NeuralNetworks`Private`NetGraph`selection], 
                Association[
                "Input" -> 
                 NeuralNetworks`TensorT[{64, 56, 56}, NeuralNetworks`RealT]], 
                
                Association[
                "Output" -> 
                 NeuralNetworks`TensorT[{94, 1, 2}, NeuralNetworks`RealT]], 
                Association[
                "squeeze1x1" -> 
                 Association[
                  "Type" -> "Convolution", "Arrays" -> 
                   Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{44, 64, 8, 15}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{44}, NeuralNetworks`RealT]]], 
                   "Parameters" -> 
                   Association[
                    "OutputChannels" -> 44, "KernelSize" -> {8, 15}, 
                    "Stride" -> {5, 3}, "PaddingSize" -> {21, 11}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {19, 22}], 
                   "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{44, 19, 22}, 
                    NeuralNetworks`RealT]]], "relu_squeeze1x1" -> 
                 Association[
                  "Type" -> "Elementwise", "Arrays" -> Association[], 
                   "Parameters" -> 
                   Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {44, 19, 22}], "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{44, 19, 22}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{44, 19, 22}, 
                    NeuralNetworks`RealT]]], "expand1x1" -> 
                 Association[
                  "Type" -> "Convolution", "Arrays" -> 
                   Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{34, 44, 19, 4}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{34}, NeuralNetworks`RealT]]], 
                   "Parameters" -> 
                   Association[
                    "OutputChannels" -> 34, "KernelSize" -> {19, 4}, 
                    "Stride" -> {19, 22}, "PaddingSize" -> {4, 3}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 44, "$GroupNumber" -> 1, 
                    "$InputSize" -> {19, 22}, "$OutputSize" -> {1, 2}], 
                   "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{44, 19, 22}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{34, 1, 2}, 
                    NeuralNetworks`RealT]]], "relu_expand1x1" -> 
                 Association[
                  "Type" -> "Elementwise", "Arrays" -> Association[], 
                   "Parameters" -> 
                   Association[
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {34, 1, 2}], "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{34, 1, 2}, NeuralNetworks`RealT]],
                    "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{34, 1, 2}, 
                    NeuralNetworks`RealT]]], "expand3x3" -> 
                 Association[
                  "Type" -> "Convolution", "Arrays" -> 
                   Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{60, 44, 19, 12}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{60}, NeuralNetworks`RealT]]], 
                   "Parameters" -> 
                   Association[
                    "OutputChannels" -> 60, "KernelSize" -> {19, 12}, 
                    "Stride" -> {28, 14}, "PaddingSize" -> {12, 6}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 44, "$GroupNumber" -> 1, 
                    "$InputSize" -> {19, 22}, "$OutputSize" -> {1, 2}], 
                   "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{44, 19, 22}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{60, 1, 2}, 
                    NeuralNetworks`RealT]]], "relu_expand3x3" -> 
                 Association[
                  "Type" -> "Elementwise", "Arrays" -> Association[], 
                   "Parameters" -> 
                   Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {60, 1, 2}], "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{60, 1, 2}, NeuralNetworks`RealT]],
                    "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{60, 1, 2}, 
                    NeuralNetworks`RealT]]], "concat" -> 
                 Association[
                  "Type" -> "Catenate", "Arrays" -> Association[], 
                   "Parameters" -> Association["Level" -> 1, "$InputShapes" -> {
                    NeuralNetworks`TensorT[{34, 1, 2}, NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{60, 1, 2}, NeuralNetworks`RealT]},
                     "$InputCount" -> 2, "$OutputShape" -> 
                    NeuralNetworks`TensorT[{94, 1, 2}, NeuralNetworks`RealT]],
                    "Inputs" -> Association["Input" -> {
                    NeuralNetworks`TensorT[{34, 1, 2}, NeuralNetworks`RealT], 
                    
                    
                    NeuralNetworks`TensorT[{60, 1, 2}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{94, 1, 2}, 
                    NeuralNetworks`RealT]]]]], Alignment -> Center], 
              Nothing]}], GridBoxAlignment -> {"Columns" -> {{Left}}}],
          ImageSizeCache->{554., {96.5, 104.5}},
          TrackedSymbols:>{NeuralNetworks`Private`NetGraph`selection}],
         Initialization:>{NetGraph}],
        BaselinePosition->(Top -> Scaled[3])], "]"}]}],
     False],
    Deploy],
   LineBreakWithin->False]}, {21,"21"->
  StyleBox[
   TagBox[
    TagBox[
     RowBox[{"NetGraph", 
      RowBox[{"[", 
       PanelBox[
        DynamicModuleBox[{NeuralNetworks`Private`NetGraph`selection = None}, 
         DynamicBox[GridBox[
           Map[List, {
             ToBoxes[
              
              NeuralNetworks`Private`NetGraph`netLayerPlot[{{1, 2}, {2, 3}, {
               3, 4}, {4, 5}, {3, 6}, {6, 7}, {5, 8}, {7, 8}, {8, 9}}, 
               Dynamic[NeuralNetworks`Private`NetGraph`selection], False, {
               "Input", "squeeze1x1", "relu_squeeze1x1", "expand1x1", 
                "relu_expand1x1", "expand3x3", "relu_expand3x3", "concat", 
                "Output"}, {Null, 
                Hue[0.61, 0.75, 1], 
                RGBColor[0.29, 0.29, 0.83], 
                RGBColor[1., 0.7, 0.31]}, {1, 2, 3, 2, 3, 2, 3, 4, 1}, {
               Null, ConvolutionLayer, ElementwiseLayer, CatenateLayer}, {
                NeuralNetworks`TensorT[{64, 56, 56}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{60, 20, 13}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{60, 20, 13}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{52, 1, 1}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{60, 20, 13}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{64, 1, 1}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{52, 1, 1}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{64, 1, 1}, NeuralNetworks`RealT], 
                NeuralNetworks`TensorT[{116, 1, 1}, NeuralNetworks`RealT]}, {
               None, None, None, None, LogisticSigmoid, None, None, None, 
                None}]], 
             If[
              IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
              ItemBox[
               NeuralNetworks`Private`NetGraph`vpathInfo[
                Part[{
                  NeuralNetworks`NetPath["Inputs", "Input"], 
                  NeuralNetworks`NetPath["Nodes", "squeeze1x1"], 
                  NeuralNetworks`NetPath["Nodes", "relu_squeeze1x1"], 
                  NeuralNetworks`NetPath["Nodes", "expand1x1"], 
                  NeuralNetworks`NetPath["Nodes", "relu_expand1x1"], 
                  NeuralNetworks`NetPath["Nodes", "expand3x3"], 
                  NeuralNetworks`NetPath["Nodes", "relu_expand3x3"], 
                  NeuralNetworks`NetPath["Nodes", "concat"], 
                  NeuralNetworks`NetPath["Outputs", "Output"]}, 
                 NeuralNetworks`Private`NetGraph`selection], 
                Association[
                "Input" -> 
                 NeuralNetworks`TensorT[{64, 56, 56}, NeuralNetworks`RealT]], 
                
                Association[
                "Output" -> 
                 NeuralNetworks`TensorT[{116, 1, 1}, NeuralNetworks`RealT]], 
                Association[
                "squeeze1x1" -> 
                 Association[
                  "Type" -> "Convolution", "Arrays" -> 
                   Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{60, 64, 12, 11}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{60}, NeuralNetworks`RealT]]], 
                   "Parameters" -> 
                   Association[
                    "OutputChannels" -> 60, "KernelSize" -> {12, 11}, 
                    "Stride" -> {4, 5}, "PaddingSize" -> {17, 9}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {20, 13}], 
                   "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{60, 20, 13}, 
                    NeuralNetworks`RealT]]], "relu_squeeze1x1" -> 
                 Association[
                  "Type" -> "Elementwise", "Arrays" -> Association[], 
                   "Parameters" -> 
                   Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[7], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Plus, -1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[2], -1.}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    NeuralNetworks`Private`ScalarSymbol[4]}, 
                    NeuralNetworks`Private`ScalarSymbol[6] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[7] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[5], 
                    NeuralNetworks`Private`ScalarSymbol[6]}]]], 
                    "$Dimensions" -> {60, 20, 13}], "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{60, 20, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{60, 20, 13}, 
                    NeuralNetworks`RealT]]], "expand1x1" -> 
                 Association[
                  "Type" -> "Convolution", "Arrays" -> 
                   Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{52, 60, 20, 8}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{52}, NeuralNetworks`RealT]]], 
                   "Parameters" -> 
                   Association[
                    "OutputChannels" -> 52, "KernelSize" -> {20, 8}, 
                    "Stride" -> {19, 24}, "PaddingSize" -> {0, 7}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 60, "$GroupNumber" -> 1, 
                    "$InputSize" -> {20, 13}, "$OutputSize" -> {1, 1}], 
                   "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{60, 20, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{52, 1, 1}, 
                    NeuralNetworks`RealT]]], "relu_expand1x1" -> 
                 Association[
                  "Type" -> "Elementwise", "Arrays" -> Association[], 
                   "Parameters" -> 
                   Association[
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {52, 1, 1}], "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{52, 1, 1}, NeuralNetworks`RealT]],
                    "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{52, 1, 1}, 
                    NeuralNetworks`RealT]]], "expand3x3" -> 
                 Association[
                  "Type" -> "Convolution", "Arrays" -> 
                   Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 60, 20, 13}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]], 
                   "Parameters" -> 
                   Association[
                    "OutputChannels" -> 64, "KernelSize" -> {20, 13}, 
                    "Stride" -> {30, 16}, "PaddingSize" -> {8, 6}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 60, "$GroupNumber" -> 1, 
                    "$InputSize" -> {20, 13}, "$OutputSize" -> {1, 1}], 
                   "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{60, 20, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 1, 1}, 
                    NeuralNetworks`RealT]]], "relu_expand3x3" -> 
                 Association[
                  "Type" -> "Elementwise", "Arrays" -> Association[], 
                   "Parameters" -> 
                   Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[7], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {Plus, -1., 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[2], -1.}, 
                    NeuralNetworks`Private`ScalarSymbol[5] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[3], 
                    NeuralNetworks`Private`ScalarSymbol[4]}, 
                    NeuralNetworks`Private`ScalarSymbol[6] -> {Ramp, 
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[7] -> {Times, 
                    NeuralNetworks`Private`ScalarSymbol[5], 
                    NeuralNetworks`Private`ScalarSymbol[6]}]]], 
                    "$Dimensions" -> {64, 1, 1}], "Inputs" -> 
                   Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 1, 1}, NeuralNetworks`RealT]],
                    "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 1, 1}, 
                    NeuralNetworks`RealT]]], "concat" -> 
                 Association[
                  "Type" -> "Catenate", "Arrays" -> Association[], 
                   "Parameters" -> Association["Level" -> 1, "$InputShapes" -> {
                    NeuralNetworks`TensorT[{52, 1, 1}, NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{64, 1, 1}, NeuralNetworks`RealT]},
                     "$InputCount" -> 2, "$OutputShape" -> 
                    NeuralNetworks`TensorT[{116, 1, 1}, 
                    NeuralNetworks`RealT]], "Inputs" -> Association["Input" -> {
                    NeuralNetworks`TensorT[{52, 1, 1}, NeuralNetworks`RealT], 
                    
                    
                    NeuralNetworks`TensorT[{64, 1, 1}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                   Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{116, 1, 1}, 
                    NeuralNetworks`RealT]]]]], Alignment -> Center], 
              Nothing]}], GridBoxAlignment -> {"Columns" -> {{Left}}}],
          ImageSizeCache->{554., {95.5, 103.5}},
          TrackedSymbols:>{NeuralNetworks`Private`NetGraph`selection}],
         Initialization:>{NetGraph}],
        BaselinePosition->(Top -> Scaled[3])], "]"}]}],
     False],
    Deploy],
   LineBreakWithin->False]}}, 17]], "Output",ExpressionUUID->"2e354d54-961e-\
4859-847d-afee15f4a6a5"]
}, Open  ]]
}, Open  ]],

Cell["Working on randomly generating new net graph layouts", "Subsection",ExpressionUUID->"06ef5ee1-089e-4ba3-90d3-95dce480bf1d"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Parallel Training", "Section",ExpressionUUID->"119f867b-a901-445c-a549-99425573d77e"],

Cell[CellGroupData[{

Cell["Implemented Synchronous Training on Multi-GPU machines", "Subsection",ExpressionUUID->"29774d39-d4c6-4e28-8849-82f2b542775c"],

Cell["ParallelDo", "Subsubsection",ExpressionUUID->"2db74edc-6c60-45a7-9883-207db8feefad"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Working on Asynchronous Training on multi-node clusters", "Subsection",ExpressionUUID->"61ba3615-1e3b-4aa0-92b7-73aa12a10f23"],

Cell["ParallelSubmit", "Subsubsection",ExpressionUUID->"3db60604-6f2c-4e07-9144-6ff8f8e790ce"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Selection and Weight Transfer", "Section",ExpressionUUID->"d20695d4-e59d-4ef0-8dd4-f64aceec99b8"],

Cell["\<\
Each net spawns 10 children which are trained on the training set.\
\>", "Subsubsection",ExpressionUUID->"93500fa5-1389-48d0-b09f-49a25813aa14"],

Cell["10% of the population survives based on test set performance", \
"Subsubsection",ExpressionUUID->"0f5a8d01-0864-4ed2-8592-38078cd8a817"],

Cell["\<\
Implementing partial transfer of weights to accelerate training\
\>", "Subsubsection",ExpressionUUID->"aa42868e-fef5-441f-aab3-0fd4c2f977e7"]
}, Open  ]]
}, Open  ]],

Cell[TextData[{
 "Everything above this bar is in your 2 minute presentation. ",
 Cell[BoxData[
  ButtonBox["\<\"Preview Presentation\"\>",
   Appearance->{
    "Default" -> 
     Image[RawArray["UnsignedInteger8",{{{255, 255, 255}, {255, 255, 255}, {0,
         0, 0}, {255, 255, 255}, {255, 255, 255}}, {{255, 255, 255}, {242, 
        242, 242}, {242, 242, 242}, {242, 242, 242}, {255, 255, 255}}, {{0, 0,
         0}, {242, 242, 242}, {255, 255, 255}, {242, 242, 242}, {255, 255, 
        255}}, {{255, 255, 255}, {242, 242, 242}, {242, 242, 242}, {242, 242, 
        242}, {255, 255, 255}}, {{255, 255, 255}, {255, 255, 255}, {255, 255, 
        255}, {255, 255, 255}, {255, 255, 255}}}], "Byte", ColorSpace -> 
       "RGB", Interleaving -> True], "Hover" -> 
     Image[RawArray["UnsignedInteger8",{{{255, 255, 255}, {255, 255, 255}, {0,
         0, 0}, {255, 255, 255}, {255, 255, 255}}, {{255, 255, 255}, {204, 
        204, 204}, {204, 204, 204}, {204, 204, 204}, {255, 255, 255}}, {{0, 0,
         0}, {204, 204, 204}, {249, 249, 249}, {204, 204, 204}, {255, 255, 
        255}}, {{255, 255, 255}, {204, 204, 204}, {204, 204, 204}, {204, 204, 
        204}, {255, 255, 255}}, {{255, 255, 255}, {255, 255, 255}, {255, 255, 
        255}, {255, 255, 255}, {255, 255, 255}}}], "Byte", ColorSpace -> 
       "RGB", Interleaving -> True], "Pressed" -> 
     Image[RawArray["UnsignedInteger8",{{{255, 255, 255}, {255, 255, 255}, {0,
         0, 0}, {255, 255, 255}, {255, 255, 255}}, {{255, 255, 255}, {204, 
        204, 204}, {204, 204, 204}, {204, 204, 204}, {255, 255, 255}}, {{0, 0,
         0}, {204, 204, 204}, {229, 229, 229}, {204, 204, 204}, {255, 255, 
        255}}, {{255, 255, 255}, {204, 204, 204}, {204, 204, 204}, {204, 204, 
        204}, {255, 255, 255}}, {{255, 255, 255}, {255, 255, 255}, {255, 255, 
        255}, {255, 255, 255}, {255, 255, 255}}}], "Byte", ColorSpace -> 
       "RGB", Interleaving -> True]},
   ButtonFunction:>With[{$CellContext`nb$ = First[
        NotebookGet[
         ButtonNotebook[]]], $CellContext`$banner$ = Lookup[
        Options[
         ButtonNotebook[], DockedCells], DockedCells]}, 
     CreateDocument[
      Notebook[
       (ReplaceAll[
        Flatten[{
          (ReplaceAll[
           ReplaceAll[
            DeleteCases[#, 
             Cell[
              Blank[], "TagItem", 
              BlankNullSequence[], CellTags -> "Mentor", 
              BlankNullSequence[]], Infinity], {Pattern[$CellContext`c, 
               Cell[
                Blank[], "TagItem", 
                Pattern[$CellContext`o1, 
                 BlankNullSequence[]], 
                Pattern[$CellContext`t, CellTags -> "Author"], 
                Pattern[$CellContext`o2, 
                 BlankNullSequence[]]]] :> Cell[
               StringJoin[
                FE`makePlainText[$CellContext`c], "  (Mentor: ", 
                FirstCase[#, Pattern[$CellContext`c2, 
                   Cell[
                    Blank[], "TagItem", 
                    BlankNullSequence[], CellTags -> "Mentor", 
                    BlankNullSequence[]]] :> 
                 FE`makePlainText[$CellContext`c2], "WTFDIDYOUDO", Infinity], 
                ")"], "TagItem", $CellContext`o1, $CellContext`t, \
$CellContext`o2]}], {Pattern[$CellContext`c, 
              Cell[
               Blank[], "TagItem", 
               Pattern[$CellContext`o1, 
                BlankNullSequence[]], CellTags -> Pattern[$CellContext`a, 
                 Alternatives["Author", "Affiliation"]], 
               Pattern[$CellContext`o2, 
                BlankNullSequence[]]]] :> Cell[
              TextData[{
                Cell[
                 StringJoin[
                  ToUpperCase[$CellContext`a], ": "], "TemplateInlineHeader"], 
                FE`makePlainText[$CellContext`c]}], "Text", CellDingbat -> 
              None]}]& )[
           ReplaceAll[
            DeleteCases[
             Flatten[
              NotebookTools`FlattenCellGroups[
               First[#]]], 
             Cell[
              Blank[], 
              Except[
               Alternatives[
               "TemplateText", "TemplateTagItem", "TemplateTitle", 
                "TemplateInlineHeader", "TemplateFigure", 
                "TemplateSubsectionDelimiter"]], 
              BlankNullSequence[]]], {Cell[
               Pattern[$CellContext`e, 
                Blank[]], 
               Pattern[$CellContext`t, 
                Blank[String]], 
               Pattern[$CellContext`o, 
                BlankNullSequence[]]] :> Cell[$CellContext`e, 
               StringTrim[$CellContext`t, "Template"], $CellContext`o]}]], 
          Cell["", "SubsectionDelimiter"], 
          DeleteCases[
           Part[#, {3}], 
           Cell[
            Blank[], "TemplateSection", 
            BlankNullSequence[]], Infinity]}], {Cell[
           Pattern[$CellContext`e, 
            Blank[]], 
           Pattern[$CellContext`t, 
            Blank[String]], 
           Pattern[$CellContext`o, 
            BlankNullSequence[]]] :> Cell[$CellContext`e, 
           
           StringTrim[$CellContext`t, 
            "Template"], $CellContext`o]}]& )[$CellContext`nb$], 
       StyleDefinitions -> Notebook[{
          Cell[
           StyleData[StyleDefinitions -> "Default.nb"]], 
          Cell[
           StyleData[
           "TagItem", "SlideShow", StyleDefinitions -> StyleData["Item"]]], 
          Cell[
           StyleData["SubsectionDelimiter", "SlideShow"], 
           CellBracketOptions -> {"Color" -> None}, 
           CellFrame -> {{0, 0}, {1, 0}}, CellMargins -> {{66, 0}, {1, 1}}, 
           CellFrameMargins -> 0, CellOpen -> False, CellFrameColor -> 
           GrayLevel[0.85], CellSize -> {1, 1}, Deployed -> True, 
           CellElementSpacings -> {"ClosedCellHeight" -> 1}], 
          Cell[
           StyleData[
           "Figure", "SlideShow", StyleDefinitions -> 
            StyleData["Text", "SlideShow"]]], 
          Cell[
           StyleData[
           "TemplateInlineHeader", "SlideShow", StyleDefinitions -> 
            StyleData["Text"]], FontWeight -> Bold, FontColor -> 
           RGBColor[
            0.7143816281376364, 0.21776150148775464`, 0.03341725795376516], 
           DefaultFormatType -> TextForm], 
          Cell[
           StyleData["InlineCell", StyleDefinitions -> StyleData["Text"]]]}], 
       DockedCells -> {Inherited, $CellContext`$banner$}, WindowSize -> 
       Automatic, ScreenStyleEnvironment -> "SlideShow"]]],
   Evaluator->Automatic,
   FrameMargins->2,
   Method->"Preemptive"]],
  CellChangeTimes->{
   3.708105840738933*^9, 3.708107109231278*^9, 3.708107195171091*^9, 
    3.70811042103835*^9, 3.708110496645129*^9, 3.708110585053576*^9, 
    3.70811559896529*^9, 3.708115659320217*^9, 3.708122983563134*^9, {
    3.708123189175438*^9, 3.708123209596447*^9}, 3.7081232893789167`*^9, 
    3.708123413578196*^9, 3.708161600262829*^9, 3.708161685988966*^9, 
    3.708161762243882*^9, 3.708171906418335*^9, 3.7081719711041327`*^9, 
    3.7081720239229593`*^9, 3.7081720696464252`*^9, 3.7081724419361277`*^9, {
    3.7081741291657352`*^9, 3.708174167794054*^9}},ExpressionUUID->
  "abc185a0-c495-4b55-bc66-2aaafed77ca3"]
}], "TemplateSectionDivider",
 CellChangeTimes->{{3.708107255281083*^9, 3.708107257077818*^9}, 
   3.708110466846199*^9, 3.708110623881486*^9, 3.7081156336798077`*^9, 
   3.708115681024527*^9, {3.708122420477776*^9, 3.7081224209570103`*^9}, {
   3.708122986735901*^9, 3.708122997671101*^9}, {3.708123192575124*^9, 
   3.7081232134387836`*^9}, 3.7081232918785152`*^9, {3.708123378671113*^9, 
   3.708123392747447*^9}, 3.7081234259775877`*^9, 3.708161609827849*^9, 
   3.7081616890687*^9, 3.708161765363204*^9, 3.708172073251072*^9, 
   3.708172448694848*^9, 
   3.708174173279682*^9},ExpressionUUID->"003f9a05-6bef-4291-b1a6-\
f10f8847b0c0"],

Cell["Will update the following later.", "Title",ExpressionUUID->"1856d140-07b9-4b74-bc27-c0ad4f53e05d"],

Cell[CellGroupData[{

Cell["Detailed Records of the Project", "TemplateSection",
 CellChangeTimes->{{3.708096243268845*^9, 
  3.7080962536504707`*^9}},ExpressionUUID->"ba97f0a3-c165-451d-bf4c-\
74c0b4a4f36e"],

Cell[CellGroupData[{

Cell["Main Results in Detail", "TemplateSubsection",
 CellChangeTimes->{{3.549542055118816*^9, 3.5495420583168*^9}, {
  3.708095979852994*^9, 3.708095983809194*^9}, {3.70809609386517*^9, 
  3.708096094077529*^9}},ExpressionUUID->"a4e3d008-4eb0-4d8e-bed7-\
33623658821c"],

Cell[CellGroupData[{

Cell["Mutation", "Subsection",ExpressionUUID->"e1a6f98c-f23d-4de9-ab23-399833662157"],

Cell["NetChain", "Subsubsection",ExpressionUUID->"eb32b871-a866-48ec-aabf-d914f30d9d20"],

Cell["NetGraph", "Subsubsection",ExpressionUUID->"89e1da18-6ddc-4f59-8236-f57707a32293"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Parallelization", "Subsection",ExpressionUUID->"941578b0-e458-4ccd-8815-94638ea346c9"],

Cell["Synchronous", "Subsubsection",ExpressionUUID->"ad6332fe-fde1-4d67-a7a2-aa8c035062dd"],

Cell["Asynchronous", "Subsubsection",ExpressionUUID->"392a0a1f-cbe4-4bcf-92e5-8a4e8364a520"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Selection", "Subsection",ExpressionUUID->"6a62a1b6-8306-47de-82a2-aab81d7ebf16"],

Cell["Fitness function", "Subsubsection",ExpressionUUID->"ab26c54f-4991-42de-af84-83ab6b8c7ac1"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Weight transfer", "Subsection",ExpressionUUID->"d68ab8fd-6bfc-4917-86bc-59a4cf5f5528"],

Cell["Net2Net", "Subsubsection",ExpressionUUID->"8d992b35-32b9-4803-b64f-e756b952a66b"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Code", "TemplateSubsection",
 CellChangeTimes->{{3.549542047850762*^9, 3.549542050840076*^9}, 
   3.549542327097245*^9},ExpressionUUID->"c54bc669-1d00-4e87-877b-\
cfd746ce37fa"],

Cell["Provide one of:", "TemplateComment",
 CellChangeTimes->{{3.70811356171093*^9, 
  3.7081135645971746`*^9}},ExpressionUUID->"a672a6f1-f8fa-4628-83e3-\
5438bd707f89"],

Cell[CellGroupData[{

Cell[TextData[{
 "Github: ",
 ButtonBox["https://github.com/dan7geo/WolframSS2017",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/dan7geo/WolframSS2017"], None},
  ButtonNote->"https://github.com/dan7geo/WolframSS2017"]
}], "Item",ExpressionUUID->"66883a1c-6bbf-428e-84bc-a7c0ba375299"],

Cell["Explicit code", "Item",
 CellChangeTimes->{{3.708096312466115*^9, 
  3.7080963343962107`*^9}},ExpressionUUID->"7c9362c5-ee46-4875-bc37-\
652189adc85e"]
}, Open  ]]
}, Open  ]],

Cell["Written Content / Lesson Plans", "TemplateSubsection",
 CellChangeTimes->{{3.708096199547399*^9, 
  3.708096214681534*^9}},ExpressionUUID->"a55786c3-e7a6-4cf3-bb54-\
b05532239df1"],

Cell[CellGroupData[{

Cell["Conclusions in Detail", "TemplateSubsection",
 CellChangeTimes->{{3.549547456866158*^9, 3.549547459278479*^9}, 
   3.708095987661463*^9, {3.708096097865437*^9, 
   3.70809609806956*^9}},ExpressionUUID->"5a247b12-4033-40a4-960f-\
65d46bf0f9c2"],

Cell["\<\
Evolutionary algorithms are promising to design architectures on neural \
networks and to optimize their hyperparameters. This is similar to how real \
neural networks were designed through biological evolution. We can easily \
exploit massively parallel supercomputers with this method. \
\>", "Text",ExpressionUUID->"a1896613-fd76-41b2-b665-1f44f4443234"]
}, Open  ]],

Cell["All Visualizations", "TemplateSubsection",
 CellChangeTimes->{{3.5495421749322853`*^9, 3.5495421791841507`*^9}, {
  3.7080959928646717`*^9, 3.708095994448739*^9}, {3.708096104617906*^9, 
  3.708096104865819*^9}},ExpressionUUID->"f27ae70e-91c7-4506-8835-\
21b281190700"],

Cell["Data Sources Links/References", "TemplateSubsection",
 CellChangeTimes->{{3.708096132224304*^9, 3.708096148950604*^9}, {
  3.708113189015132*^9, 3.70811318984517*^9}},
 CellTags->
  "DataSources",ExpressionUUID->"595aec4a-a293-426a-b50c-4acce4123cb2"],

Cell[CellGroupData[{

Cell["Future Directions", "TemplateSubsection",
 CellChangeTimes->{{3.549548005988791*^9, 3.5495480110025587`*^9}, {
   3.707836737195241*^9, 3.707836742473217*^9}, 3.707836774328553*^9},
 CellTags->
  "FutureDirections",ExpressionUUID->"e5647c6a-cb6b-4235-8887-8cfbb24ef769"],

Cell["Scale to supercomputers", "Subsection",ExpressionUUID->"b3827628-9feb-418d-ab05-c78a7bd25d54"],

Cell["Multi-task learning", "Subsection",ExpressionUUID->"001a756e-195f-4294-afff-db463ce0f8cf"]
}, Open  ]],

Cell["Background Info Links/References", "TemplateSubsection",
 CellChangeTimes->{{3.549542073628705*^9, 3.5495420746677647`*^9}, {
  3.549570366165662*^9, 3.549570367234921*^9}, {3.708096156222343*^9, 
  3.7080961599500628`*^9}},
 CellTags->
  "References",ExpressionUUID->"f66f7ca2-dcb9-4c06-9d0a-f2cc48d9fd79"],

Cell[CellGroupData[{

Cell["Keywords", "TemplateSubsection",
 CellChangeTimes->{{3.549624602331629*^9, 3.549624604729114*^9}},
 CellTags->"Keywords",ExpressionUUID->"0a9d4fd1-d336-4f32-b85d-12e6f9eed8ed"],

Cell[CellGroupData[{

Cell["Genetic algorithm\t", "Item",ExpressionUUID->"3b9a0db3-df49-4532-b956-8ec2c42dd8bf"],

Cell["Evolutionary algorithm", "Item",ExpressionUUID->"afef2329-a25a-4745-9d1e-fa176e2e088d"],

Cell["Hyperparameter optimization", "Item",ExpressionUUID->"5a5c7668-f7cd-4d9b-be85-8ddc15be092b"],

Cell["Neural Network", "Item",ExpressionUUID->"12f8c98c-2abc-4f04-91f2-e772fd34a94e"],

Cell["Deep Learning", "Item",ExpressionUUID->"c3aa6d35-39fa-48d4-bffd-2794b628f85e"],

Cell["Transfer Learning", "Item",ExpressionUUID->"aca3293e-7f32-460a-918b-d544b4db5af6"],

Cell["Parallel Computing", "Item",ExpressionUUID->"acccdba7-4cc8-463f-9532-578badae9914"]
}, Open  ]]
}, Open  ]],

Cell["Other", "TemplateSubsection",
 CellChangeTimes->{{3.54962463070057*^9, 
  3.549624631259623*^9}},ExpressionUUID->"7829dc32-1c2b-44a2-9c28-\
0b354f138b29"],

Cell[CellGroupData[{

Cell["Date", "TemplateSubsection",
 CellChangeTimes->{{3.708096048771126*^9, 
  3.7080960493214417`*^9}},ExpressionUUID->"1cd568fb-8340-49f7-8b1e-\
208734b6bb99"],

Cell[TextData[{
 StyleBox["Last Modified: ",
  FontSize->Medium],
 StyleBox["Wednesday, July 05, 2017",
  FontSize->Medium]
}], "LastModified",
 CellTags->
  "LastModifiedDate",ExpressionUUID->"62b79026-5d63-46ab-b5a6-6556f49fc1ac"],

Cell[BoxData[
 ButtonBox[
  StyleBox["\<\"Add Timestamp\"\>", "Text",
   StripOnInput->False,
   FontWeight->Plain],
  Appearance->Automatic,
  ButtonFunction:>
   With[{$CellContext`cells = Cells[CellTags -> "LastModifiedDate"]}, 
    (If[Length[$CellContext`cells] > 0, Map[NotebookDelete, 
       Most[$CellContext`cells]]; NotebookWrite[
       Last[$CellContext`cells], #, All], SelectionMove[
       EvaluationCell[], Before, Cell]; NotebookWrite[
       ButtonNotebook[], #, All]]& )[
     Cell[
      TextData[
       RowBox[{
         StyleBox["Last Modified: ", FontSize -> Medium], 
         StyleBox[
          
          DateString[{
           "DayName", ", ", "MonthName", " ", "Day", ", ", "Year"}], FontSize -> 
          Medium]}]], "LastModified", CellTags -> "LastModifiedDate"]]],
  Evaluator->Automatic,
  Method->"Preemptive"]], "Input",ExpressionUUID->"387919cf-8311-4ba3-bacd-\
ed733929beeb"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1829, 956},
WindowMargins->{{-8, Automatic}, {Automatic, 0}},
Magnification:>1.3 Inherited,
FrontEndVersion->"11.1 for Microsoft Windows (64-bit) (April 27, 2017)",
StyleDefinitions->Notebook[{
   Cell[
    StyleData[StyleDefinitions -> "Default.nb"]], 
   Cell[
    CellGroupData[{
      Cell["Style Environment Names", "Section"], 
      Cell[
       BoxData[
        RowBox[{
          RowBox[{"$banner", "=", 
            GraphicsBox[
             TagBox[
              RasterBox[CompressedData["
1:eJzsvf2vNOlxHSYkv+TH/AuB78z0JPfOdPfMJXdJ7pKi9iMUyfXuUiKXWlkx
9RFKMiKJHwCXNhTJFPiRRIxFiw4sCZIohOIPMulATigLsORAokUikMXEdASu
A8OByURAEMpGAHvD35KZ6a4651RV98y7XJLvS75C62Juz9PPU3Xq1Kl6nr7v
8j/4wZ98+j/9d77jO77jXf/e4cfTb3vPd77znW9775v+/cMv3/sT7/qxt//E
j/zw637i3T/y9h955wM/+O8ebj56+P/vOAw9fl7vbu/C6z98icZMXy/7pvt4
N19fG7b3r6/ztf9mG/Birzle3bNOfYPwuduuS+J1P6bfXPzvX/evO72+vXl1
XoFn8bmXBPz+df+6f33rXN82W9qvsUJ9exe4b6vrW6gcf9tk9/3rsutbiNv3
r2/j65tXju9n0LfudXeUy4u5/XWj4t2Bw91ixv3rXrvub9buX3fJdREV7wvd
t9H1Ld9AvggHv+UxuUuu+zjfv+6a6y6uet/yDeSLcPCbgMldzJA7ue5Mdb/l
uXdn17cIB76dr/tdx/3rm32dk5G7SXW/vfMlRuquReOuNezFWHg38f/+df+a
vu6OhvBcvty14jBv2Is0+65Vj/OGfR3pdBGYdy10969vi+vukNNvynXXpt68
YXet2ffidR/Mu/R6yXXp21jo7l/3r/vX/ev+df/62i7a0u6PP/uZwfvGhw1X
r7/ubhuap8kz9LTQ4SfG7MPIRi1p8rfnr7PuFEs3x1/tzsE88SIaqU7RsP5W
gdqvi1/lfvToNINNso+P9PpUnwzr6YN924T5+4lHAv6zADY07URQknfOgTQz
g3ZZiH3C8JQC3gecGS4hc/p2jir0YMXe2QGT8wsm+5AF0YB+WCvkY4lq9Wud
X/tIjIl1L74KtIUzF82GlCQDalQbHuk3OSPCbFNX+W1gb580EE/tJfViHGfE
hJJ9Jvr1bEVaTflFVu3ThKMlDXtq2DbiO6Zlpp2XlypqTflskOg+/Vrk13zG
7Q2oO3mwT7b1mZBJ5GfrqX8g0jKXclwmvu1DsVNC9lMTkoUU38lI9UNp24cU
S0/tWU/iVL0TbwL8acScsWfsPIP22bj4nFxH9k1ablK+evU6MDabFNJ8Unmo
MxEVFV2lKkZmTCZgfFaDO5UmJaq06HTz5r5EG6bpRDdLS/Zphn2c5IwX0ulx
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
8bkXMfmaLrHtTv2dKCgZzxqBerk7Vphy8s3st7LWJV68tEw7v+LXfnHJu0MY
z5Skb4DxUyt+7VbND7tskpdYdmxn941G9U6hm39w9SJUbtNxx/v1Q+BFzdzS
z4tnmNeic/a8GAynFr3rr68h3JSAmwvdn8pZvX/ngnlHm9B5KF4cIN9E3fh6
Xuc09lykLoLlXGJeju1Un3PnujHpOE3Vzi7x9d01XODg12bAbFpdaM83Iimk
bHlH9+J8nw/o9P0Xe852yXJTC70Ip+7Utjtsw14Cwr8kNI6TfOPr8jdgxXuy
2bijUN7B4NU4vi3YeGpuFxv7fPqw2LRj07sdfx0HHNvgseFcbLvPfeqJL3z6
qS/8zvH6wWdfwSsexj/0mt3xq9OA3/6V7/Yu2tf67V95nQ+Qx23pp5542e9/
/A3/+vPPfPVPv4+vf/4P3/Th//y1i63Wo017unN88PDtYNXhOnw+OQjHfdj4
+XQdH/n0U+NlVsn1aZ9txORgcxypT/3yhx556omXM2hlIzcujaceXUy3i0fQ
zM7Pfeovjl5viw7zqTe+nE368E+/doiLLZ3P8A9Ttb/2sd/4yp//+f+n/3e4
81uf/NQim7TpDt8+//w/MxhbQLppsWmyYcfou6knyw83D1996ctfdk4uThez
dHjkIx/96GDM8WT4OA/4/O7nnhu++rkPfNDIIAiPeJ4+H9ZyY5QMozHz/3dY
a0mzHWCZGnlY6Hd+93effstbQYBNhw+Rja3beZjzhRdeyCE4IGCA8CRg1GFA
jt1hqoMZx9N4h+I0+ADjGLsNbkYunX5SiFt8S/rwvg98cEA1/N8ffuYzTz/z
VnU8p8ARgYPLX/lKYfnh/uk9AokVlm7f/Z5j3A9jRo3aitn009Rs05oBI1FJ
FsbBq7Z/5PGXv+lNr9w9uAP9mJA8+cn+9oH900+/4vHXPbDuaFFeXfiMOb/3
e17xl7//ofaBXZxT4sv/iKYVCrFrOAcIy6ksCDJttNYMG5PrsrUiPsFZRmDD
a7W84rKKBQ2bWCvFghZK3sVY3GP43OOYiPELCListdC2xCYfsjW4Fkcmae2o
3BhiEiByMMC1UeSlKZqGSPCHyDBQi7B6mlBrHw3etJB9sdabtIAkhX5ATwRQ
YhdoQI5TEaequmBsI7f5p1wBTyJkKywNSCJNuBFFFbD4EgeAp0Z84yglwoin
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
N39df6067mp5GYsz+I/zvMTweTliQpSLlSUjUHYvEYRUTWSV8tPpFcWeYOrV
U5V+5ZjeeRZcKzpq/3UwDM7eKa+Ok1xMlLPruQPobmjDJKSxyZ+4Hm6ZrJ79
vuRtnq2e4XrKUDHwpkjGFc9Zda05dxnDqCQpEBd6sWotdjf18fqWx9c1wL+I
6nTDVFXyewjOrWh9F0FRwzXF1WL+c5BWPV6050UA/xr3Fg1JfftE/Tr3moqj
Xj8TqbxKP5EIN1i9huVcCPp6tjPcyMYzhncgNdf2eloPr64RVyHGudxff9pi
kjT+ptV5N4XhDco0Ev86q58bczGtqC8kbc+uWJg3XV6xEatJe0fl4Cw+JVzn
ZXB3xsIVsS71eFf0IVdgYsiUvxYzJKwuziF/7jo+Shy+uHlQokpXq0c7K6U6
O4NgfjWqZ89Y4qv3onwjl3XpvkRgVwQoRfzK0l9bfq3Ej8pflt0Juu5crK5r
YW3S1Wkipp7toK7xukGduuHgerzw/Bp9wkVU/mrOWnDsVfQnBdOWaGttS9tb
vehROJZckvpA5t1pHu/ecd0P7b/9xUf9IP3rX3i7rbL7wPtf7wfRv0D/v8An
P/4w1YXjSP5i/PHwvN8tT8Yvxf3dB34GEx5e733PazFJeZjf74e/qrFUoJbm
6WefLm7RJvOIkrkfbRhMHa6//RH5vxjGpxjY8uz8r/Rc5zXcvrTYyfm/hc//
fwp/GjKsGM//LaBjlDm+/cAQZyONNN9x1t0DnOdP/4E8IoAjr4bD3m9881un
69LDj0fuBPVwVvzY7Se+8gfH7/CPmJ9edNi+g9n9bjgH/tx4Dnxc4nDxcO9h
xeEv1RxPnimOeqA9mnpw387/UxfBcZefOz7/X7rL/Xg0/dxzz91/PCHfDfSL
kwBnDweDs4vLbffD30d6cgzBccBwDv/Y7cfjjcdwWEAlHLvBWZz/97652J0i
vpMg8vk/jNl96dlnj/80wzOfGM3udy4yS5/NVhyM/On3/+yYhqdbzPIngtmk
BnvnD2h2zNlx5JMcd3fWNUpkylw7Xbw4/RPq0M9+99N/7f5//e33HNLkX/3R
e375P3xosx8nWUogjvOv95fP/4tjQv3TLzxqIO9pwP6Vrxv/aY9/9Om3avh2
vCKd/79axyBMh9d/9Dd+ZPjy/0c/9FCh0pLFuymbE3tJvVOwwMm7tta+cLDf
pTBNXr/mWjkWEIRtNiM7pcUUKhfT58XCJ5byv0yYYJIl28ZLh4XcVAcKgNBU
oG7yhReFPlgvwTAO5a+HvCzd0yBKHJohFkG3C7TDDFZQ2GxEE/WOerY93eWO
02BGW3TPoBaUdoJqlgLCgYSdZ6aI9+Rsn4b1bKojNqDN3sF+Xku8o9sNkBJ2
mTPg7E3OEsMofAYgtXlkNtjOGcpZHPkZHdQrmrwkCCEN2Wsm21giEyelywXt
fRXqhCnNgQNHhKKfkzQKCBfNccCSsQWlR+It+x3fNW1SWDTne0bYcWDa7JYZ
rn6Cik6SKpeXIto7uojxS16F05MzaBsiyDMkhgPt3QpBTJws6khImTGsy3iv
CQIEXHOwN23MxSLY2bPXwbC0rhq81HmWDhrWRTSXHD57s/SlOdc43VznSxtK
UgXw+xC+HcHFVUY5EN6rSqdQDqSKWZbgChIaLByjuUw3Fp6KBLlW7xFKcWG8
OOoYR0cydye+TOshwZvw8Wl7GKbJEsbIdkzx5LTdRcKH7UMITQhTjZ7oecxQ
ZpG4DJuXHoVQEZjhUuu949pRYfWtViYzlWD1aAmEh9k4QXYhs0gHdsuSyZ6b
bhJD13NW0rAcWeqyQDYplBQ+oEdtcypbS6AkFrLuaSGT1Iht9mRkQ9bsgbzI
MhxZyi1DWawqb6gp4h1X7aBsCjXBu0Q/bGy0AC19hgR71M8kxWzA0g0gBS5o
sx3sUfB7qrmUtkv3tKf5o4U+WxAEbiSYMGaA2Mb3ckNIvkfEdgKFIKb4AKKy
NwgyqOksZZFyn3kis3GZ0Lxj73q3R9d1tWQtyvZw8RXW7ZSZlNdeQ3PbI7Cn
WLgWSeuiua+Z4lGQnlNKidJDLVnKr1wNuangLOATbF5ur1CUzCz0Vj4NnSc3
zz0N4D7KGL6EAHLJIwEZQobdHGvLaHD4xjvO9l1Yenznn/9uzwd+5j4J3Hb3
0Q8+oKffP0ynBCM37n/gXj7xPn7dvXfROA7+7G+8SQ/zrUskX/yUcryFz/+f
/itLR6B3SdnpKruD8fF7/jaAfTyYd/oOP2z4+hfexg5SBzIG7pMff4MPOAxm
8uj5/1j6D5MwaO946ysHI9nCg1Oj/gxx77WS9nsOxHJsrSm5+v3ncP6P+jWc
mR/Pn31Oz/rtqKj4M/WWnr60n//7leHE/jD49E/oPosiaIftTw5fAu/HxnjZ
43vgfIYzHJUPNj96+3E/dj7cNRxoC/lPpg7G2PkPWix/SLQKXVO/c0yWziuj
yvDneoZvp/s+hUq/lWkCfEVGBl0qQnBa61Of/vTwh3RCQ0jlDA+5ILB2eH7C
gduqwSSXi+Mt9piAHxvt3vf+nxsecIh69LDcgNo9aY9CEP3Tyy13xeOt3NJm
W9nfU/rKH3wVSni65Un//r9CaglFE46zjbQc/wc007R/5z33/b///Jgj3/ny
u/7Kj75qZJdo/o51b/jXAf7Pf/aE6Sry6LDiu2+P/0Dwf/ErbxribtEn43t8
///Nb351GMNr/dO/f8j3n/j//uefeO39r3CGOLajhpuPZ2xG+4EQ+Kc6xkv2
3VsLsqNVyQUz1nS+fr21yljEnJqIhZZFa1eIQqaHKNl3BR8ow/aGWL3sMPHW
Wvofm+0kF0tvk7j5J32GKHkdd8nCil4abC8DTHbZF5pQCpMriU8lZxf0ZDy1
XlTNIWKwYSl9BTddaEetdMIjY4Vh7qnKG5ytwhJbPmpE5eiVyk26UXbHFm4H
cJnuBf99fqpHK6mt+1z4yN8o5l44NGo762f8eRYcBCb+tEvIjxIAlvq0FEd9
rr03VnvBHUPmkyCmWzZYf6USCW4wwsLknYPmT7E5I5b869YTB83bmCa9W7Vj
1q2EkL6QWAv++BK+I3DHqZOHbezjdo9Yx03KbhVm7gM+QgYPNKbiZKGLS0LY
chAZ5EpLmxohYXyYEiVoT6zeIRzIAhzKUXBH1nHC+vkGncyL45TaaUcDShiF
7BBgCXeMuuCb1CBWQggOzc/PU3RHKb8uob1W0SzLNIgs6XQYaA6KKNkugHzh
EyHnDBqJJUXf+3xkaI+0BTm1SEVpIo5hA7U1qLnYcfXpGTRyZOu/cpRlS0Jk
I40SDrsA7k2CWNU9y9xUlnRZdyXrenaT3AEETVivQaiMTuahdKow9vBuKW7u
KRcEt5U9HzQ3qWqAHrSEk1+SZc/khzFS5eVQWs8DPd32Uk2k5kJbHHxXBign
w8jKsN0zOOLIlqPmBY4tDLFjRu291iNMltde3YJiY4/Qg0XUKFKyWLHAeHoD
NaPE4UYCz8G3yivehnujq/mLSuHkh3bJbn3JM2zNKm5CttbmWb+3dONFbCGk
lDhQEo41aYuLIbMUyqZXrBlG2+wqvVuyy55HvWNl5kUW0a+qM64nVO45u4MO
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
Z4HYQtstclw5ZiuqQOmczvmQPvQr4tinT1mfI8dKTfN82cFymWdLuKnBoE1d
6ZRRumK/DTof8yjepatD5SzcUi+4twlKqFeKTDQFEAsrYZTuaCeBzpabwQsQ
UvDXxGFgB+Lt/DqKjjMqCrXObAFadFdoy5Q9E4WG48JahJ+LeipKzM4lWpvw
fjwKmISUMzdSKJe2Kh/78L7STGHajg2ut8a6OrrfbthuIHAkoUxLLwG75BQN
6IPLWuCC0PVyF5uU7nWJY22siNETnqRa9ea0CwaztCpLIw6pmHLW9+lTtq2L
pkpr16k9eENLBzpJKdkuRGHkdu1VxivYF6ibATGqZUpjCwe/+CI7RTQ7fl9d
/rTOu1/NBXQY8+XPvEXHvCbGXei9ve/+ez/79Jv4n/r9N6e/pfP1L7zteHTv
jvjLrPq1j/zw1N/8CUb6DHzL3/7IDwtcPRZiOw+3+y0H90sXDqb6mIMvfMvx
W/0Tjg/vs6kBZ95NcCwWlYXHPyLk9Ei+DK/TF+9x9Dr89/zzz3/lD75qR9zR
Wv/5i7/ysfLG973/ZxfpfM8N/uKzz/7xd74Tuu5FQNvwf/qZZw6DjxNqOhyu
HK7/+jPPLPvCr0V648f4YYkvnYw5//oi3ZhNEnjN38HH4/f2U4iDp4c3j77r
9iEEw/81EJA8fLRIfvGVw4DDsOE03v87BOVgJDFkJPYA2sE27xJLSgxwDV4n
lo56daDNAbpg82HdXz+tW85p88CYbPk3vvnNE+t2OYKDzYML519Pqw286OH9
j/7oq65z+I/zf3r19+7/7sff9H99Q55R/snvv+uvv+/+HOglrTtckb//U5l3
eP13v/nIcP7/yFtenWYrCHAG7XDLlSNfpLWK91DXXXn9+usuFOHz+HsN9V43
3J5FSZfbTcH4fcDqZYlJ2JpFrGJLE/TK3M+biHPTLhJcZxGmvUBSm6nbS0nP
A6bMEAtTny/j42bwnG0TV3YTgUtjmAlhqoKEcTe0mECvfmljsNQWRebp45xs
lYBfbrenSVKBNsmrM1emcvM6N6olsV0vr1+HA+dvKQ2bEIepl5wYLGI0I3O4
/pZeZ2eTd7JlS47E7dJZeWTD0quPRi7oeglOyfapdAhyKhP20ZKlpUACTUCY
MOwcDtXhiUBd3NhLqi5JqM8ne61I6dOITLV3mOC8bKWdkCkEYddfG++sLoNb
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
Llj9/cbq5YXJ2KrZ4GVbOrhVHtL+Qsar2RD/8y0Nm8oOeqNlsPD2DYVvvEi2
Tc8v4NBDAYo4FFvDSucVpX6a+nU8oSFsF5flLdLwRD6Ms3UcNTID0dnmJLVF
veONtKQdpUbQkMdpOe+ghclip9NSG7MtLkoDs52gUI6aj1ce1sVlurQFDrQS
r2LFek7eTU++xl02w+VkKIK+leWkSZhSHt04BJM6olPUAdqC8YZUBivCOX8F
sW3kdic/l+Eiugv2blvl1ITeGj5Lnt/eC/d4dd6mhfwq308RQPKO7dwK/l1y
SsafYxEOAOlMQIOesIImyIMnARNvUkNYqJByMgZFmdyx4CfOE0WTSQHDcJfu
QYJ6FHzIRPW1qnlYE7QmSqTK6HukgmvYSwrmocguS19YMbqtjMyJMMTa25uu
wGSBrRMRSScUtsT9F0efNgXDS3oGn9kOmtRrJRtXWByVLyh5i+1zNGy7iLpN
55mBSLn7avmASKLmI/FQgNMqFXrjT2K17veXhS+yiY6KnSlHOp+qeViLjqd4
6RTcNAMFiKkSa3EZDibM1ihBbRvapDKnwMCijns1nGxoq7ovBzsR8CBrgfn5
SLDAnAQn3e5zynO97PJSb1lE97WsSBRQ5pSimFbhsoez6gI6bTQeMINRcsNY
ARbFY7hKioVI4VPVFkkKgSK3IhN7lgrqjiYUWhbw6o4jtzfWVEctDUtzHfdD
bOU2OpNIHnJwK/brcgQ+PMKBeRzPT2dYAAlkuzee1VAEl5U9ErKAiW+yeCoJ
bqpB3XYZYu3osSTSov5MaimFrFKMgjD9Mu7RaOZI1K36Tq2C12UOtIOWyaav
eXXx/OsObnkx56mxvcPX3UNpepIpg++qIy8CCMmXbbpygxn4xhrebmLylzAs
L/w1icbN50kXryQYit3NbIjI3NEkNzH1qlS6KTJ3Heqrbrk7OrO9E1/ukMbf
z7Ve9Ficx18n2b604/Kyx+SF52Nl4TVwvluAn98OvCRf57HKxf3aXusk58aM
je6LUtmvHdn52V9fOLY3mvC6eXpXYZnK+jtf+mZpNU2zG6bnvJwzTfKS6CTv
1Iz59JtrCs7V6+Zt8h3MqTv0HyzmefUz9ry4pnZXrPICWXHDYdcM8Qvart6U
n9d36o42OHcCchx/V9qGs1lWVpC7tZmamKc+zab3N8b2piS/U5zPGnZ+ku6q
26/vwrWsfeH74mvieXebT3mweBPjw3H63XHwbmTEXQf8GiG4837mugNeqLJN
Wf5SgbR6nUX1+7+5uGLF7rrz3Px1bX1uuuP7ph9+jueN/mtzen/8tWOPTj+7
edONDjZXOe4zjLP5gA42jCMPVzpekWdje+jGzl5mXtPx7WShj+zcAP/JrkWn
mgGcbrQhmRTPaQ9eNG58d7LHQGvxEZZz89zyRgekqM0bdRCfdhG6xvHsdLZu
Hu/196Ml8IsiOB+gEHy6bKfa3wUCCMKnCed+e6PTjvAaho1T1Oxh45t+ntgY
X40FboiOoNGFYYzV+ErsGtHI6zZMUV+X3rdkQ5MoJ+GQrJErDQ0zTspIJ3Bj
UzXueDd9XOYjC5NMATx87Gxk1FwtFA1x3wERkmURaEazzYM9TVi3Mw77nJz1
DFcEf0522quzzO0C34iZnYRSVun0fZdtIAXu3HjEka9nloLz17GTGMs2GKvn
POZFXsviiDAlzF+MWNwMf0lYcAkpPOd5fpBYveww0dT2BLQBqAhSNLmchVop
a41CzbpXVajR4MJywdzcBKQYxiI5uoDknUeTFHy913LccNaPiia/6ZLqEib+
aVTCGER6I7BXYRqZNo/x8ns7onSHoMfyUVXMlqdCROYoauLdPIa+jm/VoWV+
hnpHedeAWnCkCfOECAqNPUmJS5gkJ+ycWpQIFxVxUgarZULjHDhv1fqQO1p/
RXh52GieUVRcQBvgxb1nl5E4TQzWXN4jH4nbnTQY1lFLcpGnYGNDpa3pFldQ
RYF1AdQdCridckR3B92YgMaZueRj5/0t3oy3QIjmbFvL9vdsxpx1tZlsJlHc
yU1dInjRxY8ogkYnCUrgc8zxJkZNoOYbw68e/cY3nl24NyIQJkHTa+lgoIm2
x+KIAVGImqAYAXZUB0K+Y/qFAjFvEzhNHJChzp+Ozkq+EG04s3j+FKkQgqIY
uQI4yWWrG4KimZLnlL1bHJkhXVRYLXhpGeOrU//AzGkQZXXfN6F2I2V0qp4F
jaPSNmJwVtq5dwVVfbRqwhPGbgQi1vQRNDIjLiG6kfCn0jAHAkVPIi1lo8HK
5bIJvxoTUsMz8d4ksUljwsxC7I6IqpZzpofIDp0Py10jgqBL8ISBoqG/4oLr
Pbye8HD+Ji+msoOCzqnXmcrRuRM3bJGcUxiCjSEf56m+SEHU6kmtS96JU9Fn
3ub098A1Y++dkiIClbprqwg6WJtkCP4cXnDjRM2GptWkCDBucctQdh3lANms
mWTlLQ9hAgN4WEcvb1o4p5jDVMtIHNzCORsWudRhH5FwkBlEr+L4xPOoulpS
u3loqBopUoXxyQahUxMiUiptboomIjJaqDg0FI7UlkN20A8YCfnUNLY03kaq
bdpUDDo/tzZpQN7ZNbeDetsJDr+OCaizmeAQneawluRoGBxYx3UnVZY5WOH2
9DDM5HT41Sg0AuvozRtXj25hLsuu33tFmY3znfs66up9qkYFqrWLgzuY3zcp
oCtthToHykaOUHuLAoY3/YImdP54c4iuxr2APb3hyV1T59FEnYJmeikkDWm8
knYuniMIFiwueXCnoVU4WMDQCIOGocN4wx9HBOOKnT1gohKAbhBsp+JupALf
xqnmbpjFYs4escI0vrTFsbWcMnucwAv3tKFqYiPnOhVX0gWFxj7t/NfBqXlL
fIYZ2mA0ZLkNNjIj7iiF/qkpj4FJT8c8WTwuylKnH2o33W5EUjRMSTxZFhYs
dBFNR0vTkzhvsYCDsZ1N9ZMuoq7xjQuiC1RkHR3BQQessRHxnBPzfar6+uiX
V7E7sFMUCRHHyYm0NC/KWl59XEAa5wDz/27H4ib4ew66pBv9eqt03oT/wLF6
2WBi6/K+G/m+cKUiCeIGxsXW1cAEHF2BKxIJMiGMBoaLKXAb3Telou6FxERa
Ne9e4CzZ6e1HT79SvxQOH9BZUeA8QFzcuXfiktFYf0W/giQt5BGiB5qh5pp0
W93x+tJQzyNx7HgA1QUOqx/1yOpeN+cUVu8cbKcpzdic74W1ShXmGDmO5rPl
KHfCECRI53jy9blCzV0KFNUztKXMsjT37OP0n0t0pFeXzDLa6wEIoypdxAJ5
0VFt7fFpS0cc7gVaUDCZ33gWjP2naALayMA66n968NO7FzIMfQiYjF507lWe
60WLcEspaSmmvBlBONx43weNTnmqWrh124h87CLHWOJcr7wzt+OjBQeFbvfQ
2zanF2MacHIO0ehN0u1eah0pX7wNNs60ahtv9EiKLde4N/MqQwmLpEP9IqXy
AqTx5bW8cLRgHXdxdFfH4dPU6LAzIvFReXQDcvio1Lov0GHKNRPwubiQ1JgA
pCwT4SKhBg38CNp10iqdcRj4c3tA2U2dFWmRy6NVfLQfnte988GA5Z0pFbWW
ForxSgFCvlt9hASRdCOzKAQcGumZUTqpBZL8RYitLhuN0RKQ9rLIWPiIOc4x
CKarJZUhs9DVEjJOFYE2qtTGILIeU5JHBmfutKcOihshkg4wAaVcstgs9xZL
EhP7BdwIwfFM98GklqgsVNCh2B3FSyIeEYameWpz+TCeo8aBM5ySVrMg14GT
AKGh4GK5UImQmOQmtFrSxDi/IDvRHYVK6mkoxcuqVcN08gbGHGnISHKKT2zm
FFlnwpx+XbgZzmewK7HdddU7EFMY560JviFMG3NOQ5CK+xmStYWbh5LBskZu
Nh2I4aWK7g30Q3BZn6GH1vZTQBfJ9xB0mtNbPsjgQqKGbMV5ThNjZ6QVis49
tblzAH94GwibqZdLKaxJZy0Es9QrKZe83n2kLotqnxKSWiAKEPB0snkKewNM
OwjDx6OJfqBFyEwtqV9qYNKCFqIQ9Mw31kNHSUWGEj80b+j0ROtcjtxT35sg
zbFB43YFuzCuU978oHUBMiGpuTPvrLdESaK9D3GMeC6iCpGEKlLL6oVPMgVq
xoKJaHYyCViRzCPk6dXTm169M60T0Ly+dIK5dp6u8FTROhIHGOD082GLaJWX
JCNtwIG4OqcBeqUnX8wwhAZqacO88lLRR+KTkW0fIh5bBVRb2ruRtjv/Xeqd
9t7+ueyYbTAJ3QiV2kUD0rJgutAxD73hh6YxnmhLpA4uwvzcgmJ8n5z1pO7U
a3YBdlrHe6f+ulBQ+w0vrOXjpb1758pi4IBRnEfQwLAKkAQTJEnFZYarS2/Q
NSGpmSqogN7bUK9i6emi4XtAVDQ2oxUHVQNZtViXfPIe4QAfvN+W63NZVzjj
OUUpo8IIvvU8A3UFHlAXK0MSu6R4F+UsjVFlvutrES0p+xpOPdRK7FU93LYx
FPHkxhWi7ZagcyCPkHEUcfKXMm6BWyQulKoeFzLpKpsXcguaokXTUXKRMmhe
v6wwQVMHhkuN816UdnwNelGqIL1qJurIgmAkEXaNRVtIrONdUqwFXJ0XjoY4
5c2k92Zgu4WVupGQXJT7/CmW5gJEMZ3zGGQZ1XE+1XHxbyxhw8zQQOkDF+6g
C1SjnjpKLc3vcDUdJXiwkDo9640XkTaMgwU6dp7Gh1hf4CzHet6AVKK0rYAj
0UHbg60uz8y0Nxb1DIKj7bT3IkKbiJ4CgXhJslPKeLCsKKCZQRBp5+uGVUWW
8po02bgtrbLv4JgkZp4dDiAEvWYB1wj0e9axSFtOK5ILTCRvd10EKE+RWRzc
RmtTKmpODyrWfRzgqHKHmeQirC5YEeZh/FycVVESmxEXzl/UCNrtxhod+xDp
Od071xDTxlEq3Sl/UbACCJCmcDAyJ1rGWGuDRynQy9JNXlcEEJQgPntn6zqG
wkoRtJHQHKYfpwwLHXvB/QwPCBKxALugydwScOpRsFTrmO20X/P3pO1Sznik
Zl8fFuK2TcHn9iOTqvOghxJmlaWUTd+u4hzDzytiDYrpT80/ty6uh3HfIRtt
gZR2u3Z22vEeipqHIhyiJ07ClmlgKtp2sllG9vGvOAqTxqYhMEc7+0AJ4l48
FbGk6EEDR16ZEzY1rP9AWOHN+ZKaAb8u7SsXKUdbmKzHOxI4RCHpNiWRWGgu
U6aHhgSrI+tDSZItT8913ByxUtU61VG+Q3bQR5aMTIMWXfGCdgECF1PUio6f
KM51URbMuF/jAZFvPTtOGtsTIcHhVASp5FGGkvgLu0IcsXOxFJYqIJwJjaV+
yp28SD2Vm0ZsiKnt1BJZQLlkdVqYAdBG72BVlxBryURfy0ubvMm2STWZqrm8
RQIrvCkFGhJE1vbWxAcZzTXUcoSatIUxwVNA0sScYr01IvU0g+cI1euQ/q0B
SHEXGcGmG2WF9z5UXLywkiQyFTXcTkjZGvNmTbPAkRR1hcu+9RB+wguOLxGb
D9NKJofgTr96nV8JU805T9OmEhyXiASemPb8q1xaKcEJIgoTX5UknkdsytpF
0tjs+PmIXOFXukuLVLHiopo2LR1HVjb05+OSbuzzRxOuFe03F53yxgljJkSS
b5xgAgvOVCBi4QuhCVWvnbJh0t9kUuSM7i6nbKB7i2l1+zYZSg5fpm6QXwFf
tGg6cEGs8vzC0jqn6qSw8Qk9MSAp8zVeE05ZNZ9Ooom8rndPoUs5ZwbvdtMS
1xSKu77W1MVSdqrBtSUJz35+1oYrBTzpoWx5zkjxzW2+vhje2fwvCUyqHLzC
TVX4+hwmJogKzjUwOe/pubqWxLmO4zXCF6wt9tFnX3FrHz5lqAOGIbtDmZig
RN2knfd9UufHk43YD59xdioEC2VFNiCxN4f7XGsxlLOFLnS6pQ+ZtagAX+Si
E08Fp4Mo98YsvhL8yevhdLS+i6rt5Jjyytl26OpA+8iiN76yHsXQayNxxuZk
amb7dVjKr9L+yoA23HWuGct4FgSrIp7vPQs+7oqQJlgKk4Y3E5pcVp8z9Ihq
n+3MyFRxn7ql4tW5PrDMmmmNDcPkzGfKr3LCIiJ8JnDVXqwI0ESU5xq+qdBM
LHf1Xj7PiV/b4pYFOTiVzlPi70Dpin25xahMNXfOnBVU2VfYM4HzeZDZZpbl
Ky2/Dht1gJ7tX8PIm4j51LS1O3KlosT5QJyB8To2X7lcnGoKscnN/hlnM5fS
ueJ5B6t9XOn7YjqUi9QOnb/Rv68VwnqFbk8cJ5YN0vk6mA0r0QsdWio94cQY
QamqRtDbq49QvLif1cZw+BxDLxMGU/nRaqLT1YidFajzp0z1dyoofFNLLArC
Z9KGJwhhpBybn3HhSgWYSpNzsFw1W4HVVaSdLLiTFZkw1Md2GL85vd+0pzen
n5vStba6Ul7shknmPHkNRX0dq2OSo2GLTbp9/KilVVqdKlzUFTdkqs682ARf
2nlhlZkEA1rMtilWXOjtyeuWfrXVdelp1rWJWslZiloEc6NTCZitoLThGLX1
7dPBrV+b8t4WIZDB6WK8XT5dhEk2beIn0ykoVfDCAWmrLObVk/s54kVeMIXa
CR8n1xoMXpTjIyDIiGj8dWJXhLszBrYp6QZP6eKmPb/EolxL7mrx65jFGnpW
BsE8ZvS5hAryxavgSsak1U9VfM7FJQ0uqNWmaQWcJJJXhu/KwaeAindm211Y
6xq5PAWaECOA1qby1FakneB8Kc6bFO6shFcCMm3znKtDtC0hf/P5X0qYBCmw
CTc0YayeYapWMmLSheTRhCxUmBtcRYIHHFprn7I9EI1FcCpMW/chutBG4rUI
JhUBqpuWoguCkOZ6N1XNqd8Q19qrfYF0t1dbVVfSTONc+ql7yTiUHMj9wMab
rjYk3WKyirUxppsg420irZjKhSBmOsRfuqNzmxFxv61EO2dNW82pNSiGozVP
c2tRgVN+lC4uigFajIZOLFSEYq3jsMUZZgZtmUQpGVY2e4zAZoqfenscU2Xc
ubXizKmvi2qwYNA2ZAM3GNpsL9iYgPCNmorrUGKjP6OutrBNMLwClrPuJO+a
PHPoheJdKXk9LwjnYMOmTLcOXW6os0Vd5uI+nUeB/6lwC7w+7SZfP/u6LhPa
4Mj0OUxctDoYYQxpD8UQRfCpYZZ+KTUM6t2V3deCl5uu0YswuWff8fzhXFIs
YNhUDapWHMQ55X7WeZaOeBoj4TijaRMX74wzueKnOE4mSMmlslLUt5d8aK/w
vbGqVPMqtzp8Pfc201Cz42e6mrBEHhYV5vyipSMVsA4XRbCq6V1qiqaZECsm
txnjwZ0eIFSN5TWbEAG/LcLR5OVOPiYccJy7CUc0sYbW2+ogOxTrhZ0JxJOu
MywtDCscX0wS+Cro6v5wCvZJ0pLQTY6P+yD+lVr0Rdbtia5sES7W+ZW1vV0U
10PPpl3TjRSyLO4FG3U8k38TrmiDt2lnbu3w6+mjGYNAlXRGV2YbjnJoHg7T
dtLJ2PjZph1X4cn1qHDGDybGX+l0emNB2RA+oZVt2rlOoo6Mi5ILMONwcQY2
DoCwArTyprDNfvqnp48wJ9cdPtnbtGk2jWOU9BZuSgSZxu0Jc8AlcWloPGY7
UmLmK56WmzUKXTPc1QoOjS/Ujm8k90kNNuQaQTEbFtrQipR9s8jeFkgybuGc
gdMTZDO/+JGH58JAA1+0kFZi1zjGf20BMidFEASRAiYqYDmhYRMqi2Zw3z+y
rAl8I1PH1G6UIeRykpGgM+I1V/nZhiJFhNQgEnkEVc/6hHATXrhrtnEHOfpp
Z0qQIq8Dl4IIhI8anXDwlwUhkopJ2Ooto+OzhtCmkBVQb3DMOHOUWP04RhSR
wPM4Q5P9CrQkAxqCWqrkna1F2edZuamMKfhmYIrGsgGtrGJ6jlU8a+Bmso3r
BX8qhw8VN5jAbN5m2maOMrwL82hdu9H8LwlMMj6sipSbJOlI1boIVm4aV1ON
i/yccbUVfrazADvntXjHEhHqSxdt23hDxSNbmT8gPPpC6hdxjvVCBMQ+mnmB
CANKFkmCw9TZGAWWWV3Ir9O0xDFDFWWd2k4WXkGmo4VI+lwcpFIQPYJfwlWi
EwFuhOkwIDOZ1yJWzKLxwcgsZdyJJao0qZgKyARR9E4SPPkYqlsrWAXjYX+i
h8PojshyIZRiSax6jakHLCGObTxrQlnskBdmqjdgULCBMI1rHROjSx0vWysz
8zwh3WZQUWa+pS3fDo3tAj4D8WYcXxEQTsmUxRsdwywNQjGuwmKV+CAIs7y0
mKoWGU7SNs4mGaqAl6ubbYaJh2D81VVl1pALlixjexyStFRLTjHnG4eDgKX+
B7OlPfLou1wPQZfigqyZRTSYP0mWN+4j5Cg0/zFkQTdkKhAeRQqppCGWK5hh
JpMoDRAsr62VdAfeCv0oJUkP42wSdMXQIjhjAeeqYf2qrNWwVgTougSjwsua
E91kYQmOcApovgcSijtMEkv2xmNRiQOZZOLZRr94QpaRsBYxv0gri6OzYhDD
GTdaPD/3cpo+s4biklG13g8R2UgcQ+7PUDhIAZI2zuRT7xuTtRJxdV+Y2Qpc
kllZFTupXC5NgUvAh2CBBFGMPGu0TM+QCyo1OVsRfV/IWMTxgoykDoHR4Hod
iBc7ByRyVSKJeFLNNQpyHMFR6JLXxCW3bZOMbJINnqeUTeDMhmdmAlB8QwpI
ZDs5NU1smTca7vGQxLo1khTpf0KgMw+JGzNy1t4HZ2GY+yJniaKotKikCeWU
hWAmrXs71nop3HghdhzxUB+FNrQl5P6NPpqhT4sUtfKn5A8OKqVBQuYzUQ4V
M86pkshIkjvDoiAMQs+qK0UWLQR/empOPNYzPyXYtITYeFZJM9icUP5xKg6E
HqNZamyMXeMbYiDqlBc4H0BZJkJEt+CwlLSXISKscMDoiMFZXVHiK2aMzJFw
+BUg7ysOhZJqJeU7JyNFzQXHSmpL4LiDliYkRN5Azoj8s8ANElKaHyk5AuJm
kL5Jtja2ivFkBgcNED9WRRry1omXltxnkhg/iXgY7GLYAZZGfbS7BEzJCIjA
DL6Dxnh8tukIotFyBJdlIVSHDYeemUA0C7Sn7JA9KVKY1kVA6RGeDfC0IrkY
MZyxm2o8/do5W3haApl6KitAM7fQZVbdB85gSDfjqfQhlwkUZErZK9o702lF
E7yC01QsHaKZlIziZrgRvOKDNRYEVhuKPljkwtKqzcwQwRaV2p7N8f7RkO/A
f4syLy0UuoO1rPYhH8EZyVMVqMAo/zWSnKUMdOKKA0Uaua3ho3oRtKIJjnur
1gn4Y7BQ/WmvJDbPxtWLukO6HQT8BvO/dDChhkFaR3rS2iFbKb7QdsmdrrK/
heXcdGkpnPmTfQeK0pO6uyzRZCe5PIODfoVN4gSB3lJHhGTP8l6nmBURLy5S
+pUn9B7CqEtzDkaO0bGAg0AbCry3Uk4BlfNMPur3ZOcmwcQHrKNO2A700CJS
v9H6S/Jo4/Z4NKU0eKEhFulzASmXUk/1mEhoT90XERIgd6itjifXHbndccBs
JKqt7YZUQjk76F6IMwuvSccshcbNcPH3rgbduDeToai5iDUYSYqHxo8woYtI
wG7meoLaUaQDrjsrADttG2NYW6/+qSEk6uI8ky1hVJlvHeDadHIxJFpDVhEn
pW3gFHbbGrRtMye5gszxnYXs8/pLGFJcaKsulIP04aLsIFQxSBxUVVqdvA2T
Q2w9WIaVl0vZa+PkOSqqh5LudXgpO6RjJ9vYZd4jMN8kuIgIulnUzQ7QNeo7
7EdRQ1uoGoX6aLcjlATyDL4TveEFJQsQxv5lpqiGLkU035+C0dkIP0TgxBQa
NJjZCiLnnVcNeqAT84Kk3icEhlYfISkEL/sumgO5m+kVFhyih/cVnhS8MWc9
sWLdyKLMK9n8UneRdECaEIppWblEW4hRjgnH19elnoQQoH10J6aGJ61owGTL
QHJh3S+Xv9DzWMMWLNHtLR7CUlMqjfQsOsta5NSKzKHlWlIGxpnbGPQn0FuK
I8XdOdzFMPnMDTV1Eheq+FZ64gNoJCwVXF1olnMzChpqqByKwowOxzjOedIu
L53C0sZ2u1wZG2+KzJJGwqR65UJt87P6mW7PnHgmetxIsM7ThK4JOqe5RhoC
7VIjvQ3IwOq2AlnszPRdUiulWRsebvsdMTqilPjOaF1aDqmB995+mApJX8cZ
IWXUlyOeoNMwBW7gmuS4aDjXFzIbBrd0RBnYGziAFsjSk7sOVbDArtBGshY1
nVx06m7cNv5WrQEFhrfkI3q2scjyPkgahoCVVxmOyOgUCx0nEaVn63rofaMe
IoGKLj7aGY63zOiWGQEuiClv6YUzIl1L3JyVs3FNFGEHY0tLPMFjzymOdHO5
N5yEqJzSR+KCz6bbTznukDo47TL9Xw8EXVeCgxN1I2RYKETB851qH67PiPwz
kn1pmbieij0ENVUBqh1cWZDFWF36EAkQrz7HJO51pAodspEX3J7FdojAIcII
4A18F+8acVaeHYSzCIIowyhymsisqWTGoF+NEAWuzlNZp0liFke2aF4LDxtq
GIQzXLs11lzdlGlONjEjVvmYp/qC0HkJCHla/GoHETMFIZCf5c4fVcQDSbZZ
QzlTjxjhat2CaWfHtEEDZzpA6CS1pg2Tc9KFY/kSxivWIjLYhOyyhDusTj52
cULiXqA68k66R2HmFL0jWxr9VWM61xmQawVX4bvlIEk6CQv/mmc4P/9LCpNZ
vCjXlTaOBi1NWyoRk+id/CR1CuJsxVFyvBPHUyc2DyPHlImwpFbH+8yYp+lQ
IrjAuzzfOBQ5NdOXA1Vm3zwNjqBR0gm86hcbY3FBp+T0Y0DmdayJllBRMqZJ
rkUixQP80nHnFbAtLClqijTYxAeaUJqZMgvUfmo4G76RV+9w2p/Qm4t5AcYu
MdBnmyYAr87nVGK87noYtEw2rg7RtSKOFBfem8eRHpcQVl0LVJylXAj9IQ9W
UoliRL7RQUGkWcjTsLMDPQBm4GRKDUYgaqmTELNlQc6JUIBQZChTcaaeioUy
WzcLZjfZhk49igiXseBVolLxiUEFoN/uuYazjmywcl7DSh4VUYhN11zpF3Mf
8cJp2DzdztQF4I2aFBiidxXe4WGHeJfQ66ZmYO/IWm1984lKI3yYQUlylsU+
0Nbq8kIhRwSrSfJwJyCnQ7OEVbCHBqDbj6ClhGJLCn6KO53mRZBEiRrThnzB
8wj4Ygd6aekY2UnCZL+CYvimFQd3bbAkpNjMpM+DJUJRb+fVJJAKDzgkHI14
kXYTcWOe5eVssAL/KRap5goP+fBhNIMYkg7ZoB5pK13oIYHDBJCkiIngzxFo
Nv2Oa8h3v56elZf8j7yaEWJ1lJNyzgkEqXqRXdS7FuLWcVkvEiHvAmhaOkmo
jwTFzpDpjbxXKcCJaDi7s/HR5lAC+KB4pjbYxS5fL7nBH4XmTXxU2ZyKcuTh
mB1aeUF7PQdLNT0GS85kih7G/Y0R53rqjlcn4eUuGObZEVbtuK81MidUuso7
joUCEhg7i8Y4AoItdTugQbjr9Gsz0yu80GzTzI+v06/rIiJTAcpGFjYXxhSW
mBl83X5dTw0olq6NOcywjvZk70qD2YbsXTHnehxvIx35htZtMqTzavUS4fx+
yjZeqKRWmddzwnnwqAw9Xu7surShuF7Po4tOfTSFOc3ZzCdG0q9NGDAd3ybc
XtpDv/LMTfgoRmfN46skVddK9pYxnVPsZhO35DhqiIU8ulCTAzpfi7Pz6Gz1
PqTVOvmSaDCvlpjmf82BENYi6daTE87N95gjCnUWUlqLkGEH14CdfC+iMFcL
c4DOywK9mlm6nfQ2InlmrfB+tm7OKMYUjWXwWrKpJDnA5xmS/R6OZGpzBDkq
9pRiFGbPo7U5iSLl+BZfdJ6dmpq/QuMHiwmvkkNcEKyiEGZbK0rTZA7Ahqlm
qciqVc18HZeolmvmE56GKlk6XjpLw4JgXjXPup2R+MzjbPDajceniZYlpBT0
KOYZlnKeeeJM5bhkSlnrTVFToSmZvJHakbmXI5LsL2LhFa2wcD25ypQZ3mOD
gRVPPNAhoSZY0eQCkW2eT7NdL5qFxrQICN+7RqzJ1MIYDVnoiArmB7aE4E5F
UKZaS43OP4FzaG5jWOM8JaUnwLSfuVJPN7e5YaswlElKY84oyagMa8nrqVWm
AD9DJIRY4x5BqCCdIsCUcIVfAz8LVJW055ydCMSZcJf2nAlHmZXJl7CXaQTh
c/c282ppeRMkIupVVLAwM0e24MZaEqqEKCOcHQnGzNNy88raWTV5yR/GWVxY
T3RN11jxDJN9ckwlapA3F7n/b0KKzYuuoPH2Mkzu0TnDz+xFMjXZuU4Fi44F
MpHymypMsa9LJNTzjXU0uJw2fDrBB431OtTTE+bY8MoWfr6O4PAYBKj063hv
LZXZzjJw86ouxHSjHi9IQZiW5j97hKgb+XkafwZhmr/YWU8FdK6rK7FjdxoG
lJicsS1YHh1RiTujCWdQzbdnuMrX3KiV1z2TFGecyjvN0rAzbgaow10c7pEn
tpmqTarap7QfGeecAmoOoEJzAujOMGEeJ5n0K3ox3XVPkZBzJy9UsrRMLlIn
DeugTut4I1aXHZz3G41O5fhP7lNAzjUnXRNrk7w5Ybumc9E1iDQbJbc8UzUp
W8fJffU5DzDWzTBt4vA6Y6jd16jVjcM7FkEHmcgmJkn73QgINjjm6Rp26vhm
vE7FyCz39lI3iXzMOJ7zNLbVdczJqrUVtTU7Aq/HGTY2ibQW44R2ptSoO0SY
wWaPjgMlPiL74OnG9ukaRMs+XKRWivb1iYd+LH+CJZ2c6Cn3jP2yQ7M5JmmZ
rpFdMb54M6c8zQpDRIpJNxfcmIq8FnJkzjqcrcooibUWppHSyAvIi4QMgg/N
14Q1xWAL1c21Jea6dLBhzmBReoaI/oo5rxVz7iNZcEg5hQPxfbwFurGuAuGZ
EjcCtINbh2kpSTf09OE0IdmvzGdikI/uu9qmrHYaYMfBxG4QuNHfKAVzAtwY
ElwGqeamGFxHqJR4BCGnog/OT33yGzV/zdywWKholKUBj7r8Fsw2qqVHLWAF
l2Oesi4V888xlW4Af/CYMC39I3aBanQWNDfe901r8h3ljC+64MRdRv2r2O+l
War5nIXCAOelRYHXYbkGCYvnF17LAhQiTZICqQ2I5SZteLUFcpstmrg31D6G
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
yGdR2tX0o1Z/eP7YXL8u8X0ejpvY4q5FXb+p8sMqX2b7mwp+fP9L+rQ473Rp
m9jtn9tab4vyzV7io7FP1F267iTrm3c+ZmyzhXH78G82/pHd2ww/PPzLun8T
wMcnbJl4J7Mf0rj+OfLNT1LwAMunVW6S/FFbdnmY28vuyvennDzn/y7CbS2e
UXR3y3MSPmrdzUfzYeljuf33lghmxKffKMPdNu9eP1z8UOjn/Bz581zuh8Ae
LvteAZ6v2fKIYT/H34Mfmxu39z4s8WXVPr75XL5tuR/wvL3gjkdfQvQ/V/9j
WR+2c0f/u51+zPa6l49Uqp8+cLX3mc8/gWS794eEnLtzCV+cKnTnWu92+rju
h2u+SfvHn4eHf2T3NnvfrLj9/U3SPorb86KfkzM+Z7hHtbvl389cb3Tw48Mq
D9n+666/p/CXT/uT4GxL9pDk70X7y+x93GkL8jmSu+zd0eGv9Dw+Je05/39a
7mMdH/DznM9vPq0XpfPDfx4jlx68WH1BjeD/iDbrxLXeHFJj9pF5lko7nvH7
ptvKr+a/h7uhFR2nnvx7778rN93qyJDOsV5T8dy0JJZ7B6r5G+eR2zx+wx5e
8bjaDDUPf9kxFUZfenOIPQ9tdkztTo9yYCM2WFdGkg9WYdksZv+o6QGEBDzG
q3+DUxnAM/tXPGdr31jaEQ6/v6XMwTr+K4e97orq0e6NtQ7suq11eAuz6cPB
g4jRk5PFmtud5tIF6TH5PnOYwZuSG8X4TchvzANv1u+jrRI5n5tGOZxkoDdI
ukKr3kwEFjGP302NnqLGnYbzY1PK36T12tW9OfO+SRoVJ3r7csJJ5rNtlncd
C7UZW9uXatFMbOx99N8bUerKkLo3Yun15319qzu4cyoJb+SwEbzava2ODbQt
/iWkyWh7KhBq4QEiTA2JdtP3xdy2WgvtxoPZN8l6YozhZZ5nlM/VmT1jjrlK
OUzJg49K+kfDBZHxqNdeJa4SljxTPfqT3cFzI6nAyZcDXHCoV/HdqMjRclGe
RGlojnPyLmJtNhUP0TYVncee5qqvQZ4cuaH5iFSffh1upClDo0xjH6qTjyqY
uWRNadehOAjV9bax4wQglau8eCKqN0eggZXA0ttVVM8rNGeJoYCnMKQ5TMiY
2Gy5nbHAPmxh+lUo2JqciHOItrMSUvAbsZfIdrNDnV/Eicu6g8SMh4/+fhOZ
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
ul8dY5Fzn6h0PQ9E4f1tS12PGTPD74/+B7evbpk=
               "], {{0, 69}, {2048, 
               0}}, {0, 255}, ColorFunction -> RGBColor], 
              BoxForm`ImageTag[
              "Byte", ColorSpace -> "RGB", Interleaving -> True, 
               Magnification -> Automatic, MetaInformation -> 
               Association[
                "XMP" -> Association[
                  "BasicSchema" -> 
                   Association[
                    "CreatorTool" -> "Pixelmator 3.6", "ModifyDate" -> 
                    DateObject[{2017, 6, 20, 10, 7, 18.}, "Instant", 
                    "Gregorian", -4.]]], "Comments" -> 
                 Association[
                  "XML:com.adobe.xmp" -> 
                   "<x:xmpmeta xmlns:x=adobe:ns:meta/ x:xmptk=XMP Core 5.4.0> \
<rdf:RDF xmlns:rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns#><rdf:\
Description \
rdf:about=xmlns:xmp=http://ns.adobe.com/xap/1.0/xmlns:tiff=http://ns.adobe.\
com/tiff/1.0/xmlns:exif=http://ns.adobe.com/exif/1.0/> \
<xmp:ModifyDate>2017-06-20T10:06:78</xmp:ModifyDate> \
<xmp:CreatorTool>Pixelmator 3.6</xmp:CreatorTool> \
<tiff:Orientation>1</tiff:Orientation> <tiff:Compression>5</tiff:Compression> \
<tiff:ResolutionUnit>2</tiff:ResolutionUnit> \
<tiff:YResolution>72</tiff:YResolution> \
<tiff:XResolution>72</tiff:XResolution> \
<exif:PixelXDimension>2048</exif:PixelXDimension> \
<exif:ColorSpace>1</exif:ColorSpace> \
<exif:PixelYDimension>69</exif:PixelYDimension></rdf:Description> \
</rdf:RDF></x:xmpmeta>"]]], Selectable -> False], DefaultBaseStyle -> 
             "ImageGraphics", ImageSize -> {2048, 69}, 
             ImageSizeRaw -> {2048, 69}, PlotRange -> {{0, 2048}, {0, 69}}]}],
           ";"}]], "Input", 
       CellChangeTimes -> {{3.7080974999989*^9, 3.708097547169641*^9}, {
        3.708097586842518*^9, 3.7080975954012012`*^9}}], 
      Cell[
       CellGroupData[{
         Cell[
          BoxData[
           RowBox[{"SSEdit", "[", 
             RowBox[{"\"Notebook\"", ",", "\[IndentingNewLine]", 
               RowBox[{"DockedCells", "\[Rule]", "\[IndentingNewLine]", 
                 RowBox[{"Cell", "[", 
                   RowBox[{
                    RowBox[{"BoxData", "@", 
                    RowBox[{"ToBoxes", "@", "$banner"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"CellMargins", "\[Rule]", "None"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"CellFrame", "\[Rule]", "None"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"CellFrameMargins", "\[Rule]", "None"}]}], 
                   "\[IndentingNewLine]", "]"}]}], ",", "\[IndentingNewLine]", 
               RowBox[{"Deletable", "\[Rule]", "True"}]}], 
             "\[IndentingNewLine]", "]"}]], "Input", 
          CellChangeTimes -> {{3.70809764968008*^9, 3.7080977436515083`*^9}, {
           3.708120595263157*^9, 3.708120608069406*^9}}], 
         Cell[
          BoxData[
           
           TemplateBox[{
            "Options", "optnf", 
             "\"\\!\\(\\*RowBox[{\\\"DockedCells\\\"}]\\) is not a known \
option for \\!\\(\\*RowBox[{\\\"CellObject\\\"}]\\).\"", 2, 7, 1, 
             27255214006958592697, "Local"}, "MessageTemplate"]], "Message", 
          "MSG", CellChangeTimes -> {3.708097755857635*^9, 
           3.708120610772525*^9}]}, Open]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["Notebook"], Deletable -> True, DockedCells -> Cell[
            BoxData[
             GraphicsBox[
              TagBox[
               RasterBox[CompressedData["
1:eJzsvf2vNOlxHSYkv+TH/AuB78z0JPfOdPfMJXdJ7pKi9iMUyfXuUiKXWlkx
9RFKMiKJHwCXNhTJFPiRRIxFiw4sCZIohOIPMulATigLsORAokUikMXEdASu
A8OByURAEMpGAHvD35KZ6a4651RV98y7XJLvS75C62Juz9PPU3Xq1Kl6nr7v
8j/4wZ98+j/9d77jO77jXf/e4cfTb3vPd77znW9775v+/cMv3/sT7/qxt//E
j/zw637i3T/y9h955wM/+O8ebj56+P/vOAw9fl7vbu/C6z98icZMXy/7pvt4
N19fG7b3r6/ztf9mG/Birzle3bNOfYPwuduuS+J1P6bfXPzvX/evO72+vXl1
XoFn8bmXBPz+df+6f33rXN82W9qvsUJ9exe4b6vrW6gcf9tk9/3rsutbiNv3
r2/j65tXju9n0LfudXeUy4u5/XWj4t2Bw91ixv3rXrvub9buX3fJdREV7wvd
t9H1Ld9AvggHv+UxuUuu+zjfv+6a6y6uet/yDeSLcPCbgMldzJA7ue5Mdb/l
uXdn17cIB76dr/tdx/3rm32dk5G7SXW/vfMlRuquReOuNezFWHg38f/+df+a
vu6OhvBcvty14jBv2Is0+65Vj/OGfR3pdBGYdy10969vi+vukNNvynXXpt68
YXet2ffidR/Mu/R6yXXp21jo7l/3r/vX/ev+df/62i7a0u6PP/uZwfvGhw1X
r7/ubhuap8kz9LTQ4SfG7MPIRi1p8rfnr7PuFEs3x1/tzsE88SIaqU7RsP5W
gdqvi1/lfvToNINNso+P9PpUnwzr6YN924T5+4lHAv6zADY07URQknfOgTQz
g3ZZiH3C8JQC3gecGS4hc/p2jir0YMXe2QGT8wsm+5AF0YB+WCvkY4lq9Wud
X/tIjIl1L74KtIUzF82GlCQDalQbHuk3OSPCbFNX+W1gb580EE/tJfViHGfE
hJJ9Jvr1bEVaTflFVu3ThKMlDXtq2DbiO6Zlpp2XlypqTflskOg+/Vrk13zG
7Q2oO3mwT7b1mZBJ5GfrqX8g0jKXclwmvu1DsVNC9lMTkoUU38lI9UNp24cU
S0/tWU/iVL0TbwL8acScsWfsPIP22bj4nFxH9k1ablK+evU6MDabFNJ8Unmo
MxEVFV2lKkZmTCZgfFaDO5UmJaq06HTz5r5EG6bpRDdLS/Zphn2c5IwX0ulx
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
8bkXMfmaLrHtTv2dKCgZzxqBerk7Vphy8s3st7LWJV68tEw7v+LXfnHJu0MY
z5Skb4DxUyt+7VbND7tskpdYdmxn941G9U6hm39w9SJUbtNxx/v1Q+BFzdzS
z4tnmNeic/a8GAynFr3rr68h3JSAmwvdn8pZvX/ngnlHm9B5KF4cIN9E3fh6
Xuc09lykLoLlXGJeju1Un3PnujHpOE3Vzi7x9d01XODg12bAbFpdaM83Iimk
bHlH9+J8nw/o9P0Xe852yXJTC70Ip+7Utjtsw14Cwr8kNI6TfOPr8jdgxXuy
2bijUN7B4NU4vi3YeGpuFxv7fPqw2LRj07sdfx0HHNvgseFcbLvPfeqJL3z6
qS/8zvH6wWdfwSsexj/0mt3xq9OA3/6V7/Yu2tf67V95nQ+Qx23pp5542e9/
/A3/+vPPfPVPv4+vf/4P3/Th//y1i63Wo017unN88PDtYNXhOnw+OQjHfdj4
+XQdH/n0U+NlVsn1aZ9txORgcxypT/3yhx556omXM2hlIzcujaceXUy3i0fQ
zM7Pfeovjl5viw7zqTe+nE368E+/doiLLZ3P8A9Ttb/2sd/4yp//+f+n/3e4
81uf/NQim7TpDt8+//w/MxhbQLppsWmyYcfou6knyw83D1996ctfdk4uThez
dHjkIx/96GDM8WT4OA/4/O7nnhu++rkPfNDIIAiPeJ4+H9ZyY5QMozHz/3dY
a0mzHWCZGnlY6Hd+93effstbQYBNhw+Rja3beZjzhRdeyCE4IGCA8CRg1GFA
jt1hqoMZx9N4h+I0+ADjGLsNbkYunX5SiFt8S/rwvg98cEA1/N8ffuYzTz/z
VnU8p8ARgYPLX/lKYfnh/uk9AokVlm7f/Z5j3A9jRo3aitn009Rs05oBI1FJ
FsbBq7Z/5PGXv+lNr9w9uAP9mJA8+cn+9oH900+/4vHXPbDuaFFeXfiMOb/3
e17xl7//ofaBXZxT4sv/iKYVCrFrOAcIy6ksCDJttNYMG5PrsrUiPsFZRmDD
a7W84rKKBQ2bWCvFghZK3sVY3GP43OOYiPELCListdC2xCYfsjW4Fkcmae2o
3BhiEiByMMC1UeSlKZqGSPCHyDBQi7B6mlBrHw3etJB9sdabtIAkhX5ATwRQ
YhdoQI5TEaequmBsI7f5p1wBTyJkKywNSCJNuBFFFbD4EgeAp0Z84yglwoin
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
N39df6067mp5GYsz+I/zvMTweTliQpSLlSUjUHYvEYRUTWSV8tPpFcWeYOrV
U5V+5ZjeeRZcKzpq/3UwDM7eKa+Ok1xMlLPruQPobmjDJKSxyZ+4Hm6ZrJ79
vuRtnq2e4XrKUDHwpkjGFc9Zda05dxnDqCQpEBd6sWotdjf18fqWx9c1wL+I
6nTDVFXyewjOrWh9F0FRwzXF1WL+c5BWPV6050UA/xr3Fg1JfftE/Tr3moqj
Xj8TqbxKP5EIN1i9huVcCPp6tjPcyMYzhncgNdf2eloPr64RVyHGudxff9pi
kjT+ptV5N4XhDco0Ev86q58bczGtqC8kbc+uWJg3XV6xEatJe0fl4Cw+JVzn
ZXB3xsIVsS71eFf0IVdgYsiUvxYzJKwuziF/7jo+Shy+uHlQokpXq0c7K6U6
O4NgfjWqZ89Y4qv3onwjl3XpvkRgVwQoRfzK0l9bfq3Ej8pflt0Juu5crK5r
YW3S1Wkipp7toK7xukGduuHgerzw/Bp9wkVU/mrOWnDsVfQnBdOWaGttS9tb
vehROJZckvpA5t1pHu/ecd0P7b/9xUf9IP3rX3i7rbL7wPtf7wfRv0D/v8An
P/4w1YXjSP5i/PHwvN8tT8Yvxf3dB34GEx5e733PazFJeZjf74e/qrFUoJbm
6WefLm7RJvOIkrkfbRhMHa6//RH5vxjGpxjY8uz8r/Rc5zXcvrTYyfm/hc//
fwp/GjKsGM//LaBjlDm+/cAQZyONNN9x1t0DnOdP/4E8IoAjr4bD3m9881un
69LDj0fuBPVwVvzY7Se+8gfH7/CPmJ9edNi+g9n9bjgH/tx4Dnxc4nDxcO9h
xeEv1RxPnimOeqA9mnpw387/UxfBcZefOz7/X7rL/Xg0/dxzz91/PCHfDfSL
kwBnDweDs4vLbffD30d6cgzBccBwDv/Y7cfjjcdwWEAlHLvBWZz/97652J0i
vpMg8vk/jNl96dlnj/80wzOfGM3udy4yS5/NVhyM/On3/+yYhqdbzPIngtmk
BnvnD2h2zNlx5JMcd3fWNUpkylw7Xbw4/RPq0M9+99N/7f5//e33HNLkX/3R
e375P3xosx8nWUogjvOv95fP/4tjQv3TLzxqIO9pwP6Vrxv/aY9/9Om3avh2
vCKd/79axyBMh9d/9Dd+ZPjy/0c/9FCh0pLFuymbE3tJvVOwwMm7tta+cLDf
pTBNXr/mWjkWEIRtNiM7pcUUKhfT58XCJ5byv0yYYJIl28ZLh4XcVAcKgNBU
oG7yhReFPlgvwTAO5a+HvCzd0yBKHJohFkG3C7TDDFZQ2GxEE/WOerY93eWO
02BGW3TPoBaUdoJqlgLCgYSdZ6aI9+Rsn4b1bKojNqDN3sF+Xku8o9sNkBJ2
mTPg7E3OEsMofAYgtXlkNtjOGcpZHPkZHdQrmrwkCCEN2Wsm21giEyelywXt
fRXqhCnNgQNHhKKfkzQKCBfNccCSsQWlR+It+x3fNW1SWDTne0bYcWDa7JYZ
rn6Cik6SKpeXIto7uojxS16F05MzaBsiyDMkhgPt3QpBTJws6khImTGsy3iv
CQIEXHOwN23MxSLY2bPXwbC0rhq81HmWDhrWRTSXHD57s/SlOdc43VznSxtK
UgXw+xC+HcHFVUY5EN6rSqdQDqSKWZbgChIaLByjuUw3Fp6KBLlW7xFKcWG8
OOoYR0cydye+TOshwZvw8Wl7GKbJEsbIdkzx5LTdRcKH7UMITQhTjZ7oecxQ
ZpG4DJuXHoVQEZjhUuu949pRYfWtViYzlWD1aAmEh9k4QXYhs0gHdsuSyZ6b
bhJD13NW0rAcWeqyQDYplBQ+oEdtcypbS6AkFrLuaSGT1Iht9mRkQ9bsgbzI
MhxZyi1DWawqb6gp4h1X7aBsCjXBu0Q/bGy0AC19hgR71M8kxWzA0g0gBS5o
sx3sUfB7qrmUtkv3tKf5o4U+WxAEbiSYMGaA2Mb3ckNIvkfEdgKFIKb4AKKy
NwgyqOksZZFyn3kis3GZ0Lxj73q3R9d1tWQtyvZw8RXW7ZSZlNdeQ3PbI7Cn
WLgWSeuiua+Z4lGQnlNKidJDLVnKr1wNuangLOATbF5ur1CUzCz0Vj4NnSc3
zz0N4D7KGL6EAHLJIwEZQobdHGvLaHD4xjvO9l1Yenznn/9uzwd+5j4J3Hb3
0Q8+oKffP0ynBCM37n/gXj7xPn7dvXfROA7+7G+8SQ/zrUskX/yUcryFz/+f
/itLR6B3SdnpKruD8fF7/jaAfTyYd/oOP2z4+hfexg5SBzIG7pMff4MPOAxm
8uj5/1j6D5MwaO946ysHI9nCg1Oj/gxx77WS9nsOxHJsrSm5+v3ncP6P+jWc
mR/Pn31Oz/rtqKj4M/WWnr60n//7leHE/jD49E/oPosiaIftTw5fAu/HxnjZ
43vgfIYzHJUPNj96+3E/dj7cNRxoC/lPpg7G2PkPWix/SLQKXVO/c0yWziuj
yvDneoZvp/s+hUq/lWkCfEVGBl0qQnBa61Of/vTwh3RCQ0jlDA+5ILB2eH7C
gduqwSSXi+Mt9piAHxvt3vf+nxsecIh69LDcgNo9aY9CEP3Tyy13xeOt3NJm
W9nfU/rKH3wVSni65Un//r9CaglFE46zjbQc/wc007R/5z33/b///Jgj3/ny
u/7Kj75qZJdo/o51b/jXAf7Pf/aE6Sry6LDiu2+P/0Dwf/ErbxribtEn43t8
///Nb351GMNr/dO/f8j3n/j//uefeO39r3CGOLajhpuPZ2xG+4EQ+Kc6xkv2
3VsLsqNVyQUz1nS+fr21yljEnJqIhZZFa1eIQqaHKNl3BR8ow/aGWL3sMPHW
Wvofm+0kF0tvk7j5J32GKHkdd8nCil4abC8DTHbZF5pQCpMriU8lZxf0ZDy1
XlTNIWKwYSl9BTddaEetdMIjY4Vh7qnKG5ytwhJbPmpE5eiVyk26UXbHFm4H
cJnuBf99fqpHK6mt+1z4yN8o5l44NGo762f8eRYcBCb+tEvIjxIAlvq0FEd9
rr03VnvBHUPmkyCmWzZYf6USCW4wwsLknYPmT7E5I5b869YTB83bmCa9W7Vj
1q2EkL6QWAv++BK+I3DHqZOHbezjdo9Yx03KbhVm7gM+QgYPNKbiZKGLS0LY
chAZ5EpLmxohYXyYEiVoT6zeIRzIAhzKUXBH1nHC+vkGncyL45TaaUcDShiF
7BBgCXeMuuCb1CBWQggOzc/PU3RHKb8uob1W0SzLNIgs6XQYaA6KKNkugHzh
EyHnDBqJJUXf+3xkaI+0BTm1SEVpIo5hA7U1qLnYcfXpGTRyZOu/cpRlS0Jk
I40SDrsA7k2CWNU9y9xUlnRZdyXrenaT3AEETVivQaiMTuahdKow9vBuKW7u
KRcEt5U9HzQ3qWqAHrSEk1+SZc/khzFS5eVQWs8DPd32Uk2k5kJbHHxXBign
w8jKsN0zOOLIlqPmBY4tDLFjRu291iNMltde3YJiY4/Qg0XUKFKyWLHAeHoD
NaPE4UYCz8G3yivehnujq/mLSuHkh3bJbn3JM2zNKm5CttbmWb+3dONFbCGk
lDhQEo41aYuLIbMUyqZXrBlG2+wqvVuyy55HvWNl5kUW0a+qM64nVO45u4MO
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
Z4HYQtstclw5ZiuqQOmczvmQPvQr4tinT1mfI8dKTfN82cFymWdLuKnBoE1d
6ZRRumK/DTof8yjepatD5SzcUi+4twlKqFeKTDQFEAsrYZTuaCeBzpabwQsQ
UvDXxGFgB+Lt/DqKjjMqCrXObAFadFdoy5Q9E4WG48JahJ+LeipKzM4lWpvw
fjwKmISUMzdSKJe2Kh/78L7STGHajg2ut8a6OrrfbthuIHAkoUxLLwG75BQN
6IPLWuCC0PVyF5uU7nWJY22siNETnqRa9ea0CwaztCpLIw6pmHLW9+lTtq2L
pkpr16k9eENLBzpJKdkuRGHkdu1VxivYF6ibATGqZUpjCwe/+CI7RTQ7fl9d
/rTOu1/NBXQY8+XPvEXHvCbGXei9ve/+ez/79Jv4n/r9N6e/pfP1L7zteHTv
jvjLrPq1j/zw1N/8CUb6DHzL3/7IDwtcPRZiOw+3+y0H90sXDqb6mIMvfMvx
W/0Tjg/vs6kBZ95NcCwWlYXHPyLk9Ei+DK/TF+9x9Dr89/zzz3/lD75qR9zR
Wv/5i7/ysfLG973/ZxfpfM8N/uKzz/7xd74Tuu5FQNvwf/qZZw6DjxNqOhyu
HK7/+jPPLPvCr0V648f4YYkvnYw5//oi3ZhNEnjN38HH4/f2U4iDp4c3j77r
9iEEw/81EJA8fLRIfvGVw4DDsOE03v87BOVgJDFkJPYA2sE27xJLSgxwDV4n
lo56daDNAbpg82HdXz+tW85p88CYbPk3vvnNE+t2OYKDzYML519Pqw286OH9
j/7oq65z+I/zf3r19+7/7sff9H99Q55R/snvv+uvv+/+HOglrTtckb//U5l3
eP13v/nIcP7/yFtenWYrCHAG7XDLlSNfpLWK91DXXXn9+usuFOHz+HsN9V43
3J5FSZfbTcH4fcDqZYlJ2JpFrGJLE/TK3M+biHPTLhJcZxGmvUBSm6nbS0nP
A6bMEAtTny/j42bwnG0TV3YTgUtjmAlhqoKEcTe0mECvfmljsNQWRebp45xs
lYBfbrenSVKBNsmrM1emcvM6N6olsV0vr1+HA+dvKQ2bEIepl5wYLGI0I3O4
/pZeZ2eTd7JlS47E7dJZeWTD0quPRi7oeglOyfapdAhyKhP20ZKlpUACTUCY
MOwcDtXhiUBd3NhLqi5JqM8ne61I6dOITLV3mOC8bKWdkCkEYddfG++sLoNb
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
Llj9/cbq5YXJ2KrZ4GVbOrhVHtL+Qsar2RD/8y0Nm8oOeqNlsPD2DYVvvEi2
Tc8v4NBDAYo4FFvDSucVpX6a+nU8oSFsF5flLdLwRD6Ms3UcNTID0dnmJLVF
veONtKQdpUbQkMdpOe+ghclip9NSG7MtLkoDs52gUI6aj1ce1sVlurQFDrQS
r2LFek7eTU++xl02w+VkKIK+leWkSZhSHt04BJM6olPUAdqC8YZUBivCOX8F
sW3kdic/l+Eiugv2blvl1ITeGj5Lnt/eC/d4dd6mhfwq308RQPKO7dwK/l1y
SsafYxEOAOlMQIOesIImyIMnARNvUkNYqJByMgZFmdyx4CfOE0WTSQHDcJfu
QYJ6FHzIRPW1qnlYE7QmSqTK6HukgmvYSwrmocguS19YMbqtjMyJMMTa25uu
wGSBrRMRSScUtsT9F0efNgXDS3oGn9kOmtRrJRtXWByVLyh5i+1zNGy7iLpN
55mBSLn7avmASKLmI/FQgNMqFXrjT2K17veXhS+yiY6KnSlHOp+qeViLjqd4
6RTcNAMFiKkSa3EZDibM1ihBbRvapDKnwMCijns1nGxoq7ovBzsR8CBrgfn5
SLDAnAQn3e5zynO97PJSb1lE97WsSBRQ5pSimFbhsoez6gI6bTQeMINRcsNY
ARbFY7hKioVI4VPVFkkKgSK3IhN7lgrqjiYUWhbw6o4jtzfWVEctDUtzHfdD
bOU2OpNIHnJwK/brcgQ+PMKBeRzPT2dYAAlkuzee1VAEl5U9ErKAiW+yeCoJ
bqpB3XYZYu3osSTSov5MaimFrFKMgjD9Mu7RaOZI1K36Tq2C12UOtIOWyaav
eXXx/OsObnkx56mxvcPX3UNpepIpg++qIy8CCMmXbbpygxn4xhrebmLylzAs
L/w1icbN50kXryQYit3NbIjI3NEkNzH1qlS6KTJ3Heqrbrk7OrO9E1/ukMbf
z7Ve9Ficx18n2b604/Kyx+SF52Nl4TVwvluAn98OvCRf57HKxf3aXusk58aM
je6LUtmvHdn52V9fOLY3mvC6eXpXYZnK+jtf+mZpNU2zG6bnvJwzTfKS6CTv
1Iz59JtrCs7V6+Zt8h3MqTv0HyzmefUz9ry4pnZXrPICWXHDYdcM8Qvart6U
n9d36o42OHcCchx/V9qGs1lWVpC7tZmamKc+zab3N8b2piS/U5zPGnZ+ku6q
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
KOYZlnKeeeJM5bhkSlnrTVFToSmZvJHakbmXI5LsL2LhFa2wcD25ypQZ3mOD
gRVPPNAhoSZY0eQCkW2eT7NdL5qFxrQICN+7RqzJ1MIYDVnoiArmB7aE4E5F
UKZaS43OP4FzaG5jWOM8JaUnwLSfuVJPN7e5YaswlElKY84oyagMa8nrqVWm
AD9DJIRY4x5BqCCdIsCUcIVfAz8LVJW055ydCMSZcJf2nAlHmZXJl7CXaQTh
c/c282ppeRMkIupVVLAwM0e24MZaEqqEKCOcHQnGzNNy88raWTV5yR/GWVxY
T3RN11jxDJN9ckwlapA3F7n/b0KKzYuuoPH2Mkzu0TnDz+xFMjXZuU4Fi44F
MpHymypMsa9LJNTzjXU0uJw2fDrBB431OtTTE+bY8MoWfr6O4PAYBKj063hv
LZXZzjJw86ouxHSjHi9IQZiW5j97hKgb+XkafwZhmr/YWU8FdK6rK7FjdxoG
lJicsS1YHh1RiTujCWdQzbdnuMrX3KiV1z2TFGecyjvN0rAzbgaow10c7pEn
tpmqTarap7QfGeecAmoOoEJzAujOMGEeJ5n0K3ox3XVPkZBzJy9UsrRMLlIn
DeugTut4I1aXHZz3G41O5fhP7lNAzjUnXRNrk7w5Ybumc9E1iDQbJbc8UzUp
W8fJffU5DzDWzTBt4vA6Y6jd16jVjcM7FkEHmcgmJkn73QgINjjm6Rp26vhm
vE7FyCz39lI3iXzMOJ7zNLbVdczJqrUVtTU7Aq/HGTY2ibQW44R2ptSoO0SY
wWaPjgMlPiL74OnG9ukaRMs+XKRWivb1iYd+LH+CJZ2c6Cn3jP2yQ7M5JmmZ
rpFdMb54M6c8zQpDRIpJNxfcmIq8FnJkzjqcrcooibUWppHSyAvIi4QMgg/N
14Q1xWAL1c21Jea6dLBhzmBReoaI/oo5rxVz7iNZcEg5hQPxfbwFurGuAuGZ
EjcCtINbh2kpSTf09OE0IdmvzGdikI/uu9qmrHYaYMfBxG4QuNHfKAVzAtwY
ElwGqeamGFxHqJR4BCGnog/OT33yGzV/zdywWKholKUBj7r8Fsw2qqVHLWAF
l2Oesi4V888xlW4Af/CYMC39I3aBanQWNDfe901r8h3ljC+64MRdRv2r2O+l
War5nIXCAOelRYHXYbkGCYvnF17LAhQiTZICqQ2I5SZteLUFcpstmrg31D6G
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
yGdR2tX0o1Z/eP7YXL8u8X0ejpvY4q5FXb+p8sMqX2b7mwp+fP9L+rQ473Rp
m9jtn9tab4vyzV7io7FP1F267iTrm3c+ZmyzhXH78G82/pHd2ww/PPzLun8T
wMcnbJl4J7Mf0rj+OfLNT1LwAMunVW6S/FFbdnmY28vuyvennDzn/y7CbS2e
UXR3y3MSPmrdzUfzYeljuf33lghmxKffKMPdNu9eP1z8UOjn/Bz581zuh8Ae
LvteAZ6v2fKIYT/H34Mfmxu39z4s8WXVPr75XL5tuR/wvL3gjkdfQvQ/V/9j
WR+2c0f/u51+zPa6l49Uqp8+cLX3mc8/gWS794eEnLtzCV+cKnTnWu92+rju
h2u+SfvHn4eHf2T3NnvfrLj9/U3SPorb86KfkzM+Z7hHtbvl389cb3Tw48Mq
D9n+666/p/CXT/uT4GxL9pDk70X7y+x93GkL8jmSu+zd0eGv9Dw+Je05/39a
7mMdH/DznM9vPq0XpfPDfx4jlx68WH1BjeD/iDbrxLXeHFJj9pF5lko7nvH7
ptvKr+a/h7uhFR2nnvx7778rN93qyJDOsV5T8dy0JJZ7B6r5G+eR2zx+wx5e
8bjaDDUPf9kxFUZfenOIPQ9tdkztTo9yYCM2WFdGkg9WYdksZv+o6QGEBDzG
q3+DUxnAM/tXPGdr31jaEQ6/v6XMwTr+K4e97orq0e6NtQ7suq11eAuz6cPB
g4jRk5PFmtud5tIF6TH5PnOYwZuSG8X4TchvzANv1u+jrRI5n5tGOZxkoDdI
ukKr3kwEFjGP302NnqLGnYbzY1PK36T12tW9OfO+SRoVJ3r7csJJ5rNtlncd
C7UZW9uXatFMbOx99N8bUerKkLo3Yun15319qzu4cyoJb+SwEbzava2ODbQt
/iWkyWh7KhBq4QEiTA2JdtP3xdy2WgvtxoPZN8l6YozhZZ5nlM/VmT1jjrlK
OUzJg49K+kfDBZHxqNdeJa4SljxTPfqT3cFzI6nAyZcDXHCoV/HdqMjRclGe
RGlojnPyLmJtNhUP0TYVncee5qqvQZ4cuaH5iFSffh1upClDo0xjH6qTjyqY
uWRNadehOAjV9bax4wQglau8eCKqN0eggZXA0ttVVM8rNGeJoYCnMKQ5TMiY
2Gy5nbHAPmxh+lUo2JqciHOItrMSUvAbsZfIdrNDnV/Eicu6g8SMh4/+fhOZ
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
ul8dY5Fzn6h0PQ9E4f1tS12PGTPD74/+B7evbpk=
                "], {{0, 69}, {2048, 
                0}}, {0, 255}, ColorFunction -> RGBColor], 
               BoxForm`ImageTag[
               "Byte", ColorSpace -> "RGB", Interleaving -> True, 
                MetaInformation -> 
                Association[
                 "XMP" -> Association[
                   "BasicSchema" -> 
                    Association[
                    "CreatorTool" -> "Pixelmator 3.6", "ModifyDate" -> 
                    DateObject[{2017, 6, 20, 10, 7, 18.}, "Instant", 
                    "Gregorian", -4.]]], "Comments" -> 
                  Association[
                   "XML:com.adobe.xmp" -> 
                    "<x:xmpmeta xmlns:x=adobe:ns:meta/ x:xmptk=XMP Core \
5.4.0> <rdf:RDF \
xmlns:rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns#><rdf:Description \
rdf:about=xmlns:xmp=http://ns.adobe.com/xap/1.0/xmlns:tiff=http://ns.adobe.\
com/tiff/1.0/xmlns:exif=http://ns.adobe.com/exif/1.0/> \
<xmp:ModifyDate>2017-06-20T10:06:78</xmp:ModifyDate> \
<xmp:CreatorTool>Pixelmator 3.6</xmp:CreatorTool> \
<tiff:Orientation>1</tiff:Orientation> <tiff:Compression>5</tiff:Compression> \
<tiff:ResolutionUnit>2</tiff:ResolutionUnit> \
<tiff:YResolution>72</tiff:YResolution> \
<tiff:XResolution>72</tiff:XResolution> \
<exif:PixelXDimension>2048</exif:PixelXDimension> \
<exif:ColorSpace>1</exif:ColorSpace> \
<exif:PixelYDimension>69</exif:PixelYDimension></rdf:Description> \
</rdf:RDF></x:xmpmeta>"]]], Selectable -> False], DefaultBaseStyle -> 
              "ImageGraphics", ImageSizeRaw -> {2048, 69}, 
              PlotRange -> {{0, 2048}, {0, 69}}, ImageSize -> {2048, 69}]], 
            CellMargins -> None, CellFrame -> None, CellFrameMargins -> 
            None]], 
         Cell[
          StyleData[All, "Working"]], 
         Cell[
          StyleData[All, "Presentation"], MenuSortingValue -> None], 
         Cell[
          StyleData[All, "Condensed"], MenuSortingValue -> None], 
         Cell[
          StyleData[All, "SlideShow"], DockedCells -> {
            FEPrivate`FrontEndResource["FEExpressions", "SlideshowToolbar"], 
            Cell[
             BoxData[
              GraphicsBox[
               TagBox[
                RasterBox[CompressedData["
1:eJzsve+zbOlVHkYlX/Ix/0KqTnfvTs7p3nt3H82MpJkR0swIIc0wM0LSCBkq
EpABXPzQj9SM7CIEEUkkRjYCOWUgYFEWchWWnMKJFKoCJCAbykWY2DgpjV0O
VZZSVFIBOx+cib8l3b33Ws/zrLX2Pn3vjKR7NZfanOqz+93vu9aznvWs9b77
3NG/974fffo/+re+5Vu+5YP/zuHH0+997ls/8IH3fvjt/+7hl3f8yAd/8Nkf
+f7ve8uPfOj7n/3+D9z/vn/7cPPRw/9/y2Ho8fN6d30HXv/+KzRm+nrNN9zH
O/l6edjeu77G1/4bbcDtXnO8umud+jrhc6dd58TrXky/sfjfu+5dt3q9unl1
swLP4nM3Cfi969517/rmuV41W9qXWaFe3QXuVXV9E5XjV01237vOu76JuH3v
ehVf37hyfC+DvnmvO6Ncns3trxkV7wwc7hQz7l1323Vvs3bvukOus6h4T+he
Rdc3fQN5Gw5+02Nyh1z3cL533THXHVz1vukbyNtw8BuAyR3MkFu5bk11v+m5
d2vXNwkHXs3Xva7j3vWNvm6SkTtJdV/d+RIjdceicccadjsW3kn8v3fdu6av
O6MhvClf7lhxmDfsNs2+Y9XjZsO+hnQ6C8w7Frp716viujPk9Bty3bGpN2/Y
HWv23XjdA/MOvV5xXXoVC929695177p33bvuXS/voi3t/viznxm8b3zYcPX6
6+66oXmaPENPCx1+Ysw+jGzUkiZ/e/N1ozvF0s3xV7tzME+8iEaqUzSsv1ag
9uviV7kfPTrNYJPs4yO9PtUnw3r6YN82Yf5+4pGA/yyADU07EZTknXMgzcyg
nRdinzA8pYD3AWeGS8icvp2jCj1YsXd2wOT8gsk+ZEE0oB/WCvlYolr9WufX
PhJjYt2zrwJt4cxZsyElyYAa1YZH+k3OiDDb1FV+G9jbJw3EU3tJvRjHGTGh
ZJ+Jfj1bkVZTfpFV+zThaEnDnhq2jfiOaZlpN8tLFbWmfDZIdJ9+LfJrPuP2
BtStPNgn2/pMyCTys/XUPxBpmUs5LhPf9qHYKSH7qQnJQorvZKT6obTtQ4ql
p/asJ3Gq3ok3Af40Ys7YG+y8Ae0b4+Jzch3ZN2m5Sfnq1evA2GxSSPNJ5aHO
RFRUdJWqGJkxmYDxWQ3uVJqUqNKi082b+xJtmKYT3Swt2acZ9nGSG7yQTo+b
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
H77r35z+ucFbH7+/qBppnkFw5hk4MQ8Ly7Z6apsfL+cM3+Irtu2qGHkbay31
kYEJec67C5+7GpOlzj9jLT5fFWaU47kWLNO6payxqdmYyTyaNj4MnpktenQV
ZkYbM+V4xn8ZJ4kzZPv12uZpGcylA3UlA8rPM1SZmP8seJfRSPsVvm/nYJ8w
IKdYGb5Zw1BYZ6I/DjBWe7gzY6s2Na44t8SsI1M0mIErPRWZOaNg7ixHKmJ7
JTZPgjydmFMuL2h+urOdB2fq5kQSxWDdBOxMydgqCFtPN2dFTaebQjmlcssJ
ka/BuQpjtuVClV9Djkzk79lX7ugWMbIR6ikc5uNePhssKSO+nPLrKkFNv+bE
xLRFdxR0L5YwCtY219/wSOHajTE6oyLPf8saMp8yEY0AKfmShTdOqCKzFKBu
WksNKx2pfBwxnApoclN16So2acFC+ZDq8lRQOHFqmiVtieJphi1yPiag5P5s
KzsPI01SUrrQK7KhaITqLScp2HIC0hD9WlKuIjFyuHNMM9TJkZI2gDf1SHlF
NnjSwkV6EGuNsBRiTuYVpYE5kBWPlwiJmVNmOZDzquX0HwdMJcLEacDUnRAm
7hkYitlYVGpT+R6fvelauuNXYnk1g5SAMhnHYdUOIk2I0rNUQBb5qatYvJZK
uRCysMQMGsuEYRaWGTU4GTNXfXhap1PkZADkpqnmgnuVRs5ssiZa6NwIVZ1h
FoftAAWl81b5sMVnD+jxw1EewyEzxe74IZ/h22zHb/ndwfFo2iLy4MM7Pgk/
fH7vdz0Qep7f0n8dcHrcbD4xM/z9P5wi844uANX8iIEzGJbBvNry+b+9wtg6
uw6O8F/gjwOuYiv4B59/Yhhw+ODjh/8EkBkgq4fz/8N1QJLjMpjxG78U/2yY
cODoY/LhD+Mn2AK/wv3xbPbKV+cx9hTO/ykEJxxefPHFL7/44q98+tOHAd/3
Az8ok5PvXz79M4Ff/9zn7Px/O4bvFPfhHPjw8zDmZMyWk2hpsBzmH14Q4D9o
ozk1nP8b4VHR3JglJ8VpgJ//M520NGyHf5jgzDenAI6nWECJMVz6g36dFhr+
i0anA/bHaEIP7nZJrDCeHH8dQBvgSodOzvzjuvqKZ7Dk+O3g1zFqV2StmWfD
xkP+Q+xUWNjyR5UwUbKGuPibnQH8pZz/j4+jFhyDtTWebL1rJWkd/txou9n3
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
HCaBsp34AK/GUX4NulqSJNI4iHNmZjjxwLPju0W3xI4X2rAQ5g8wRniLWgAb
mFTFACRg+qCr4BS6WMuPHS50cg5iBhOHISUtJRzYcSwMQ+z9yU7oSdVLsCDT
riquuEiJQCCIOyQ1QJs+jDZLSYpoRFTr5KWNgJI8MvbC3v3J+Sf+rILn17+1
CJpGiXkxzfbK/nbh5WMjK5YFl1mBP3LQYhGYA8w3YeacC1VPOFGRWceqHAfU
ZV2GnWJVe5HiWKY5/tIDFUF2qV5VWYK0tStAjilQdoBVS+B55+FG7qSnSigu
YHwoaoISMWp8I1zoXpF04k7A84KeyrXygvSKdS86679uCrYstJMMOKgyoFZK
yIiZTHiSDnWWmswojFgXtKH8lWEXhJ5mGdQvMz+KfNpnBfynvirvs3gSDqqc
xBNJ4U3LyIB+8icZU0tDbdAbeJio/ZhSLRBV+ByK/tYL/QQ+041H3IZIhQqK
HVrZasI2zj8bOMS97sQm4eW/YNQB9tc4E8S4KH9uiA9jv1rWBYGiinhb1bIK
9quN2ra5uNwer8OH43W6eWkDLmHDr+lJ+/js1caPqX+GjrgPn30tP5o+/hfs
T5MPC/GB+enfBQxfDdO6zcfPerj9GCvAr1Xn/+Plxl8Og8dpP6vn/yqhG4f9
4hJg/pie/1/QyGFAeEmxsBncBn8JcgBheMoHH7y7MPP4gwN7+OCPH18WgBgb
/+8jHe4LRJejhSEFhmv4i+6XXnppOH9ejJEKxBih86foDNl93yxo5PA5HDW7
R37k/rM///N8njzQbAj0V77y1dM7Av5j+41BvTks4ef/PHiMrxlwmPn01+Y/
f7gjB9pEfjuo1yQlZ+Hg5Tizm4QxxJDDyAff9OiAaqGol3bZs8NsB/ufetcz
zvMkOBv/OfzLCAfW0+SCYse8ZS/kj+qHkZebYCSHmJ+9OL1MMaw83JsLCv0F
gT9Q6/SPFMY7bjmp2QbzX4rXh1+Hfyww/tOPkzotriTueIrwv4jQWaw33SiP
l5u/9cnjP7r5l3/0zMWleD18brr2//njY/r89595Ynh2uWmH/8LPb332CZeU
BSF/dd29dPqfEv6NX37bFKSH64N/8Q1+/j+iBwM2P/oD479KeOKJ+6Eqmr88
myfa4pKCzgRgdbrVeS4FxsCEnEeDLxV14wyLS6om9LmMxTlrhVhc0M0qFncT
Pt8EmAzzj3Ze4pHKl+NX0bbTHcZB0zxYDpeTCORnbYZLoHehT5Eab4YmB1Lj
pg4oXYr742z0c5Gsopl9DOLFscj2W1nfXOgjwETkdONWjT/tQ7AtxzpCSnpl
M2+47owETnQtk2UE83IbiRrMuOQoQO0vop3FryELwhIOMt3k7kuWU/Apyjw/
c6CwZ0MzoPYtLnmVGorcYhVoi27ELq74fImnpoIFyy9lkjQsZ2LKblpUB2y8
u6strDI3wBJXD6uojz6gNHhRBhE1q8w4M0PXXVBwnS3DI0HTyhzx8R6Fiyri
pe+Kw+aUREjSC6TemMXBZdIWbSnhC7KDyb9wsy8Lv5zhTBgoDKt9aghTpigN
vKwkTauIHTWhjsIlla06L2R7aGqwCaCFrp5207F/ZkqzqWqVLxStmkpkGsDb
VS491U+Lcq4mF2GtS7Y/QBQ2CBublgkgboakS/jAjEytOMMV14uN5J0lckCb
6MEIS4IEexah+2L3NSk4f8kqDmv0OkZWJqwDjdQOucDPkvuSfRq7ixQX2HO5
Kch5teVeqAxlhaToP2qE6P+m6u42NB4tmedd5sPFZdKWBOOC57kqeVJ84MTJ
jEXfldPHCXbpnsacSqGJRNJYb4ST6SiAwiFFAc0YkM+sgM0MJhNsQQMUFunw
w4SL5O8FzUxpgl2PnwzIsyV0UaM2XjX82DNrLyzJbSfVqZSMm2A5fyXJHoWC
CpnW34VMIqHRHPfOvMAkRHxBO5o0eQifQ5G65djA+15pEykKdzaMUtCBfH9B
/WfgXiRMpTPudRSQy6SQGkr1dKNTpcBNC8ICwRV6TCKfqwZs9p5ks4gWaqb4
0sdA8FbRytAlonBhu2Bvz043N1Y0EUr+k/U/+PwTvnfmv8z3g/rf+sxbPVPo
5PzJEfnLTfgP5jz4YO+k8j7BvN7wfy3ntLRZeLn5teIw3zL6Eg6Oten0M/yT
ASkilwg31xE9/39yRGwsN8fPbMbxf6cYgB+nff2D+I//jMhcbcI/i2B6DzPz
3/9/4sffgJcF7svV1v+jTD9jA+wVycab2DHclxuWst89/Z32cKb64JseFXW6
lOMXbw/sFHcju0LMvx22G+Ow8cR7Y1Nt/Pz/oTcd/ysxv/elLxn3RlOfOh0U
//KnP3341f7Y/rnASZwDX25/+W8e/7HA9/7ADzAghzEH146H8KfxOPe+dL3C
ywjagHDRRxNIgsMm2ZhL08nTzAOkR7+kWFCzjRdtx8/D+IOph5kfeuRRis7G
F7XAjY4f/7tJlwjlhWu+V3A9RRxGftDP/71qmxnjeKutCLHbSTcHYUczMz67
WZAx33v6dxk2/kiAA2KD5WFFZNklouBhPb1BQEoOk9hrhbgTxzyYyhL5+L//
Oxr8lrfc9xfe/bp3vv2BC17RJOJtT4z//Z//8uNj+rzuod1w52/+1beEKuMM
+d//wfF/n/cP/95TC48a6+ppiQ/+xfGE/61vvW+B2I32/42fPv7nyP6vP3zm
+J96u9x865uuf+TZh/+rn/m2v/XJt/ylD7zhye+431ud0Dzg7NePJrxGXGo6
j2pwC/N4mgdf4ONQXC4DLLYFvpRhTpiFhzvog8bixrXKWHjCVrEwrt4V+NzN
mKBDc8n1Ra8Kg7nEuNzxFmwRx7sv/KcL3Bd5/+xdhG4fQl/k9c6hu9zAQfRs
hKeZJ/2wbyuuxJ0FWcKyPLrAc7rXFI6FfOX4uPJbw0BveSgiI2fwdunS/d1Q
aAxP/jw+WAM1hl7pCtZdks32wc4N6EzS36GAory/oLp25Tb7bgJF0DfOcc+F
x9HiemskddxrzSUt7f32mCbETI4IVvSwuvHUVF9ZrnmDGhJq3CkA+XBAiv5h
FArvZ8BzGymvZshgPdaztkQ2dApjYNTC5UsSjaXJU1KEbsH3nVTUflzgWIl4
CInYyirecgClDQGyNSLxihwsP40fAKdcI+FFQ+XZig//P3fv/2zdXZ2H/Sc6
3+65+8s5574CgSSkV7ZBEAzii2SQhDxJ/IUYXLfTgBxEOnVN/QXcNJ6xIhq3
uGVwQkhHBWfGjUF2BzfG2JCOARtn0tAW/xCl9rRTNc04E7W/ueecvdd6nmet
tc+995WEJb+z5845++z9+az1rGc9a30++7z3XjhJzkjAhd4OQvxI88VYMfZX
Jgsq40Razv1d4PwFXU86Y+fXciXpAEs3XzkOkp1SVljWQLe3/paT/cZaoKAc
3DHOHD4pN1T+aPXhumRJahnkCQhd4lJLDUmwHIkZ5HeM1M5uYXqYp77c8PBB
nbbU2DtzEFkEEblgJ7WWkZJrBgGNndxIUMuWyBkWy4GWNhe1/aGLoCSChsR0
Q6qyywmlbajLvN1xYQu0ixCgkZbONCsxrG9QtiDUPh25luXRLwNhxmhyHeHn
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
50HG20TaSqI9ypFOHchp1p5ajIj7bSXaOWvaakytQTEcrXmaW4sKnPKjdHJR
XKDFaOjEysqlVy4kB0+g1E4Y2daGlc0eI3A+xU+9PV5TZdypueLIqa+LarBg
0M7JBm4wtNlesDEB4as0A1NxL+89159RV1vYJhheAstJd5J3TR459ELxrpS8
nheEc7DhvEy3zoRCu7UqlCIIJ/Io8D8VboHXhz3P508eV2VCGxyZ3oeJk1Yb
I4whraEYogi+1WXxK1qVC9Ol3deCp5uu0YswuGffYf/hVFIsYNhUDapmHMQ5
5X7WeZaOuBsj4TihaRMnb40zueKnOE4mSMmlslLUt5d8aC/xvbGqVPMqtzp8
Pvc201Cz4ye6mjBFviwqzOlJS0cqYB0uimBV07vUFE0zIVZMbjPGjTvdQKga
yys2IQJ+W4SjydMdfUw4YDv3PGzRxBpaL6uD7FCsF7YnEHe6TrC0MKxwfDFJ
4Mugq/vDKdgnSUtCN3l9XAfxW2rRF1m3J7qyRThZ51fW9nZRnA89m3ZN11LI
srgXbNTrmfzn4Yw2eOftzK0d3h4/mjEIVElndGZ2zlEOzcN+2E46Gbt+dt6O
s/DgulU44wcT41vanT63oJwTPqGVbdq5DqKOjJOSCzBjf3IGNg6AsAK08qKw
zX76p8ePMCbXHd7ZO2/TaBrHKOkt3JQIMo3bI+aAS+LS0PUY7UCJmc94nG7W
KHTNcFcrODQ+UTu+kNwnNTgn1wiK2TDROc1I2TeL7G2BJOMW9hk4PUE284sf
eXguDDTwSQtpJXaN1/jbFiBzUgRBEClgogKWIxo2oLJoBvf9I8uawDcydUzt
RhlCLicZCTojXnOVn51TpIiQGkQij6DqWZ8QbsKBu2bn7iBHP61MCVLkdeBS
EIHwUaMDDv6yIERSMQlbvWV0fNYQ2hSyAupzbDPOHKWofim/KKwzjkswPmZK
K6CBTgS1VMm2cr+L1jadfkTZ51kZoubuRL4ZmKKxnbjAs5ieYxbPGriZbON6
wZ/K5kPFDSYwm3c+bTNHGd6FcbSuXWv8lwUmGR/lm+cmSTpStS6ClZvG1VTj
Ij9nXG2Fn+0swM55Ld6xRIT60kXbzr2h4itbGT8gPPpC6hdxjvVCBMQ+mnmB
CBeULJIEh6mzMQosszqRn6dhiWOGKso6tZ0sYoJMRxOR9Lk4SKUgegS/hKtE
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
                 
                 "], {{0, 69}, {2048, 0}}, {0, 255}, ColorFunction -> 
                 RGBColor], 
                BoxForm`ImageTag[
                "Byte", ColorSpace -> "RGB", Interleaving -> True, 
                 MetaInformation -> 
                 Association[
                  "XMP" -> Association[
                    "BasicSchema" -> 
                    Association[
                    "CreatorTool" -> "Pixelmator 3.5", "ModifyDate" -> 
                    DateObject[{2016, 6, 27}, 
                    TimeObject[{9, 6, 41.}, TimeZone -> -4.], 
                    TimeZone -> -4.]]], "Comments" -> 
                   Association[
                    "XML:com.adobe.xmp" -> 
                    "<x:xmpmeta xmlns:x=adobe:ns:meta/ x:xmptk=XMP Core \
5.4.0> <rdf:RDF \
xmlns:rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns#><rdf:Description \
rdf:about=xmlns:tiff=http://ns.adobe.com/tiff/1.0/xmlns:exif=http://ns.adobe.\
com/exif/1.0/xmlns:dc=http://purl.org/dc/elements/1.1/xmlns:xmp=http://ns.\
adobe.com/xap/1.0/> <tiff:ResolutionUnit>2</tiff:ResolutionUnit> \
<tiff:Compression>5</tiff:Compression> \
<tiff:XResolution>72</tiff:XResolution> \
<tiff:Orientation>1</tiff:Orientation> \
<tiff:YResolution>72</tiff:YResolution> \
<exif:PixelXDimension>2048</exif:PixelXDimension> \
<exif:ColorSpace>1</exif:ColorSpace> \
<exif:PixelYDimension>69</exif:PixelYDimension> <dc:subject><rdf:Seq/> \
</dc:subject> <xmp:ModifyDate>2016:06:27 09:06:41</xmp:ModifyDate> \
<xmp:CreatorTool>Pixelmator 3.5</xmp:CreatorTool></rdf:Description> \
</rdf:RDF></x:xmpmeta>"]]], Selectable -> False], DefaultBaseStyle -> 
               "ImageGraphics", ImageSize -> Magnification[1], 
               ImageSizeRaw -> {2048, 69}, 
               PlotRange -> {{0, 2048}, {0, 69}}]], "", PageWidth -> 
             DirectedInfinity[1], CellMargins -> 0, CellFrameMargins -> 0, 
             CellChangeTimes -> {{3.544379162237352*^9, 3.544379175555642*^9},
                3.574009622854604*^9, 3.5740096771925993`*^9, {
               3.581868126615425*^9, 3.581868137389792*^9}, 
               3.6119448864400587`*^9, 3.644332879574626*^9, 
               3.67602184800485*^9, 3.6760221842131643`*^9, {
               3.676022245795371*^9, 3.6760222459531*^9}}, Magnification -> 
             1.]}, CellMargins -> 0, 
          CellBracketOptions -> {
           "Color" -> RGBColor[0.739193, 0.750317, 0.747173]}]}, Open]], 
      Cell[
       CellGroupData[{
         Cell[
         "Originals", "Subsection", 
          CellChangeTimes -> {{3.708097404445539*^9, 3.70809740544527*^9}}], 
         Cell[
          BoxData[""], "Input", CellChangeTimes -> {3.708097488207439*^9}], 
         Cell[
          BoxData[
           RowBox[{"SSNew", "@", "\[IndentingNewLine]", 
             RowBox[{"Join", "[", "\[IndentingNewLine]", 
               
               RowBox[{
                "$TitleCellStyles", ",", "\[IndentingNewLine]", 
                 "$SectionCellStyles"}], "\[IndentingNewLine]", "]"}]}]], 
          "Input", 
          CellChangeTimes -> {{3.707838299569858*^9, 3.707838372535754*^9}, {
           3.708097312549844*^9, 3.708097348441813*^9}, {3.708097380412032*^9,
            3.70809740058037*^9}}], 
         Cell[
          StyleData["Title"], CellGroupingRules -> {"SectionGrouping", 100}], 
         
         Cell[
          StyleData["Chapter"], 
          CellGroupingRules -> {"SectionGrouping", 110}], 
         Cell[
          StyleData["Subchapter"], 
          CellGroupingRules -> {"SectionGrouping", 120}], 
         Cell[
          StyleData["Section"], 
          CellGroupingRules -> {"SectionGrouping", 130}], 
         Cell[
          StyleData["Subsection"], 
          CellGroupingRules -> {"SectionGrouping", 140}], 
         Cell[
          StyleData["Subsubsection"], 
          CellGroupingRules -> {"SectionGrouping", 150}], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Subsubsubsection"], 
             CellGroupingRules -> {"SectionGrouping", 160}], 
            Cell[
             BoxData[
              RowBox[{
                RowBox[{"MapThread", "[", "\[IndentingNewLine]", 
                  RowBox[{
                    RowBox[{
                    RowBox[{"SSEdit", "[", 
                    RowBox[{"#", ",", "\[IndentingNewLine]", 
                    
                    RowBox[{
                    "CellGroupingRules", "\[Rule]", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"\"SectionGrouping\"", ",", 
                    RowBox[{
                    RowBox[{"#2", "[", 
                    RowBox[{"[", 
                    RowBox[{"-", "1"}], "]"}], "]"}], "+", "100"}]}], 
                    "}"}]}]}], "\[IndentingNewLine]", "]"}], "&"}], ",", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Join", "[", "\[IndentingNewLine]", 
                    
                    RowBox[{
                    "$TitleCellStyles", ",", "\[IndentingNewLine]", 
                    "$SectionCellStyles", ",", "\[IndentingNewLine]", 
                    "$IOCellStyles"}], "\[IndentingNewLine]", "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"SSValue", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Join", "[", "\[IndentingNewLine]", 
                    
                    RowBox[{"$TitleCellStyles", ",", "\[IndentingNewLine]", 
                    "$SectionCellStyles"}], "\[IndentingNewLine]", "]"}], ",",
                     "\[IndentingNewLine]", "CellGroupingRules"}], 
                    "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
                    "}"}]}], "\[IndentingNewLine]", "]"}], ";"}]], "Input", 
             CellChangeTimes -> {{3.70810814313243*^9, 
              3.708108249736373*^9}, {3.70810828012764*^9, 
              3.708108423385869*^9}, {3.708108542092863*^9, 
              3.70810854535496*^9}}], 
            Cell[
             BoxData[
              RowBox[{"SSEdit", "[", 
                RowBox[{"\"Text\"", ",", "True", ",", 
                  RowBox[{"Deletable", "\[Rule]", "True"}]}], "]"}]], "Input",
              CellChangeTimes -> {{3.708118532624261*^9, 
              3.7081185421789217`*^9}}]}, Open]], 
         Cell[
          StyleData["Text"], Deletable -> True]}, Open]], 
      Cell[
       CellGroupData[{
         Cell[
         "Template", "Subsection", 
          CellChangeTimes -> {{3.708097404445539*^9, 3.708097410907843*^9}}], 
         
         Cell[
          BoxData[
           RowBox[{
             RowBox[{"MapThread", "[", "\[IndentingNewLine]", 
               RowBox[{
                 RowBox[{
                   RowBox[{"SSEdit", "[", 
                    RowBox[{
                    RowBox[{"\"Template\"", "<>", "#"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"CellGroupingRules", "\[Rule]", "#2"}]}], 
                    "\[IndentingNewLine]", "]"}], "&"}], ",", 
                 RowBox[{"{", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"Join", "[", "\[IndentingNewLine]", 
                    
                    RowBox[{
                    "$TitleCellStyles", ",", "\[IndentingNewLine]", 
                    "$SectionCellStyles"}], "\[IndentingNewLine]", "]"}], ",",
                     "\[IndentingNewLine]", 
                    RowBox[{"SSValue", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Join", "[", "\[IndentingNewLine]", 
                    
                    RowBox[{"$TitleCellStyles", ",", "\[IndentingNewLine]", 
                    "$SectionCellStyles"}], "\[IndentingNewLine]", "]"}], ",",
                     "\[IndentingNewLine]", "CellGroupingRules"}], 
                    "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
                   "}"}]}], "\[IndentingNewLine]", "]"}], ";"}]], "Input", 
          CellChangeTimes -> {{3.7081084326190777`*^9, 
           3.708108448711751*^9}}], 
         Cell[
          StyleData["TemplateTitle", StyleDefinitions -> StyleData["Title"]], 
          Deletable -> False, CellGroupingRules -> {"TitleGrouping", 0}], 
         Cell[
          StyleData[
          "TemplateChapter", StyleDefinitions -> StyleData["Chapter"]], 
          Deletable -> False, CellGroupingRules -> {"SectionGrouping", 10}], 
         Cell[
          StyleData[
          "TemplateSubchapter", StyleDefinitions -> StyleData["Subchapter"]], 
          Deletable -> False, CellGroupingRules -> {"SectionGrouping", 20}], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "TemplateSection", StyleDefinitions -> StyleData["Section"]], 
             Deletable -> False, CellFrame -> {{0, 0}, {1, 1}}, 
             WholeCellGroupOpener -> True, CellMargins -> {{25, 0}, {10, 15}},
              CellGroupingRules -> {"SectionGrouping", 30}, FontColor -> 
             GrayLevel[0], Background -> GrayLevel[0.98]], 
            Cell[
             BoxData[
              RowBox[{"SSEdit", "[", 
                RowBox[{"\"TemplateSection\"", ",", "\[IndentingNewLine]", 
                  RowBox[{"CellMargins", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"25", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"10", ",", "15"}], "}"}]}], "}"}]}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"CellFrame", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}]}], "}"}]}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"FontColor", "\[Rule]", "Black"}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"Background", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", ".98", "]"}]}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"System`WholeCellGroupOpener", "\[Rule]", "True"}], 
                  ",", "\[IndentingNewLine]", 
                  RowBox[{"ShowGroupOpener", "\[Rule]", "Inherited"}]}], 
                "\[IndentingNewLine]", "]"}]], "Input", 
             CellChangeTimes -> {{3.708110741385954*^9, 
              3.708110851610701*^9}, {3.7081130402316437`*^9, 
              3.708113043300379*^9}}]}, Open]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "TemplateSubsection", StyleDefinitions -> 
              StyleData["Subsection"]], Deletable -> False, 
             CellFrame -> {{0, 0}, {1, 2}}, ShowGroupOpener -> True, 
             CellMargins -> {{35, 0}, {10, 15}}, 
             CellGroupingRules -> {"SectionGrouping", 40}, 
             CellFrameColor -> {{None, None}, {
                GrayLevel[0.8], 
                GrayLevel[0.5]}}, CellFrameStyle -> {{None, None}, {
                GrayLevel[0.8], 
                GrayLevel[0.5]}}, FontColor -> GrayLevel[0]], 
            Cell[
             BoxData[
              RowBox[{"SSEdit", "[", 
                
                RowBox[{
                 "\"TemplateSubsection\"", ",", "\[IndentingNewLine]", 
                  RowBox[{"CellMargins", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"35", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"10", ",", "15"}], "}"}]}], "}"}]}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"CellFrame", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}]}], "}"}]}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"System`CellFrameStyle", "\[Rule]", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"None", ",", "None"}], "}"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"GrayLevel", "[", ".8", "]"}], ",", 
                    RowBox[{"GrayLevel", "[", ".5", "]"}]}], "}"}]}], 
                    "\[IndentingNewLine]", "}"}]}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"FontColor", "\[Rule]", "Black"}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"ShowGroupOpener", "\[Rule]", "True"}]}], 
                "\[IndentingNewLine]", "]"}]], "Input", 
             CellChangeTimes -> {{3.708110741385954*^9, 
              3.708110851610701*^9}, {3.7081111553628283`*^9, 
              3.7081112437760963`*^9}}]}, Open]], 
         Cell[
          StyleData[
          "TemplateSubsubsection", StyleDefinitions -> 
           StyleData["Subsubsection"]], Deletable -> False, 
          CellGroupingRules -> {"SectionGrouping", 50}], 
         Cell[
          StyleData[
          "TemplateSubsubsubsection", StyleDefinitions -> 
           StyleData["Subsubsubsection"]], Deletable -> False, 
          CellGroupingRules -> {"SectionGrouping", 60}], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "TemplateFigure", StyleDefinitions -> StyleData["Text"]], 
             Deletable -> False, CellFrame -> {{1, 0}, {0, 0}}, 
             CellFrameColor -> GrayLevel[0.8], DefaultNewInlineCellStyle -> 
             "Text", CellElementSpacings -> {"CellMaxWidth" -> 200}], 
            Cell[
             BoxData[
              RowBox[{"SSEdit", "[", 
                RowBox[{"\"TemplateFigure\"", ",", "\[IndentingNewLine]", 
                  RowBox[{"CellFrame", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}]}], "}"}]}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"CellFrameColor", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", ".8", "]"}]}], ",", 
                  "\[IndentingNewLine]", 
                  
                  RowBox[{
                   "DefaultNewInlineCellStyle", "\[Rule]", "\"Text\""}]}], 
                "\[IndentingNewLine]", "]"}]], "Input", 
             CellChangeTimes -> {{3.708118089312223*^9, 
              3.708118117904132*^9}, {3.7081181598805313`*^9, 
              3.708118208024638*^9}, {3.7081184114307003`*^9, 
              3.708118419860927*^9}, {3.708172037300425*^9, 
              3.708172049232625*^9}, {3.7081721467881002`*^9, 
              3.708172204916522*^9}, {3.708172280619154*^9, 
              3.7081723009167128`*^9}, {3.7081746452376738`*^9, 
              3.7081747274033117`*^9}}]}, Open]], 
         Cell[
          StyleData["TemplateTagItem", StyleDefinitions -> StyleData["Item"]],
           Deletable -> False, CellDingbat -> None, ReturnCreatedCellStyle -> 
          "TemplateItem"], 
         Cell[
          BoxData[
           RowBox[{"SSEdit", "[", 
             RowBox[{"\"TemplateTagItem\"", ",", "\[IndentingNewLine]", 
               RowBox[{"CellDingbat", "\[Rule]", "None"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"Deletable", "\[Rule]", "False"}], ",", 
               "\[IndentingNewLine]", 
               
               RowBox[{
                "System`ReturnCreatedCellStyle", "\[Rule]", 
                 "\"TemplateItem\""}]}], "\[IndentingNewLine]", "]"}]], 
          "Input", 
          CellChangeTimes -> {{3.7081008112154207`*^9, 
           3.708100886309214*^9}, {3.7081009411687393`*^9, 
           3.708100967800761*^9}, {3.708101009040277*^9, 
           3.708101010990672*^9}, {3.708101059515785*^9, 
           3.7081011285096493`*^9}, {3.7081012089244957`*^9, 
           3.708101257264598*^9}, {3.708101308346807*^9, 
           3.7081014188166647`*^9}, {3.708115497491859*^9, 
           3.708115521794114*^9}}], 
         Cell[
          BoxData[
           RowBox[{"SSNew", "[", 
             RowBox[{"\"TemplateText\"", ",", "\"Text\""}], "]"}]], "Input", 
          CellChangeTimes -> {{3.7081088280276947`*^9, 3.70810883639429*^9}}], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "TemplateText", StyleDefinitions -> StyleData["Text"]]], 
            Cell[
             BoxData[
              RowBox[{"SSEdit", "[", 
                RowBox[{"\"TemplateText\"", ",", 
                  RowBox[{"PageWidth", "\[Rule]", "Inherited"}]}], "]"}]], 
             "Input", 
             CellChangeTimes -> {{3.708121429599868*^9, 
              3.7081214382245083`*^9}, {3.708121551804061*^9, 
              3.70812161012812*^9}, {3.70817476810653*^9, 
              3.7081747693509274`*^9}}]}, Open]], 
         Cell[
          StyleData[
          "TemplateSectionDivider", StyleDefinitions -> StyleData["Text"]], 
          Deletable -> True, CellFrame -> {{0, 0}, {3, 0}}, ShowCellBracket -> 
          False, CellMargins -> {{0, 0}, {5, 15}}, 
          CellBracketOptions -> {"Color" -> None, "OverlapContent" -> True}, 
          CellElementSpacings -> {"ClosedCellHeight" -> 1}, Deployed -> False,
           CellGroupingRules -> {"GroupTogetherGrouping", 0}, CellFrameColor -> 
          GrayLevel[0.5], FontSize -> 16, FontSlant -> Italic, Background -> 
          Hue[0.14, 0.2, 1]], 
         Cell[
          BoxData[
           RowBox[{"SSEdit", "[", 
             RowBox[{"\"TemplateSectionDivider\"", ",", "\[IndentingNewLine]", 
               RowBox[{"CellBracketOptions", "\[Rule]", 
                 RowBox[{"{", "\[IndentingNewLine]", 
                   RowBox[{"\"OverlapContent\"", "\[Rule]", "True"}], 
                   "\[IndentingNewLine]", "}"}]}], ",", "\[IndentingNewLine]", 
               RowBox[{"FontSize", "\[Rule]", "16"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"FontSlant", "\[Rule]", "Italic"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"ShowCellBracket", "\[Rule]", "False"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"CellGroupingRules", "\[Rule]", 
                 RowBox[{"{", 
                   RowBox[{"\"GroupTogetherGrouping\"", ",", "0"}], "}"}]}], 
               ",", "\[IndentingNewLine]", 
               RowBox[{"CellFrame", "\[Rule]", 
                 RowBox[{"{", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "0"}], "}"}]}], "}"}]}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"CellFrameColor", "\[Rule]", "Gray"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"Background", "\[Rule]", 
                 RowBox[{"Hue", "[", 
                   RowBox[{".14", ",", ".2", ",", "1"}], "]"}]}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"CellMargins", "\[Rule]", 
                 RowBox[{"{", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"5", ",", "15"}], "}"}]}], "}"}]}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"CellElementSpacings", "\[Rule]", 
                 RowBox[{"{", "\[IndentingNewLine]", 
                   RowBox[{"\"CellMinHeight\"", "\[Rule]", "Inherited"}], 
                   "\[IndentingNewLine]", "}"}]}], ",", "\[IndentingNewLine]", 
               RowBox[{"CellSize", "\[Rule]", "Inherited"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"CellOpen", "\[Rule]", "Inherited"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"CellSize", "\[Rule]", "Inherited"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"Deletable", "\[Rule]", "True"}], 
               RowBox[{"(*", "False", "*)"}], ",", "\[IndentingNewLine]", 
               RowBox[{"Deployed", "\[Rule]", "False"}]}], 
             RowBox[{"(*", "True", "*)"}], "\[IndentingNewLine]", "]"}]], 
          "Input", 
          CellChangeTimes -> {{3.7081008112154207`*^9, 
            3.708100886309214*^9}, {3.7081009411687393`*^9, 
            3.708100967800761*^9}, {3.708101009040277*^9, 
            3.708101010990672*^9}, {3.708101059515785*^9, 
            3.7081011285096493`*^9}, {3.7081012089244957`*^9, 
            3.708101257264598*^9}, {3.708101308346807*^9, 
            3.7081014188166647`*^9}, 3.708101606961513*^9, {
            3.708101641696826*^9, 3.7081017561393433`*^9}, {
            3.708101808460186*^9, 3.7081018677917128`*^9}, {
            3.708103794209401*^9, 3.7081038134341784`*^9}, {
            3.708104158118223*^9, 3.708104187289254*^9}, {
            3.7081043830438013`*^9, 3.70810439460859*^9}, {
            3.7081069110410643`*^9, 3.708106912168968*^9}, {
            3.7081108897132587`*^9, 3.708110923341772*^9}, {
            3.708110955855033*^9, 3.70811099778972*^9}, {
            3.7081111161059847`*^9, 3.708111129764081*^9}, {
            3.708113016680519*^9, 3.708113016973053*^9}, {
            3.7081719902931423`*^9, 3.70817199927437*^9}}], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["TemplateInlineHeader"], Editable -> False, Deletable -> 
             False, Deployed -> True, DefaultFormatType -> TextForm, 
             SingleLetterItalics -> False, FontWeight -> Bold, FontColor -> 
             RGBColor[
              0.7143816281376364, 0.21776150148775464`, 0.03341725795376516]], 
            Cell[
             BoxData[
              RowBox[{"SSEdit", "[", 
                
                RowBox[{
                 "\"TemplateInlineHeader\"", ",", "True", ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"SingleLetterItalics", "\[Rule]", "False"}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"Editable", "\[Rule]", "False"}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"Deletable", "\[Rule]", "False"}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"FontWeight", "\[Rule]", "Bold"}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"Deployed", "\[Rule]", "True"}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"DefaultFormatType", "\[Rule]", "TextForm"}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"FontColor", "->", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[
                    0.7143816281376364, 0.21776150148775464`, 
                    0.03341725795376516], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.4762544187584243, 0.14517433432516977`, 
                    0.022278171969176776`], FrameTicks -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], PlotRangePadding -> None], 
                    "RGBColor[0.7143816281376364, 0.21776150148775464, \
0.03341725795376516]"], Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[
                    0.7143816281376364, 0.21776150148775464`, 
                    0.03341725795376516]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], DefaultBaseStyle -> {}, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[
                    0.7143816281376364, 0.21776150148775464`, 
                    0.03341725795376516], Editable -> False, Selectable -> 
                    False]}]}], "\[IndentingNewLine]", "]"}]], "Input", 
             CellChangeTimes -> {{3.70809780710437*^9, 
               3.708097877215589*^9}, {3.708098455287459*^9, 
               3.708098461273109*^9}, {3.7080985599027643`*^9, 
               3.708098562649983*^9}, {3.708118722827732*^9, 
               3.708118725851734*^9}, {3.708120025831884*^9, 
               3.708120046503688*^9}, 3.708120092834372*^9}], 
            Cell[
             CellGroupData[{
               Cell[
                BoxData[
                 RowBox[{"SSValue", "[", 
                   RowBox[{"\"Subsubsection\"", ",", "FontColor"}], "]"}]], 
                "Input", 
                CellChangeTimes -> {{3.708120073384966*^9, 
                 3.7081200876291237`*^9}}], 
               Cell[
                BoxData[
                 RowBox[{"{", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[
                    0.7143816281376364, 0.21776150148775464`, 
                    0.03341725795376516], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.4762544187584243, 0.14517433432516977`, 
                    0.022278171969176776`], FrameTicks -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], PlotRangePadding -> None], 
                    "RGBColor[0.7143816281376364, 0.21776150148775464, \
0.03341725795376516]"], Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[
                    0.7143816281376364, 0.21776150148775464`, 
                    0.03341725795376516]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], DefaultBaseStyle -> {}, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[
                    0.7143816281376364, 0.21776150148775464`, 
                    0.03341725795376516], Editable -> False, Selectable -> 
                    False], "}"}]], "Output", 
                CellChangeTimes -> {3.70812008805412*^9}]}, Open]], 
            Cell[
             BoxData[
              RowBox[{"SSEdit", "[", 
                RowBox[{"\"Template*\"", ",", "\[IndentingNewLine]", 
                  RowBox[{"Deletable", "\[Rule]", "False"}]}], 
                "\[IndentingNewLine]", "]"}]], "Input", 
             CellChangeTimes -> {{3.708097772466872*^9, 
              3.708097785576872*^9}}]}, Open]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["TemplateSubsectionDelimiter"], 
             CellFrame -> {{0, 0}, {1, 0}}, CellMargins -> {{66, 0}, {1, 1}}, 
             CellBracketOptions -> {"Color" -> None}, 
             CellElementSpacings -> {"ClosedCellHeight" -> 1}, Deployed -> 
             True, CellOpen -> False, CellFrameMargins -> 0, CellFrameColor -> 
             GrayLevel[0.85], CellSize -> {1, 1}], 
            Cell[
             BoxData[
              RowBox[{"SSEdit", "[", 
                
                RowBox[{
                 "\"TemplateSubsectionDelimiter\"", ",", "True", ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"CellBracketOptions", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"Color\"", "\[Rule]", "None"}], "}"}]}], ",", 
                  RowBox[{"CellFrame", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "0"}], "}"}]}], "}"}]}], ",", 
                  RowBox[{"CellMargins", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"66", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}]}], "}"}]}], ",", 
                  RowBox[{"CellFrameMargins", "\[Rule]", "0"}], ",", 
                  RowBox[{"CellOpen", "\[Rule]", "False"}], ",", 
                  RowBox[{"CellFrameColor", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", ".85", "]"}]}], ",", 
                  RowBox[{"CellSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}]}], ",", 
                  RowBox[{"Deployed", "\[Rule]", "True"}], ",", 
                  RowBox[{"CellElementSpacings", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"ClosedCellHeight\"", "\[Rule]", "1"}], 
                    "}"}]}]}], "\[IndentingNewLine]", "]"}]], "Input", 
             CellChangeTimes -> {{3.708103741047009*^9, 3.708103748448641*^9},
                3.7081037835804777`*^9}]}, Open]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["LastModified", StyleDefinitions -> StyleData["Text"]],
              FontSlant -> Italic], 
            Cell[
             BoxData[
              RowBox[{"SSEdit", "[", 
                RowBox[{"\"LastModified\"", ",", 
                  RowBox[{"FontSlant", "\[Rule]", "Italic"}]}], "]"}]], 
             "Input", 
             CellChangeTimes -> {{3.708107424142766*^9, 
              3.7081074555101757`*^9}}], 
            Cell[
             BoxData[
              RowBox[{"SSNew", "[", 
                RowBox[{"\"TemplateComment\"", ",", "\"Text\""}], "]"}]], 
             "Input", 
             CellChangeTimes -> {{3.708113594869081*^9, 
              3.708113601524016*^9}}]}, Open]], 
         Cell[
          StyleData[
          "TemplateComment", StyleDefinitions -> StyleData["Text"]]]}, 
        Open]]}, Open]]}, Visible -> False, FrontEndVersion -> 
  "11.1 for Microsoft Windows (64-bit) (April 27, 2017)", StyleDefinitions -> 
  "PrivateStylesheetFormatting.nb"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "Author"->{
  Cell[733, 26, 171, 2, 
  36, "TemplateTagItem", "ExpressionUUID" -> "0f6ba866-
   c3d0-4311-9b18-4f6e1b8657c7",
   CellTags->"Author"]},
 "Mentor"->{
  Cell[907, 30, 173, 2, 
  36, "TemplateTagItem", "ExpressionUUID" -> "0e67a180-
   ad7d-4310-9cf8-641a37487105",
   CellTags->"Mentor"]},
 "Affiliation"->{
  Cell[1083, 34, 219, 3, 
  36, "TemplateTagItem", "ExpressionUUID" -> "f040e7eb-bcb1-4d97-8beb-
   ea56f0aff682",
   CellTags->"Affiliation"]},
 "DataSources"->{
  Cell[1230137, 23691, 257, 4, 
  76, "TemplateSubsection", "ExpressionUUID" -> "595aec4a-a293-426a-
   b50c-4acce4123cb2",
   CellTags->"DataSources"]},
 "FutureDirections"->{
  Cell[1230419, 23699, 276, 4, 
  76, "TemplateSubsection", "ExpressionUUID" -> "e5647c6a-
   cb6b-4235-8887-8cfbb24ef769",
   CellTags->"FutureDirections"]},
 "References"->{
  Cell[1230912, 23710, 313, 5, 
  92, "TemplateSubsection", "ExpressionUUID" -> "f66f7ca2-dcb9-4c06-9d0a-
   f2cc48d9fd79",
   CellTags->"References"]},
 "Keywords"->{
  Cell[1231250, 23719, 182, 2, 
  76, "TemplateSubsection", "ExpressionUUID" -> "0a9d4fd1-d336-4f32-
   b85d-12e6f9eed8ed",
   CellTags->"Keywords"]},
 "LastModifiedDate"->{
  Cell[1232479, 23753, 232, 7, 
  37, "LastModified", "ExpressionUUID" -> "62b79026-5d63-46ab-
   b5a6-6556f49fc1ac",
   CellTags->"LastModifiedDate"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"Author", 1544863, 29070},
 {"Mentor", 1545015, 29075},
 {"Affiliation", 1545172, 29080},
 {"DataSources", 1545335, 29085},
 {"FutureDirections", 1545512, 29090},
 {"References", 1545688, 29095},
 {"Keywords", 1545856, 29100},
 {"LastModifiedDate", 1546030, 29105}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 128, 0, 131, "TemplateTitle", "ExpressionUUID" -> \
"34758043-d8d9-44dd-a789-675fe4223213"],
Cell[CellGroupData[{
Cell[733, 26, 171, 2, 36, "TemplateTagItem", "ExpressionUUID" -> \
"0f6ba866-c3d0-4311-9b18-4f6e1b8657c7",
 CellTags->"Author"],
Cell[907, 30, 173, 2, 36, "TemplateTagItem", "ExpressionUUID" -> \
"0e67a180-ad7d-4310-9cf8-641a37487105",
 CellTags->"Mentor"],
Cell[1083, 34, 219, 3, 36, "TemplateTagItem", "ExpressionUUID" -> \
"f040e7eb-bcb1-4d97-8beb-ea56f0aff682",
 CellTags->"Affiliation"]
}, Open  ]],
Cell[1317, 40, 94, 0, 4, "TemplateSubsectionDelimiter", "ExpressionUUID" -> \
"db3c9b28-7203-4de6-8fdc-71adf79829c2"],
Cell[CellGroupData[{
Cell[1436, 44, 231, 4, 96, "TemplateSection", "ExpressionUUID" -> \
"ba8fb57a-50ef-4f25-afde-a880a5da3c9b"],
Cell[1670, 50, 324163, 5323, 2208, "TemplateFigure", "ExpressionUUID" -> \
"5746344c-18f1-4d58-883f-2ef36e206de1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[325870, 5378, 308, 5, 96, "TemplateSection", "ExpressionUUID" -> \
"7f28a721-268a-464e-9bc5-31f61fa28c7d"],
Cell[326181, 5385, 365, 6, 39, "TemplateText", "ExpressionUUID" -> \
"854ae70b-14eb-423f-a4a3-db7cbd22f54a"],
Cell[326549, 5393, 345, 5, 39, "TemplateText", "ExpressionUUID" -> \
"31932f51-a8da-4910-b7dd-e57591b56e9a"],
Cell[326897, 5400, 371, 6, 39, "TemplateText", "ExpressionUUID" -> \
"fc37c58e-b01c-44f1-8892-c017509d95ad"]
}, Open  ]]
}, Open  ]],
Cell[327295, 5410, 6920, 145, 82, "TemplateSectionDivider", "ExpressionUUID" \
-> "121daac6-ac48-4910-9f55-fd2749685279"],
Cell[CellGroupData[{
Cell[334240, 5559, 507, 16, 96, "TemplateSection", "ExpressionUUID" -> \
"2d847a34-66d2-4516-b974-ff32b660a5bf"],
Cell[CellGroupData[{
Cell[334772, 5579, 83, 0, 90, "Section", "ExpressionUUID" -> \
"0746cc05-9ff2-4dea-862b-2a8fdc8e7d89"],
Cell[CellGroupData[{
Cell[334880, 5583, 159, 2, 61, "Subsection", "ExpressionUUID" -> \
"b13a2754-0394-46cd-9a57-2542358fa23c"],
Cell[CellGroupData[{
Cell[335064, 5589, 88, 0, 50, "Subsubsection", "ExpressionUUID" -> \
"86cd7989-027d-4424-9212-bc480566ae95"],
Cell[335155, 5591, 635710, 13094, 419, "Output", "ExpressionUUID" -> \
"5b59eb33-0883-4e93-ab36-a9ad7fe1652e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[970902, 18690, 88, 0, 50, "Subsubsection", "ExpressionUUID" -> \
"d6d871da-b5a9-4207-b1f2-e41e2582a4a4"],
Cell[970993, 18692, 246141, 4685, 301, "Output", "ExpressionUUID" -> \
"2e354d54-961e-4859-847d-afee15f4a6a5"]
}, Open  ]]
}, Open  ]],
Cell[1217161, 23381, 129, 0, 61, "Subsection", "ExpressionUUID" -> \
"06ef5ee1-089e-4ba3-90d3-95dce480bf1d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1217327, 23386, 91, 0, 90, "Section", "ExpressionUUID" -> \
"119f867b-a901-445c-a549-99425573d77e"],
Cell[CellGroupData[{
Cell[1217443, 23390, 131, 0, 61, "Subsection", "ExpressionUUID" -> \
"29774d39-d4c6-4e28-8849-82f2b542775c"],
Cell[1217577, 23392, 90, 0, 50, "Subsubsection", "ExpressionUUID" -> \
"2db74edc-6c60-45a7-9883-207db8feefad"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1217704, 23397, 132, 0, 61, "Subsection", "ExpressionUUID" -> \
"61ba3615-1e3b-4aa0-92b7-73aa12a10f23"],
Cell[1217839, 23399, 94, 0, 50, "Subsubsection", "ExpressionUUID" -> \
"3db60604-6f2c-4e07-9144-6ff8f8e790ce"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1217982, 23405, 103, 0, 90, "Section", "ExpressionUUID" -> \
"d20695d4-e59d-4ef0-8dd4-f64aceec99b8"],
Cell[1218088, 23407, 154, 2, 50, "Subsubsection", "ExpressionUUID" -> \
"93500fa5-1389-48d0-b09f-49a25813aa14"],
Cell[1218245, 23411, 142, 1, 41, "Subsubsection", "ExpressionUUID" -> \
"0f5a8d01-0864-4ed2-8592-38078cd8a817"],
Cell[1218390, 23414, 151, 2, 41, "Subsubsection", "ExpressionUUID" -> \
"aa42868e-fef5-441f-aab3-0fd4c2f977e7"]
}, Open  ]]
}, Open  ]],
Cell[1218568, 23420, 7856, 162, 82, "TemplateSectionDivider", \
"ExpressionUUID" -> "003f9a05-6bef-4291-b1a6-f10f8847b0c0"],
Cell[1226427, 23584, 104, 0, 131, "Title", "ExpressionUUID" -> \
"1856d140-07b9-4b74-bc27-c0ad4f53e05d"],
Cell[CellGroupData[{
Cell[1226556, 23588, 186, 3, 80, "TemplateSection", "ExpressionUUID" -> \
"ba97f0a3-c165-451d-bf4c-74c0b4a4f36e"],
Cell[CellGroupData[{
Cell[1226767, 23595, 270, 4, 92, "TemplateSubsection", "ExpressionUUID" -> \
"a4e3d008-4eb0-4d8e-bed7-33623658821c"],
Cell[CellGroupData[{
Cell[1227062, 23603, 85, 0, 61, "Subsection", "ExpressionUUID" -> \
"e1a6f98c-f23d-4de9-ab23-399833662157"],
Cell[1227150, 23605, 88, 0, 50, "Subsubsection", "ExpressionUUID" -> \
"eb32b871-a866-48ec-aabf-d914f30d9d20"],
Cell[1227241, 23607, 88, 0, 41, "Subsubsection", "ExpressionUUID" -> \
"89e1da18-6ddc-4f59-8236-f57707a32293"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1227366, 23612, 92, 0, 61, "Subsection", "ExpressionUUID" -> \
"941578b0-e458-4ccd-8815-94638ea346c9"],
Cell[1227461, 23614, 91, 0, 50, "Subsubsection", "ExpressionUUID" -> \
"ad6332fe-fde1-4d67-a7a2-aa8c035062dd"],
Cell[1227555, 23616, 92, 0, 41, "Subsubsection", "ExpressionUUID" -> \
"392a0a1f-cbe4-4bcf-92e5-8a4e8364a520"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1227684, 23621, 86, 0, 61, "Subsection", "ExpressionUUID" -> \
"6a62a1b6-8306-47de-82a2-aab81d7ebf16"],
Cell[1227773, 23623, 96, 0, 50, "Subsubsection", "ExpressionUUID" -> \
"ab26c54f-4991-42de-af84-83ab6b8c7ac1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1227906, 23628, 92, 0, 61, "Subsection", "ExpressionUUID" -> \
"d68ab8fd-6bfc-4917-86bc-59a4cf5f5528"],
Cell[1228001, 23630, 87, 0, 50, "Subsubsection", "ExpressionUUID" -> \
"8d992b35-32b9-4803-b64f-e756b952a66b"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1228137, 23636, 183, 3, 92, "TemplateSubsection", "ExpressionUUID" -> \
"c54bc669-1d00-4e87-877b-cfd746ce37fa"],
Cell[1228323, 23641, 169, 3, 39, "TemplateComment", "ExpressionUUID" -> \
"a672a6f1-f8fa-4628-83e3-5438bd707f89"],
Cell[CellGroupData[{
Cell[1228517, 23648, 310, 7, 37, "Item", "ExpressionUUID" -> \
"66883a1c-6bbf-428e-84bc-a7c0ba375299"],
Cell[1228830, 23657, 157, 3, 37, "Item", "ExpressionUUID" -> \
"7c9362c5-ee46-4875-bc37-652189adc85e"]
}, Open  ]]
}, Open  ]],
Cell[1229014, 23664, 186, 3, 92, "TemplateSubsection", "ExpressionUUID" -> \
"a55786c3-e7a6-4cf3-bb54-b05532239df1"],
Cell[CellGroupData[{
Cell[1229225, 23671, 249, 4, 76, "TemplateSubsection", "ExpressionUUID" -> \
"5a247b12-4033-40a4-960f-65d46bf0f9c2"],
Cell[1229477, 23677, 367, 5, 64, "Text", "ExpressionUUID" -> \
"a1896613-fd76-41b2-b665-1f44f4443234"]
}, Open  ]],
Cell[1229859, 23685, 275, 4, 92, "TemplateSubsection", "ExpressionUUID" -> \
"f27ae70e-91c7-4506-8835-21b281190700"],
Cell[1230137, 23691, 257, 4, 76, "TemplateSubsection", "ExpressionUUID" -> \
"595aec4a-a293-426a-b50c-4acce4123cb2",
 CellTags->"DataSources"],
Cell[CellGroupData[{
Cell[1230419, 23699, 276, 4, 76, "TemplateSubsection", "ExpressionUUID" -> \
"e5647c6a-cb6b-4235-8887-8cfbb24ef769",
 CellTags->"FutureDirections"],
Cell[1230698, 23705, 100, 0, 61, "Subsection", "ExpressionUUID" -> \
"b3827628-9feb-418d-ab05-c78a7bd25d54"],
Cell[1230801, 23707, 96, 0, 49, "Subsection", "ExpressionUUID" -> \
"001a756e-195f-4294-afff-db463ce0f8cf"]
}, Open  ]],
Cell[1230912, 23710, 313, 5, 92, "TemplateSubsection", "ExpressionUUID" -> \
"f66f7ca2-dcb9-4c06-9d0a-f2cc48d9fd79",
 CellTags->"References"],
Cell[CellGroupData[{
Cell[1231250, 23719, 182, 2, 76, "TemplateSubsection", "ExpressionUUID" -> \
"0a9d4fd1-d336-4f32-b85d-12e6f9eed8ed",
 CellTags->"Keywords"],
Cell[CellGroupData[{
Cell[1231457, 23725, 90, 0, 37, "Item", "ExpressionUUID" -> \
"3b9a0db3-df49-4532-b956-8ec2c42dd8bf"],
Cell[1231550, 23727, 93, 0, 37, "Item", "ExpressionUUID" -> \
"afef2329-a25a-4745-9d1e-fa176e2e088d"],
Cell[1231646, 23729, 98, 0, 37, "Item", "ExpressionUUID" -> \
"5a5c7668-f7cd-4d9b-be85-8ddc15be092b"],
Cell[1231747, 23731, 85, 0, 37, "Item", "ExpressionUUID" -> \
"12f8c98c-2abc-4f04-91f2-e772fd34a94e"],
Cell[1231835, 23733, 84, 0, 37, "Item", "ExpressionUUID" -> \
"c3aa6d35-39fa-48d4-bffd-2794b628f85e"],
Cell[1231922, 23735, 88, 0, 37, "Item", "ExpressionUUID" -> \
"aca3293e-7f32-460a-918b-d544b4db5af6"],
Cell[1232013, 23737, 89, 0, 37, "Item", "ExpressionUUID" -> \
"acccdba7-4cc8-463f-9532-578badae9914"]
}, Open  ]]
}, Open  ]],
Cell[1232129, 23741, 160, 3, 92, "TemplateSubsection", "ExpressionUUID" -> \
"7829dc32-1c2b-44a2-9c28-0b354f138b29"],
Cell[CellGroupData[{
Cell[1232314, 23748, 162, 3, 76, "TemplateSubsection", "ExpressionUUID" -> \
"1cd568fb-8340-49f7-8b1e-208734b6bb99"],
Cell[1232479, 23753, 232, 7, 37, "LastModified", "ExpressionUUID" -> \
"62b79026-5d63-46ab-b5a6-6556f49fc1ac",
 CellTags->"LastModifiedDate"],
Cell[1232714, 23762, 917, 24, 55, "Input", "ExpressionUUID" -> \
"387919cf-8311-4ba3-bacd-ed733929beeb"]
}, Open  ]]
}, Open  ]]
}
]
*)

